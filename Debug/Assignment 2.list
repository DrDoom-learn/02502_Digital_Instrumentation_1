
Assignment 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  08005930  08005930  00015930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eb4  08005eb4  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08005eb4  08005eb4  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005eb4  08005eb4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005eb4  08005eb4  00015eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005eb8  08005eb8  00015eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08005ebc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  200001f4  080060b0  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  080060b0  00020474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a55f  00000000  00000000  00020267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d0a  00000000  00000000  0002a7c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da0  00000000  00000000  0002c4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a2b  00000000  00000000  0002d270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000117df  00000000  00000000  0002dc9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b6a7  00000000  00000000  0003f47a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005cc95  00000000  00000000  0004ab21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004dbc  00000000  00000000  000a77b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000ac574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005918 	.word	0x08005918

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	08005918 	.word	0x08005918

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	4608      	mov	r0, r1
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	70fb      	strb	r3, [r7, #3]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	70bb      	strb	r3, [r7, #2]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
 8000bca:	78bb      	ldrb	r3, [r7, #2]
 8000bcc:	2b04      	cmp	r3, #4
 8000bce:	d821      	bhi.n	8000c14 <ADC_RegularChannelConfig+0x6c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 8000bd6:	78ba      	ldrb	r2, [r7, #2]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	4413      	add	r3, r2
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	461a      	mov	r2, r3
 8000be2:	231f      	movs	r3, #31
 8000be4:	4093      	lsls	r3, r2
 8000be6:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	43db      	mvns	r3, r3
 8000bec:	68fa      	ldr	r2, [r7, #12]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 8000bf2:	78f9      	ldrb	r1, [r7, #3]
 8000bf4:	78ba      	ldrb	r2, [r7, #2]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	4413      	add	r3, r2
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000c02:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000c04:	68fa      	ldr	r2, [r7, #12]
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	631a      	str	r2, [r3, #48]	; 0x30
 8000c12:	e074      	b.n	8000cfe <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 5 to 9 */
  else if (Rank < 10)
 8000c14:	78bb      	ldrb	r3, [r7, #2]
 8000c16:	2b09      	cmp	r3, #9
 8000c18:	d823      	bhi.n	8000c62 <ADC_RegularChannelConfig+0xba>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c1e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 8000c20:	78bb      	ldrb	r3, [r7, #2]
 8000c22:	1f5a      	subs	r2, r3, #5
 8000c24:	4613      	mov	r3, r2
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	4413      	add	r3, r2
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	231f      	movs	r3, #31
 8000c30:	4093      	lsls	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	43db      	mvns	r3, r3
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 8000c3e:	78f9      	ldrb	r1, [r7, #3]
 8000c40:	78bb      	ldrb	r3, [r7, #2]
 8000c42:	1f5a      	subs	r2, r3, #5
 8000c44:	4613      	mov	r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	4413      	add	r3, r2
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c50:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	635a      	str	r2, [r3, #52]	; 0x34
 8000c60:	e04d      	b.n	8000cfe <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 10 to 14 */
  else if (Rank < 15)
 8000c62:	78bb      	ldrb	r3, [r7, #2]
 8000c64:	2b0e      	cmp	r3, #14
 8000c66:	d825      	bhi.n	8000cb4 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c6c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 8000c6e:	78bb      	ldrb	r3, [r7, #2]
 8000c70:	f1a3 020a 	sub.w	r2, r3, #10
 8000c74:	4613      	mov	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	231f      	movs	r3, #31
 8000c80:	4093      	lsls	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	43db      	mvns	r3, r3
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 8000c8e:	78f9      	ldrb	r1, [r7, #3]
 8000c90:	78bb      	ldrb	r3, [r7, #2]
 8000c92:	f1a3 020a 	sub.w	r2, r3, #10
 8000c96:	4613      	mov	r3, r2
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	4413      	add	r3, r2
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	639a      	str	r2, [r3, #56]	; 0x38
 8000cb2:	e024      	b.n	8000cfe <ADC_RegularChannelConfig+0x156>
  }
  else 
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cb8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 8000cba:	78bb      	ldrb	r3, [r7, #2]
 8000cbc:	f1a3 020f 	sub.w	r2, r3, #15
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	4413      	add	r3, r2
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	461a      	mov	r2, r3
 8000cca:	231f      	movs	r3, #31
 8000ccc:	4093      	lsls	r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 8000cda:	78f9      	ldrb	r1, [r7, #3]
 8000cdc:	78bb      	ldrb	r3, [r7, #2]
 8000cde:	f1a3 020f 	sub.w	r2, r3, #15
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	4413      	add	r3, r2
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	fa01 f303 	lsl.w	r3, r1, r3
 8000cee:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000cfe:	78fb      	ldrb	r3, [r7, #3]
 8000d00:	2b09      	cmp	r3, #9
 8000d02:	d923      	bls.n	8000d4c <ADC_RegularChannelConfig+0x1a4>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 8000d0a:	78fb      	ldrb	r3, [r7, #3]
 8000d0c:	f1a3 020a 	sub.w	r2, r3, #10
 8000d10:	4613      	mov	r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	2207      	movs	r2, #7
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	699a      	ldr	r2, [r3, #24]
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	43db      	mvns	r3, r3
 8000d26:	401a      	ands	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6999      	ldr	r1, [r3, #24]
 8000d30:	7878      	ldrb	r0, [r7, #1]
 8000d32:	78fb      	ldrb	r3, [r7, #3]
 8000d34:	f1a3 020a 	sub.w	r2, r3, #10
 8000d38:	4613      	mov	r3, r2
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	4413      	add	r3, r2
 8000d3e:	fa00 f303 	lsl.w	r3, r0, r3
 8000d42:	ea41 0203 	orr.w	r2, r1, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	619a      	str	r2, [r3, #24]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
  }
}
 8000d4a:	e01f      	b.n	8000d8c <ADC_RegularChannelConfig+0x1e4>
    tmpreg1 = ADCx->SMPR1;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	60fb      	str	r3, [r7, #12]
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 8000d52:	78fb      	ldrb	r3, [r7, #3]
 8000d54:	1e5a      	subs	r2, r3, #1
 8000d56:	4613      	mov	r3, r2
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	4413      	add	r3, r2
 8000d5c:	2238      	movs	r2, #56	; 0x38
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	60bb      	str	r3, [r7, #8]
	ADCx->SMPR1 &= ~tmpreg2;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	695a      	ldr	r2, [r3, #20]
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	401a      	ands	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	615a      	str	r2, [r3, #20]
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6959      	ldr	r1, [r3, #20]
 8000d76:	7878      	ldrb	r0, [r7, #1]
 8000d78:	78fa      	ldrb	r2, [r7, #3]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	4413      	add	r3, r2
 8000d80:	fa00 f303 	lsl.w	r3, r0, r3
 8000d84:	ea41 0203 	orr.w	r2, r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	615a      	str	r2, [r3, #20]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <ADC_StartConversion>:
  * @brief  Enables or disables the selected ADC start conversion .
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartConversion(ADC_TypeDef* ADCx)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTART bit */
  ADCx->CR |= ADC_CR_ADSTART;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f043 0204 	orr.w	r2, r3, #4
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	609a      	str	r2, [r3, #8]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc4:	b29b      	uxth	r3, r3
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
  *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b085      	sub	sp, #20
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->ISR & ADC_FLAG) != (uint32_t)RESET)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	4013      	ands	r3, r2
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d002      	beq.n	8000df2 <ADC_GetFlagStatus+0x20>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000dec:	2301      	movs	r3, #1
 8000dee:	73fb      	strb	r3, [r7, #15]
 8000df0:	e001      	b.n	8000df6 <ADC_GetFlagStatus+0x24>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <EXTI_Init>:
  * @retval None
  */
  

void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE_ALL(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000e10:	4b7b      	ldr	r3, [pc, #492]	; (8001000 <EXTI_Init+0x1fc>)
 8000e12:	60fb      	str	r3, [r7, #12]
      
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	799b      	ldrb	r3, [r3, #6]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f000 80d2 	beq.w	8000fc2 <EXTI_Init+0x1be>
  {
    /* Clear EXTI line configuration */   
    *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));   
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8000e28:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8000e2c:	015b      	lsls	r3, r3, #5
 8000e2e:	6819      	ldr	r1, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 031f 	and.w	r3, r3, #31
 8000e38:	2201      	movs	r2, #1
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	095b      	lsrs	r3, r3, #5
 8000e46:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8000e4a:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8000e4e:	015b      	lsls	r3, r3, #5
 8000e50:	4618      	mov	r0, r3
 8000e52:	ea01 0302 	and.w	r3, r1, r2
 8000e56:	6003      	str	r3, [r0, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->EMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	095b      	lsrs	r3, r3, #5
 8000e5e:	015a      	lsls	r2, r3, #5
 8000e60:	4b68      	ldr	r3, [pc, #416]	; (8001004 <EXTI_Init+0x200>)
 8000e62:	4413      	add	r3, r2
 8000e64:	6819      	ldr	r1, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 031f 	and.w	r3, r3, #31
 8000e6e:	2201      	movs	r2, #1
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43da      	mvns	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	095b      	lsrs	r3, r3, #5
 8000e7c:	0158      	lsls	r0, r3, #5
 8000e7e:	4b61      	ldr	r3, [pc, #388]	; (8001004 <EXTI_Init+0x200>)
 8000e80:	4403      	add	r3, r0
 8000e82:	4618      	mov	r0, r3
 8000e84:	ea01 0302 	and.w	r3, r1, r2
 8000e88:	6003      	str	r3, [r0, #0]
     
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	791b      	ldrb	r3, [r3, #4]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	095b      	lsrs	r3, r3, #5
 8000e96:	015b      	lsls	r3, r3, #5
 8000e98:	4413      	add	r3, r2
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f003 031f 	and.w	r3, r3, #31
 8000eac:	2101      	movs	r1, #1
 8000eae:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	601a      	str	r2, [r3, #0]
    
    tmp = (uint32_t)EXTI_BASE;
 8000eba:	4b51      	ldr	r3, [pc, #324]	; (8001000 <EXTI_Init+0x1fc>)
 8000ebc:	60fb      	str	r3, [r7, #12]

    /* Clear Rising Falling edge configuration */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	015a      	lsls	r2, r3, #5
 8000ec6:	4b50      	ldr	r3, [pc, #320]	; (8001008 <EXTI_Init+0x204>)
 8000ec8:	4413      	add	r3, r2
 8000eca:	6819      	ldr	r1, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 031f 	and.w	r3, r3, #31
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43da      	mvns	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	095b      	lsrs	r3, r3, #5
 8000ee2:	0158      	lsls	r0, r3, #5
 8000ee4:	4b48      	ldr	r3, [pc, #288]	; (8001008 <EXTI_Init+0x204>)
 8000ee6:	4403      	add	r3, r0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	ea01 0302 	and.w	r3, r1, r2
 8000eee:	6003      	str	r3, [r0, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	095b      	lsrs	r3, r3, #5
 8000ef6:	015a      	lsls	r2, r3, #5
 8000ef8:	4b44      	ldr	r3, [pc, #272]	; (800100c <EXTI_Init+0x208>)
 8000efa:	4413      	add	r3, r2
 8000efc:	6819      	ldr	r1, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 031f 	and.w	r3, r3, #31
 8000f06:	2201      	movs	r2, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43da      	mvns	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	095b      	lsrs	r3, r3, #5
 8000f14:	0158      	lsls	r0, r3, #5
 8000f16:	4b3d      	ldr	r3, [pc, #244]	; (800100c <EXTI_Init+0x208>)
 8000f18:	4403      	add	r3, r0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	ea01 0302 	and.w	r3, r1, r2
 8000f20:	6003      	str	r3, [r0, #0]
    
      /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	795b      	ldrb	r3, [r3, #5]
 8000f26:	2b10      	cmp	r3, #16
 8000f28:	d132      	bne.n	8000f90 <EXTI_Init+0x18c>
    {
      /* Rising Falling edge */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	095b      	lsrs	r3, r3, #5
 8000f30:	015a      	lsls	r2, r3, #5
 8000f32:	4b35      	ldr	r3, [pc, #212]	; (8001008 <EXTI_Init+0x204>)
 8000f34:	4413      	add	r3, r2
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 031f 	and.w	r3, r3, #31
 8000f40:	2101      	movs	r1, #1
 8000f42:	fa01 f303 	lsl.w	r3, r1, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	095b      	lsrs	r3, r3, #5
 8000f4e:	0159      	lsls	r1, r3, #5
 8000f50:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <EXTI_Init+0x204>)
 8000f52:	440b      	add	r3, r1
 8000f54:	4619      	mov	r1, r3
 8000f56:	ea42 0300 	orr.w	r3, r2, r0
 8000f5a:	600b      	str	r3, [r1, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));      
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	095b      	lsrs	r3, r3, #5
 8000f62:	015a      	lsls	r2, r3, #5
 8000f64:	4b29      	ldr	r3, [pc, #164]	; (800100c <EXTI_Init+0x208>)
 8000f66:	4413      	add	r3, r2
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 031f 	and.w	r3, r3, #31
 8000f72:	2101      	movs	r1, #1
 8000f74:	fa01 f303 	lsl.w	r3, r1, r3
 8000f78:	4618      	mov	r0, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	0159      	lsls	r1, r3, #5
 8000f82:	4b22      	ldr	r3, [pc, #136]	; (800100c <EXTI_Init+0x208>)
 8000f84:	440b      	add	r3, r1
 8000f86:	4619      	mov	r1, r3
 8000f88:	ea42 0300 	orr.w	r3, r2, r0
 8000f8c:	600b      	str	r3, [r1, #0]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
  }
         
}
 8000f8e:	e030      	b.n	8000ff2 <EXTI_Init+0x1ee>
      tmp += EXTI_InitStruct->EXTI_Trigger + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	795b      	ldrb	r3, [r3, #5]
 8000f94:	461a      	mov	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	015b      	lsls	r3, r3, #5
 8000f9e:	4413      	add	r3, r2
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 031f 	and.w	r3, r3, #31
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb8:	4619      	mov	r1, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	601a      	str	r2, [r3, #0]
}
 8000fc0:	e017      	b.n	8000ff2 <EXTI_Init+0x1ee>
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	791b      	ldrb	r3, [r3, #4]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	095b      	lsrs	r3, r3, #5
 8000fce:	015b      	lsls	r3, r3, #5
 8000fd0:	4413      	add	r3, r2
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6819      	ldr	r1, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 031f 	and.w	r3, r3, #31
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43da      	mvns	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	400a      	ands	r2, r1
 8000ff0:	601a      	str	r2, [r3, #0]
}
 8000ff2:	bf00      	nop
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40010400 	.word	0x40010400
 8001004:	40010404 	.word	0x40010404
 8001008:	40010408 	.word	0x40010408
 800100c:	4001040c 	.word	0x4001040c

08001010 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_Line) >> 5 ) * 0x20) & (uint32_t)(1 << (EXTI_Line & 0x1F));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	095b      	lsrs	r3, r3, #5
 8001024:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001028:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800102c:	015b      	lsls	r3, r3, #5
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	f002 021f 	and.w	r2, r2, #31
 8001036:	2101      	movs	r1, #1
 8001038:	fa01 f202 	lsl.w	r2, r1, r2
 800103c:	4013      	ands	r3, r2
 800103e:	60bb      	str	r3, [r7, #8]
 
  if ( (((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + (((EXTI_Line) >> 5 ) * 0x20) )) & (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	015a      	lsls	r2, r3, #5
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <EXTI_GetITStatus+0x6c>)
 8001048:	4413      	add	r3, r2
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	f002 021f 	and.w	r2, r2, #31
 8001052:	2101      	movs	r1, #1
 8001054:	fa01 f202 	lsl.w	r2, r1, r2
 8001058:	4013      	ands	r3, r2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d005      	beq.n	800106a <EXTI_GetITStatus+0x5a>
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d002      	beq.n	800106a <EXTI_GetITStatus+0x5a>
  {
    bitstatus = SET;
 8001064:	2301      	movs	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e001      	b.n	800106e <EXTI_GetITStatus+0x5e>
  }
  else
  {
    bitstatus = RESET;
 800106a:	2300      	movs	r3, #0
 800106c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	40010414 	.word	0x40010414

08001080 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));
  
  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 031f 	and.w	r3, r3, #31
 800108e:	2201      	movs	r2, #1
 8001090:	fa02 f103 	lsl.w	r1, r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	095b      	lsrs	r3, r3, #5
 8001098:	015a      	lsls	r2, r3, #5
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <EXTI_ClearITPendingBit+0x30>)
 800109c:	4413      	add	r3, r2
 800109e:	460a      	mov	r2, r1
 80010a0:	601a      	str	r2, [r3, #0]
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40010414 	.word	0x40010414

080010b4 <NVIC_PriorityGroupConfig>:
  *     @note When NVIC_PriorityGroup_0 is selected, it will no be any nested 
  *           interrupt. This interrupts priority is managed only with subpriority.                                    
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80010bc:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <NVIC_PriorityGroupConfig+0x24>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c8:	60d3      	str	r3, [r2, #12]
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80010dc:	b480      	push	{r7}
 80010de:	b087      	sub	sp, #28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	2300      	movs	r3, #0
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	230f      	movs	r3, #15
 80010ee:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	78db      	ldrb	r3, [r3, #3]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d03a      	beq.n	800116e <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80010f8:	4b28      	ldr	r3, [pc, #160]	; (800119c <NVIC_Init+0xc0>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	0a1b      	lsrs	r3, r3, #8
 8001100:	f003 0307 	and.w	r3, r3, #7
 8001104:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	f1c3 0304 	rsb	r3, r3, #4
 800110c:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa22 f303 	lsr.w	r3, r2, r3
 8001116:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	785b      	ldrb	r3, [r3, #1]
 800111c:	461a      	mov	r2, r3
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	789b      	ldrb	r3, [r3, #2]
 800112a:	461a      	mov	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4013      	ands	r3, r2
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	4313      	orrs	r3, r2
 8001134:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	011b      	lsls	r3, r3, #4
 800113a:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800113c:	4a18      	ldr	r2, [pc, #96]	; (80011a0 <NVIC_Init+0xc4>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	6979      	ldr	r1, [r7, #20]
 8001144:	b2c9      	uxtb	r1, r1
 8001146:	4413      	add	r3, r2
 8001148:	460a      	mov	r2, r1
 800114a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001156:	4912      	ldr	r1, [pc, #72]	; (80011a0 <NVIC_Init+0xc4>)
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	7812      	ldrb	r2, [r2, #0]
 800115c:	0952      	lsrs	r2, r2, #5
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001162:	2201      	movs	r2, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001168:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800116c:	e00f      	b.n	800118e <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001176:	490a      	ldr	r1, [pc, #40]	; (80011a0 <NVIC_Init+0xc4>)
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	7812      	ldrb	r2, [r2, #0]
 800117c:	0952      	lsrs	r2, r2, #5
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001182:	2201      	movs	r2, #1
 8001184:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001186:	f100 0320 	add.w	r3, r0, #32
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800118e:	bf00      	nop
 8001190:	371c      	adds	r7, #28
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000ed00 	.word	0xe000ed00
 80011a0:	e000e100 	.word	0xe000e100

080011a4 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b08b      	sub	sp, #44	; 0x2c
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	623b      	str	r3, [r7, #32]
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80011cc:	4b8b      	ldr	r3, [pc, #556]	; (80013fc <RCC_GetClocksFreq+0x258>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 030c 	and.w	r3, r3, #12
 80011d4:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80011d6:	6a3b      	ldr	r3, [r7, #32]
 80011d8:	2b08      	cmp	r3, #8
 80011da:	d011      	beq.n	8001200 <RCC_GetClocksFreq+0x5c>
 80011dc:	6a3b      	ldr	r3, [r7, #32]
 80011de:	2b08      	cmp	r3, #8
 80011e0:	d837      	bhi.n	8001252 <RCC_GetClocksFreq+0xae>
 80011e2:	6a3b      	ldr	r3, [r7, #32]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <RCC_GetClocksFreq+0x4c>
 80011e8:	6a3b      	ldr	r3, [r7, #32]
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	d004      	beq.n	80011f8 <RCC_GetClocksFreq+0x54>
 80011ee:	e030      	b.n	8001252 <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a83      	ldr	r2, [pc, #524]	; (8001400 <RCC_GetClocksFreq+0x25c>)
 80011f4:	601a      	str	r2, [r3, #0]
      break;
 80011f6:	e030      	b.n	800125a <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a81      	ldr	r2, [pc, #516]	; (8001400 <RCC_GetClocksFreq+0x25c>)
 80011fc:	601a      	str	r2, [r3, #0]
      break;
 80011fe:	e02c      	b.n	800125a <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8001200:	4b7e      	ldr	r3, [pc, #504]	; (80013fc <RCC_GetClocksFreq+0x258>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001208:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800120a:	4b7c      	ldr	r3, [pc, #496]	; (80013fc <RCC_GetClocksFreq+0x258>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001212:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	0c9b      	lsrs	r3, r3, #18
 8001218:	3302      	adds	r3, #2
 800121a:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d105      	bne.n	800122e <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	4a77      	ldr	r2, [pc, #476]	; (8001404 <RCC_GetClocksFreq+0x260>)
 8001226:	fb02 f303 	mul.w	r3, r2, r3
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
 800122c:	e00d      	b.n	800124a <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800122e:	4b73      	ldr	r3, [pc, #460]	; (80013fc <RCC_GetClocksFreq+0x258>)
 8001230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	3301      	adds	r3, #1
 8001238:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 800123a:	4a71      	ldr	r2, [pc, #452]	; (8001400 <RCC_GetClocksFreq+0x25c>)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	fb02 f303 	mul.w	r3, r2, r3
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800124e:	601a      	str	r2, [r3, #0]
      break;
 8001250:	e003      	b.n	800125a <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a6a      	ldr	r2, [pc, #424]	; (8001400 <RCC_GetClocksFreq+0x25c>)
 8001256:	601a      	str	r2, [r3, #0]
      break;
 8001258:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800125a:	4b68      	ldr	r3, [pc, #416]	; (80013fc <RCC_GetClocksFreq+0x258>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001262:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	091b      	lsrs	r3, r3, #4
 8001268:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 800126a:	4a67      	ldr	r2, [pc, #412]	; (8001408 <RCC_GetClocksFreq+0x264>)
 800126c:	6a3b      	ldr	r3, [r7, #32]
 800126e:	4413      	add	r3, r2
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	40da      	lsrs	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001282:	4b5e      	ldr	r3, [pc, #376]	; (80013fc <RCC_GetClocksFreq+0x258>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800128a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	0a1b      	lsrs	r3, r3, #8
 8001290:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8001292:	4a5d      	ldr	r2, [pc, #372]	; (8001408 <RCC_GetClocksFreq+0x264>)
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	4413      	add	r3, r2
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	40da      	lsrs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80012aa:	4b54      	ldr	r3, [pc, #336]	; (80013fc <RCC_GetClocksFreq+0x258>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80012b2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	0adb      	lsrs	r3, r3, #11
 80012b8:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 80012ba:	4a53      	ldr	r2, [pc, #332]	; (8001408 <RCC_GetClocksFreq+0x264>)
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	4413      	add	r3, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	40da      	lsrs	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 80012d2:	4b4a      	ldr	r3, [pc, #296]	; (80013fc <RCC_GetClocksFreq+0x258>)
 80012d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80012da:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80012dc:	6a3b      	ldr	r3, [r7, #32]
 80012de:	091b      	lsrs	r3, r3, #4
 80012e0:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80012e2:	4a4a      	ldr	r2, [pc, #296]	; (800140c <RCC_GetClocksFreq+0x268>)
 80012e4:	6a3b      	ldr	r3, [r7, #32]
 80012e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	f003 0310 	and.w	r3, r3, #16
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d006      	beq.n	8001306 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80012f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	611a      	str	r2, [r3, #16]
 8001304:	e003      	b.n	800130e <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 800130e:	4b3b      	ldr	r3, [pc, #236]	; (80013fc <RCC_GetClocksFreq+0x258>)
 8001310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001312:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8001316:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8001318:	6a3b      	ldr	r3, [r7, #32]
 800131a:	0a5b      	lsrs	r3, r3, #9
 800131c:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 800131e:	4a3b      	ldr	r2, [pc, #236]	; (800140c <RCC_GetClocksFreq+0x268>)
 8001320:	6a3b      	ldr	r3, [r7, #32]
 8001322:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001326:	b29b      	uxth	r3, r3
 8001328:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	f003 0310 	and.w	r3, r3, #16
 8001330:	2b00      	cmp	r3, #0
 8001332:	d006      	beq.n	8001342 <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8001334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	fbb2 f2f3 	udiv	r2, r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	615a      	str	r2, [r3, #20]
 8001340:	e003      	b.n	800134a <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 800134a:	4b2c      	ldr	r3, [pc, #176]	; (80013fc <RCC_GetClocksFreq+0x258>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0310 	and.w	r3, r3, #16
 8001352:	2b10      	cmp	r3, #16
 8001354:	d003      	beq.n	800135e <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a29      	ldr	r2, [pc, #164]	; (8001400 <RCC_GetClocksFreq+0x25c>)
 800135a:	619a      	str	r2, [r3, #24]
 800135c:	e003      	b.n	8001366 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8001366:	4b25      	ldr	r3, [pc, #148]	; (80013fc <RCC_GetClocksFreq+0x258>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0320 	and.w	r3, r3, #32
 800136e:	2b20      	cmp	r3, #32
 8001370:	d003      	beq.n	800137a <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a22      	ldr	r2, [pc, #136]	; (8001400 <RCC_GetClocksFreq+0x25c>)
 8001376:	61da      	str	r2, [r3, #28]
 8001378:	e003      	b.n	8001382 <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8001382:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <RCC_GetClocksFreq+0x258>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800138e:	d10d      	bne.n	80013ac <RCC_GetClocksFreq+0x208>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001396:	429a      	cmp	r2, r3
 8001398:	d108      	bne.n	80013ac <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d104      	bne.n	80013ac <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	005a      	lsls	r2, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	621a      	str	r2, [r3, #32]
 80013aa:	e003      	b.n	80013b4 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68da      	ldr	r2, [r3, #12]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <RCC_GetClocksFreq+0x258>)
 80013b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013c0:	d10d      	bne.n	80013de <RCC_GetClocksFreq+0x23a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d108      	bne.n	80013de <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d104      	bne.n	80013de <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	005a      	lsls	r2, r3, #1
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	625a      	str	r2, [r3, #36]	; 0x24
 80013dc:	e003      	b.n	80013e6 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68da      	ldr	r2, [r3, #12]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <RCC_GetClocksFreq+0x258>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10e      	bne.n	8001410 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68da      	ldr	r2, [r3, #12]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	629a      	str	r2, [r3, #40]	; 0x28
 80013fa:	e028      	b.n	800144e <RCC_GetClocksFreq+0x2aa>
 80013fc:	40021000 	.word	0x40021000
 8001400:	007a1200 	.word	0x007a1200
 8001404:	003d0900 	.word	0x003d0900
 8001408:	20000000 	.word	0x20000000
 800140c:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8001410:	4b6c      	ldr	r3, [pc, #432]	; (80015c4 <RCC_GetClocksFreq+0x420>)
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b01      	cmp	r3, #1
 800141a:	d104      	bne.n	8001426 <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	629a      	str	r2, [r3, #40]	; 0x28
 8001424:	e013      	b.n	800144e <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8001426:	4b67      	ldr	r3, [pc, #412]	; (80015c4 <RCC_GetClocksFreq+0x420>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0303 	and.w	r3, r3, #3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d104      	bne.n	800143c <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001438:	629a      	str	r2, [r3, #40]	; 0x28
 800143a:	e008      	b.n	800144e <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 800143c:	4b61      	ldr	r3, [pc, #388]	; (80015c4 <RCC_GetClocksFreq+0x420>)
 800143e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	2b03      	cmp	r3, #3
 8001446:	d102      	bne.n	800144e <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a5f      	ldr	r2, [pc, #380]	; (80015c8 <RCC_GetClocksFreq+0x424>)
 800144c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 800144e:	4b5d      	ldr	r3, [pc, #372]	; (80015c4 <RCC_GetClocksFreq+0x420>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d104      	bne.n	8001464 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	62da      	str	r2, [r3, #44]	; 0x2c
 8001462:	e021      	b.n	80014a8 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8001464:	4b57      	ldr	r3, [pc, #348]	; (80015c4 <RCC_GetClocksFreq+0x420>)
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001468:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800146c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001470:	d104      	bne.n	800147c <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	62da      	str	r2, [r3, #44]	; 0x2c
 800147a:	e015      	b.n	80014a8 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 800147c:	4b51      	ldr	r3, [pc, #324]	; (80015c4 <RCC_GetClocksFreq+0x420>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001484:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001488:	d104      	bne.n	8001494 <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001490:	62da      	str	r2, [r3, #44]	; 0x2c
 8001492:	e009      	b.n	80014a8 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8001494:	4b4b      	ldr	r3, [pc, #300]	; (80015c4 <RCC_GetClocksFreq+0x420>)
 8001496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001498:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800149c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80014a0:	d102      	bne.n	80014a8 <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a48      	ldr	r2, [pc, #288]	; (80015c8 <RCC_GetClocksFreq+0x424>)
 80014a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80014a8:	4b46      	ldr	r3, [pc, #280]	; (80015c4 <RCC_GetClocksFreq+0x420>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d104      	bne.n	80014be <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	631a      	str	r2, [r3, #48]	; 0x30
 80014bc:	e021      	b.n	8001502 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 80014be:	4b41      	ldr	r3, [pc, #260]	; (80015c4 <RCC_GetClocksFreq+0x420>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80014c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014ca:	d104      	bne.n	80014d6 <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	631a      	str	r2, [r3, #48]	; 0x30
 80014d4:	e015      	b.n	8001502 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80014d6:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <RCC_GetClocksFreq+0x420>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80014de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80014e2:	d104      	bne.n	80014ee <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014ea:	631a      	str	r2, [r3, #48]	; 0x30
 80014ec:	e009      	b.n	8001502 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80014ee:	4b35      	ldr	r3, [pc, #212]	; (80015c4 <RCC_GetClocksFreq+0x420>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80014f6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80014fa:	d102      	bne.n	8001502 <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a32      	ldr	r2, [pc, #200]	; (80015c8 <RCC_GetClocksFreq+0x424>)
 8001500:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8001502:	4b30      	ldr	r3, [pc, #192]	; (80015c4 <RCC_GetClocksFreq+0x420>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d104      	bne.n	8001518 <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	635a      	str	r2, [r3, #52]	; 0x34
 8001516:	e021      	b.n	800155c <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8001518:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <RCC_GetClocksFreq+0x420>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001520:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001524:	d104      	bne.n	8001530 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	635a      	str	r2, [r3, #52]	; 0x34
 800152e:	e015      	b.n	800155c <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8001530:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <RCC_GetClocksFreq+0x420>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001538:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800153c:	d104      	bne.n	8001548 <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001544:	635a      	str	r2, [r3, #52]	; 0x34
 8001546:	e009      	b.n	800155c <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8001548:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <RCC_GetClocksFreq+0x420>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001550:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001554:	d102      	bne.n	800155c <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a1b      	ldr	r2, [pc, #108]	; (80015c8 <RCC_GetClocksFreq+0x424>)
 800155a:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <RCC_GetClocksFreq+0x420>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d104      	bne.n	8001572 <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8001570:	e021      	b.n	80015b6 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <RCC_GetClocksFreq+0x420>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800157a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800157e:	d104      	bne.n	800158a <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001588:	e015      	b.n	80015b6 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <RCC_GetClocksFreq+0x420>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001592:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001596:	d104      	bne.n	80015a2 <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800159e:	639a      	str	r2, [r3, #56]	; 0x38
}
 80015a0:	e009      	b.n	80015b6 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <RCC_GetClocksFreq+0x420>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80015aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80015ae:	d102      	bne.n	80015b6 <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <RCC_GetClocksFreq+0x424>)
 80015b4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80015b6:	bf00      	nop
 80015b8:	372c      	adds	r7, #44	; 0x2c
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000
 80015c8:	007a1200 	.word	0x007a1200

080015cc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d006      	beq.n	80015ec <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80015de:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <RCC_APB2PeriphClockCmd+0x3c>)
 80015e0:	699a      	ldr	r2, [r3, #24]
 80015e2:	4909      	ldr	r1, [pc, #36]	; (8001608 <RCC_APB2PeriphClockCmd+0x3c>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80015ea:	e006      	b.n	80015fa <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <RCC_APB2PeriphClockCmd+0x3c>)
 80015ee:	699a      	ldr	r2, [r3, #24]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	43db      	mvns	r3, r3
 80015f4:	4904      	ldr	r1, [pc, #16]	; (8001608 <RCC_APB2PeriphClockCmd+0x3c>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	618b      	str	r3, [r1, #24]
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40021000 	.word	0x40021000

0800160c <SPI_SendData8>:
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	70fb      	strb	r3, [r7, #3]
  uint32_t spixbase = 0x00;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	330c      	adds	r3, #12
 8001624:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	78fa      	ldrb	r2, [r7, #3]
 800162a:	701a      	strb	r2, [r3, #0]
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001644:	2300      	movs	r3, #0
 8001646:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	891b      	ldrh	r3, [r3, #8]
 800164c:	b29a      	uxth	r2, r3
 800164e:	887b      	ldrh	r3, [r7, #2]
 8001650:	4013      	ands	r3, r2
 8001652:	b29b      	uxth	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d002      	beq.n	800165e <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001658:	2301      	movs	r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
 800165c:	e001      	b.n	8001662 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001662:	7bfb      	ldrb	r3, [r7, #15]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <SYSCFG_EXTILineConfig>:
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15)
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	460a      	mov	r2, r1
 800167a:	71fb      	strb	r3, [r7, #7]
 800167c:	4613      	mov	r3, r2
 800167e:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001684:	79bb      	ldrb	r3, [r7, #6]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	220f      	movs	r2, #15
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001694:	4a16      	ldr	r2, [pc, #88]	; (80016f0 <SYSCFG_EXTILineConfig+0x80>)
 8001696:	79bb      	ldrb	r3, [r7, #6]
 8001698:	089b      	lsrs	r3, r3, #2
 800169a:	b2db      	uxtb	r3, r3
 800169c:	3302      	adds	r3, #2
 800169e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	4812      	ldr	r0, [pc, #72]	; (80016f0 <SYSCFG_EXTILineConfig+0x80>)
 80016a8:	79b9      	ldrb	r1, [r7, #6]
 80016aa:	0889      	lsrs	r1, r1, #2
 80016ac:	b2c9      	uxtb	r1, r1
 80016ae:	401a      	ands	r2, r3
 80016b0:	1c8b      	adds	r3, r1, #2
 80016b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80016b6:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <SYSCFG_EXTILineConfig+0x80>)
 80016b8:	79bb      	ldrb	r3, [r7, #6]
 80016ba:	089b      	lsrs	r3, r3, #2
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	3302      	adds	r3, #2
 80016c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016c4:	79f9      	ldrb	r1, [r7, #7]
 80016c6:	79bb      	ldrb	r3, [r7, #6]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	4807      	ldr	r0, [pc, #28]	; (80016f0 <SYSCFG_EXTILineConfig+0x80>)
 80016d4:	79b9      	ldrb	r1, [r7, #6]
 80016d6:	0889      	lsrs	r1, r1, #2
 80016d8:	b2c9      	uxtb	r1, r1
 80016da:	431a      	orrs	r2, r3
 80016dc:	1c8b      	adds	r3, r1, #2
 80016de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80016e2:	bf00      	nop
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40010000 	.word	0x40010000

080016f4 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d008      	beq.n	8001718 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	b29b      	uxth	r3, r3
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	b29a      	uxth	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8001716:	e007      	b.n	8001728 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	b29b      	uxth	r3, r3
 800171e:	f023 0301 	bic.w	r3, r3, #1
 8001722:	b29a      	uxth	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	801a      	strh	r2, [r3, #0]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8001744:	2300      	movs	r3, #0
 8001746:	81bb      	strh	r3, [r7, #12]
 8001748:	2300      	movs	r3, #0
 800174a:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	b29a      	uxth	r2, r3
 8001752:	887b      	ldrh	r3, [r7, #2]
 8001754:	4013      	ands	r3, r2
 8001756:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	b29a      	uxth	r2, r3
 800175e:	887b      	ldrh	r3, [r7, #2]
 8001760:	4013      	ands	r3, r2
 8001762:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001764:	89bb      	ldrh	r3, [r7, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d005      	beq.n	8001776 <TIM_GetITStatus+0x42>
 800176a:	897b      	ldrh	r3, [r7, #10]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d002      	beq.n	8001776 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001770:	2301      	movs	r3, #1
 8001772:	73fb      	strb	r3, [r7, #15]
 8001774:	e001      	b.n	800177a <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8001776:	2300      	movs	r3, #0
 8001778:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8001794:	887b      	ldrh	r3, [r7, #2]
 8001796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800179a:	b29a      	uxth	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b089      	sub	sp, #36	; 0x24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	4613      	mov	r3, r2
 80017b8:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	0a1b      	lsrs	r3, r3, #8
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80017de:	2201      	movs	r2, #1
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d103      	bne.n	80017f6 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3304      	adds	r3, #4
 80017f2:	61fb      	str	r3, [r7, #28]
 80017f4:	e005      	b.n	8001802 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d102      	bne.n	8001802 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	3308      	adds	r3, #8
 8001800:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d006      	beq.n	8001816 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	6819      	ldr	r1, [r3, #0]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	430a      	orrs	r2, r1
 8001812:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001814:	e006      	b.n	8001824 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	6819      	ldr	r1, [r3, #0]
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	43da      	mvns	r2, r3
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	400a      	ands	r2, r1
 8001822:	601a      	str	r2, [r3, #0]
}
 8001824:	bf00      	nop
 8001826:	3724      	adds	r7, #36	; 0x24
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69da      	ldr	r2, [r3, #28]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	4013      	ands	r3, r2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d002      	beq.n	8001850 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800184a:	2301      	movs	r3, #1
 800184c:	73fb      	strb	r3, [r7, #15]
 800184e:	e001      	b.n	8001854 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8001850:	2300      	movs	r3, #0
 8001852:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001854:	7bfb      	ldrb	r3, [r7, #15]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8001862:	b480      	push	{r7}
 8001864:	b087      	sub	sp, #28
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001878:	2300      	movs	r3, #0
 800187a:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	b29b      	uxth	r3, r3
 8001884:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800188c:	2201      	movs	r2, #1
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d105      	bne.n	80018a8 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	4013      	ands	r3, r2
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	e00d      	b.n	80018c4 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d105      	bne.n	80018ba <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	4013      	ands	r3, r2
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	e004      	b.n	80018c4 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4013      	ands	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80018ca:	2201      	movs	r2, #1
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	4013      	ands	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <USART_GetITStatus+0x8e>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d002      	beq.n	80018f0 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 80018ea:	2301      	movs	r3, #1
 80018ec:	74fb      	strb	r3, [r7, #19]
 80018ee:	e001      	b.n	80018f4 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 80018f0:	2300      	movs	r3, #0
 80018f2:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80018f4:	7cfb      	ldrb	r3, [r7, #19]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	371c      	adds	r7, #28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	f003 031f 	and.w	r3, r3, #31
 8001914:	2201      	movs	r2, #1
 8001916:	fa02 f103 	lsl.w	r1, r2, r3
 800191a:	4a06      	ldr	r2, [pc, #24]	; (8001934 <NVIC_EnableIRQ+0x30>)
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	095b      	lsrs	r3, r3, #5
 8001922:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000e100 	.word	0xe000e100

08001938 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	b29b      	uxth	r3, r3
 8001946:	4619      	mov	r1, r3
 8001948:	4807      	ldr	r0, [pc, #28]	; (8001968 <uart_put_char+0x30>)
 800194a:	f7ff ff1d 	bl	8001788 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 800194e:	bf00      	nop
 8001950:	2180      	movs	r1, #128	; 0x80
 8001952:	4805      	ldr	r0, [pc, #20]	; (8001968 <uart_put_char+0x30>)
 8001954:	f7ff ff6c 	bl	8001830 <USART_GetFlagStatus>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f8      	beq.n	8001950 <uart_put_char+0x18>
}
 800195e:	bf00      	nop
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40004400 	.word	0x40004400

0800196c <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	e012      	b.n	80019a6 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b0a      	cmp	r3, #10
 800198a:	d102      	bne.n	8001992 <_write_r+0x26>
            uart_put_char('\r');
 800198c:	200d      	movs	r0, #13
 800198e:	f7ff ffd3 	bl	8001938 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	4413      	add	r3, r2
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff ffcc 	bl	8001938 <uart_put_char>
    for (n = 0; n < len; n++) {
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	3301      	adds	r3, #1
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	dbe8      	blt.n	8001980 <_write_r+0x14>
    }

    return len;
 80019ae:	683b      	ldr	r3, [r7, #0]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 80019bc:	4915      	ldr	r1, [pc, #84]	; (8001a14 <USART2_IRQHandler+0x5c>)
 80019be:	4816      	ldr	r0, [pc, #88]	; (8001a18 <USART2_IRQHandler+0x60>)
 80019c0:	f7ff ff4f 	bl	8001862 <USART_GetITStatus>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d021      	beq.n	8001a0e <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 80019ca:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <USART2_IRQHandler+0x60>)
 80019cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019ce:	b299      	uxth	r1, r3
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <USART2_IRQHandler+0x64>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	b2d0      	uxtb	r0, r2
 80019da:	4a10      	ldr	r2, [pc, #64]	; (8001a1c <USART2_IRQHandler+0x64>)
 80019dc:	7010      	strb	r0, [r2, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	b2c9      	uxtb	r1, r1
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <USART2_IRQHandler+0x68>)
 80019e4:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 80019e6:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <USART2_IRQHandler+0x6c>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2bff      	cmp	r3, #255	; 0xff
 80019ee:	d107      	bne.n	8001a00 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 80019f0:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <USART2_IRQHandler+0x70>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	3301      	adds	r3, #1
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <USART2_IRQHandler+0x70>)
 80019fc:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 80019fe:	e006      	b.n	8001a0e <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <USART2_IRQHandler+0x6c>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	3301      	adds	r3, #1
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <USART2_IRQHandler+0x6c>)
 8001a0c:	701a      	strb	r2, [r3, #0]
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	00050105 	.word	0x00050105
 8001a18:	40004400 	.word	0x40004400
 8001a1c:	20000310 	.word	0x20000310
 8001a20:	20000210 	.word	0x20000210
 8001a24:	20000312 	.word	0x20000312
 8001a28:	20000311 	.word	0x20000311

08001a2c <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b094      	sub	sp, #80	; 0x50
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8001a34:	4b86      	ldr	r3, [pc, #536]	; (8001c50 <uart_init+0x224>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f001 fd69 	bl	8003514 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8001a42:	4b83      	ldr	r3, [pc, #524]	; (8001c50 <uart_init+0x224>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f001 fd62 	bl	8003514 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8001a50:	4b80      	ldr	r3, [pc, #512]	; (8001c54 <uart_init+0x228>)
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	4a7f      	ldr	r2, [pc, #508]	; (8001c54 <uart_init+0x228>)
 8001a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a5a:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8001a5c:	4b7d      	ldr	r3, [pc, #500]	; (8001c54 <uart_init+0x228>)
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	4a7c      	ldr	r2, [pc, #496]	; (8001c54 <uart_init+0x228>)
 8001a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a66:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8001a68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a76:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8001a78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a86:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8001a88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001a96:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8001a98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001aa2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001aa6:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8001aa8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ab2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ab6:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001ab8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ac2:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001ac6:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8001ac8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001acc:	889b      	ldrh	r3, [r3, #4]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ad4:	f023 030c 	bic.w	r3, r3, #12
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001adc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ae0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ae4:	8892      	ldrh	r2, [r2, #4]
 8001ae6:	b292      	uxth	r2, r2
 8001ae8:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8001aea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001af4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001af8:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001afa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001b04:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001b08:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8001b0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001b14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b18:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001b1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001b24:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001b28:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8001b2a:	4b4b      	ldr	r3, [pc, #300]	; (8001c58 <uart_init+0x22c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a4a      	ldr	r2, [pc, #296]	; (8001c58 <uart_init+0x22c>)
 8001b30:	f023 0301 	bic.w	r3, r3, #1
 8001b34:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8001b36:	4b48      	ldr	r3, [pc, #288]	; (8001c58 <uart_init+0x22c>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	4a47      	ldr	r2, [pc, #284]	; (8001c58 <uart_init+0x22c>)
 8001b3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b40:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8001b42:	4b45      	ldr	r3, [pc, #276]	; (8001c58 <uart_init+0x22c>)
 8001b44:	4a44      	ldr	r2, [pc, #272]	; (8001c58 <uart_init+0x22c>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8001b4a:	4b43      	ldr	r3, [pc, #268]	; (8001c58 <uart_init+0x22c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a42      	ldr	r2, [pc, #264]	; (8001c58 <uart_init+0x22c>)
 8001b50:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001b54:	f023 030c 	bic.w	r3, r3, #12
 8001b58:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8001b5a:	4b3f      	ldr	r3, [pc, #252]	; (8001c58 <uart_init+0x22c>)
 8001b5c:	4a3e      	ldr	r2, [pc, #248]	; (8001c58 <uart_init+0x22c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8001b62:	4b3d      	ldr	r3, [pc, #244]	; (8001c58 <uart_init+0x22c>)
 8001b64:	4a3c      	ldr	r2, [pc, #240]	; (8001c58 <uart_init+0x22c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8001b6a:	4b3b      	ldr	r3, [pc, #236]	; (8001c58 <uart_init+0x22c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a3a      	ldr	r2, [pc, #232]	; (8001c58 <uart_init+0x22c>)
 8001b70:	f043 030c 	orr.w	r3, r3, #12
 8001b74:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8001b76:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <uart_init+0x22c>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	4a37      	ldr	r2, [pc, #220]	; (8001c58 <uart_init+0x22c>)
 8001b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b80:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8001b82:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <uart_init+0x22c>)
 8001b84:	4a34      	ldr	r2, [pc, #208]	; (8001c58 <uart_init+0x22c>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b8e:	2300      	movs	r3, #0
 8001b90:	647b      	str	r3, [r7, #68]	; 0x44
 8001b92:	2300      	movs	r3, #0
 8001b94:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8001b96:	f107 0308 	add.w	r3, r7, #8
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fb02 	bl	80011a4 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8001ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba2:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001ba4:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <uart_init+0x22c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d010      	beq.n	8001bd2 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8001bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bb2:	005a      	lsls	r2, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bba:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	fb01 f202 	mul.w	r2, r1, r2
 8001bcc:	1a9b      	subs	r3, r3, r2
 8001bce:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bd0:	e00d      	b.n	8001bee <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8001bd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bda:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8001bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	fbb3 f2f2 	udiv	r2, r3, r2
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	fb01 f202 	mul.w	r2, r1, r2
 8001bea:	1a9b      	subs	r3, r3, r2
 8001bec:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	085b      	lsrs	r3, r3, #1
 8001bf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d302      	bcc.n	8001bfe <uart_init+0x1d2>
        divider++;
 8001bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001bfe:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <uart_init+0x22c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00b      	beq.n	8001c22 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8001c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c0c:	085b      	lsrs	r3, r3, #1
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8001c14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c16:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8001c22:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <uart_init+0x22c>)
 8001c24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c26:	b292      	uxth	r2, r2
 8001c28:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <uart_init+0x22c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <uart_init+0x22c>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8001c36:	2201      	movs	r2, #1
 8001c38:	4908      	ldr	r1, [pc, #32]	; (8001c5c <uart_init+0x230>)
 8001c3a:	4807      	ldr	r0, [pc, #28]	; (8001c58 <uart_init+0x22c>)
 8001c3c:	f7ff fdb6 	bl	80017ac <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8001c40:	2026      	movs	r0, #38	; 0x26
 8001c42:	f7ff fe5f 	bl	8001904 <NVIC_EnableIRQ>
}
 8001c46:	bf00      	nop
 8001c48:	3750      	adds	r7, #80	; 0x50
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000084 	.word	0x20000084
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40004400 	.word	0x40004400
 8001c5c:	00050105 	.word	0x00050105

08001c60 <ADC_measure_PA>:

}



uint16_t ADC_measure_PA(uint8_t ch) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
	ADC_RegularChannelConfig(ADC1, ch, 1, ADC_SampleTime_1Cycles5);
 8001c6a:	79f9      	ldrb	r1, [r7, #7]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c74:	f7fe ff98 	bl	8000ba8 <ADC_RegularChannelConfig>
	ADC_StartConversion(ADC1); 	/* Start ADC read */
 8001c78:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c7c:	f7ff f88c 	bl	8000d98 <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0) {} /* Wait for ADC read */
 8001c80:	bf00      	nop
 8001c82:	2104      	movs	r1, #4
 8001c84:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c88:	f7ff f8a3 	bl	8000dd2 <ADC_GetFlagStatus>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f7      	beq.n	8001c82 <ADC_measure_PA+0x22>
	uint16_t x = ADC_GetConversionValue(ADC1); // Read the ADC value into a variable
 8001c92:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c96:	f7ff f88f 	bl	8000db8 <ADC_GetConversionValue>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	81fb      	strh	r3, [r7, #14]

	return x;
 8001c9e:	89fb      	ldrh	r3, [r7, #14]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <EXTI1_IRQHandler>:





void EXTI1_IRQHandler(void) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 8001cac:	b672      	cpsid	i
}
 8001cae:	bf00      	nop
	__disable_irq();
	//split timer / LEFT
	if (EXTI_GetITStatus(EXTI_Line1) != RESET) {
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f7ff f9ad 	bl	8001010 <EXTI_GetITStatus>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d016      	beq.n	8001cea <EXTI1_IRQHandler+0x42>
		sw_split.hours = sw_time.hours;
 8001cbc:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <EXTI1_IRQHandler+0x4c>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <EXTI1_IRQHandler+0x50>)
 8001cc4:	701a      	strb	r2, [r3, #0]
		sw_split.minutes = sw_time.minutes;
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <EXTI1_IRQHandler+0x4c>)
 8001cc8:	785b      	ldrb	r3, [r3, #1]
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <EXTI1_IRQHandler+0x50>)
 8001cce:	705a      	strb	r2, [r3, #1]
		sw_split.seconds = sw_time.seconds;
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <EXTI1_IRQHandler+0x4c>)
 8001cd2:	789b      	ldrb	r3, [r3, #2]
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <EXTI1_IRQHandler+0x50>)
 8001cd8:	709a      	strb	r2, [r3, #2]
		sw_split.hundredths = sw_time.hundredths;
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <EXTI1_IRQHandler+0x4c>)
 8001cdc:	78db      	ldrb	r3, [r3, #3]
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <EXTI1_IRQHandler+0x50>)
 8001ce2:	70da      	strb	r2, [r3, #3]

		EXTI_ClearITPendingBit(EXTI_Line1);
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f7ff f9cb 	bl	8001080 <EXTI_ClearITPendingBit>
  __ASM volatile ("cpsie i");
 8001cea:	b662      	cpsie	i
}
 8001cec:	bf00      	nop
	}
	__enable_irq();
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	2000031c 	.word	0x2000031c
 8001cf8:	20000320 	.word	0x20000320

08001cfc <EXTI0_IRQHandler>:

// Stop and clear timer / DOWN
void EXTI0_IRQHandler(void) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i");
 8001d00:	b672      	cpsid	i
}
 8001d02:	bf00      	nop
	__disable_irq();
	if (EXTI_GetITStatus(EXTI_Line0) != RESET) {
 8001d04:	2000      	movs	r0, #0
 8001d06:	f7ff f983 	bl	8001010 <EXTI_GetITStatus>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d013      	beq.n	8001d38 <EXTI0_IRQHandler+0x3c>
		TIM_Cmd(TIM2, DISABLE);
 8001d10:	2100      	movs	r1, #0
 8001d12:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d16:	f7ff fced 	bl	80016f4 <TIM_Cmd>
		sw_time.hours = 0;
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <EXTI0_IRQHandler+0x44>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
		sw_time.minutes = 0;
 8001d20:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <EXTI0_IRQHandler+0x44>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	705a      	strb	r2, [r3, #1]
		sw_time.seconds = 0;
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <EXTI0_IRQHandler+0x44>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	709a      	strb	r2, [r3, #2]
		sw_time.hundredths = 0;
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <EXTI0_IRQHandler+0x44>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	70da      	strb	r2, [r3, #3]

		EXTI_ClearITPendingBit(EXTI_Line0);
 8001d32:	2000      	movs	r0, #0
 8001d34:	f7ff f9a4 	bl	8001080 <EXTI_ClearITPendingBit>
  __ASM volatile ("cpsie i");
 8001d38:	b662      	cpsie	i
}
 8001d3a:	bf00      	nop
	}
	__enable_irq();
}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	2000031c 	.word	0x2000031c

08001d44 <EXTI4_IRQHandler>:

// Start/Stop timer - Up
void EXTI4_IRQHandler(void) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i");
 8001d48:	b672      	cpsid	i
}
 8001d4a:	bf00      	nop
	__disable_irq();
	if (EXTI_GetITStatus(EXTI_Line4) != RESET) {
 8001d4c:	2004      	movs	r0, #4
 8001d4e:	f7ff f95f 	bl	8001010 <EXTI_GetITStatus>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00c      	beq.n	8001d72 <EXTI4_IRQHandler+0x2e>

		TIM2->CR1 ^= TIM_CR1_CEN;
 8001d58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d64:	f083 0301 	eor.w	r3, r3, #1
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	8013      	strh	r3, [r2, #0]

		EXTI_ClearITPendingBit(EXTI_Line4);
 8001d6c:	2004      	movs	r0, #4
 8001d6e:	f7ff f987 	bl	8001080 <EXTI_ClearITPendingBit>
  __ASM volatile ("cpsie i");
 8001d72:	b662      	cpsie	i
}
 8001d74:	bf00      	nop
	}
	__enable_irq();
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <init_Interrupt>:

void init_Interrupt(void) {
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b084      	sub	sp, #16
 8001d7e:	af00      	add	r7, sp, #0
    EXTI_InitTypeDef EXTI_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001d80:	2101      	movs	r1, #1
 8001d82:	2001      	movs	r0, #1
 8001d84:	f7ff fc22 	bl	80015cc <RCC_APB2PeriphClockCmd>

    // define and set setting for EXTI
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource5); // sets port B pin 5 to the IRQ (center)
 8001d88:	2105      	movs	r1, #5
 8001d8a:	2001      	movs	r0, #1
 8001d8c:	f7ff fc70 	bl	8001670 <SYSCFG_EXTILineConfig>
    EXTI_InitStructure.EXTI_Line = EXTI_Line5; // line 5 see [RM p. 215]
 8001d90:	2305      	movs	r3, #5
 8001d92:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73bb      	strb	r3, [r7, #14]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8001d9c:	2308      	movs	r3, #8
 8001d9e:	737b      	strb	r3, [r7, #13]
    EXTI_Init(&EXTI_InitStructure);
 8001da0:	f107 0308 	add.w	r3, r7, #8
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff f82d 	bl	8000e04 <EXTI_Init>

    // define and set setting for EXTI
    //SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC,EXTI_PinSource0); // sets port C pin 0 to the IRQ (right)
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource0); // sets port B pin 0 to the IRQ (down)
 8001daa:	2100      	movs	r1, #0
 8001dac:	2001      	movs	r0, #1
 8001dae:	f7ff fc5f 	bl	8001670 <SYSCFG_EXTILineConfig>
    EXTI_InitStructure.EXTI_Line = EXTI_Line0; // line 0 see [RM p. 215]
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8001db6:	2300      	movs	r3, #0
 8001db8:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8001dba:	2308      	movs	r3, #8
 8001dbc:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
 8001dc2:	f107 0308 	add.w	r3, r7, #8
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff f81c 	bl	8000e04 <EXTI_Init>

    // define and set setting for EXTI
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource1); // sets port C pin 5 to the IRQ (left)
 8001dcc:	2101      	movs	r1, #1
 8001dce:	2002      	movs	r0, #2
 8001dd0:	f7ff fc4e 	bl	8001670 <SYSCFG_EXTILineConfig>
    EXTI_InitStructure.EXTI_Line = EXTI_Line1; // line 1 see [RM p. 215]
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8001ddc:	2308      	movs	r3, #8
 8001dde:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8001de0:	2301      	movs	r3, #1
 8001de2:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
 8001de4:	f107 0308 	add.w	r3, r7, #8
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff f80b 	bl	8000e04 <EXTI_Init>

    // define and set setting for EXTI
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource4); // sets port A pin 4 to the IRQ (up)
 8001dee:	2104      	movs	r1, #4
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff fc3d 	bl	8001670 <SYSCFG_EXTILineConfig>
    EXTI_InitStructure.EXTI_Line = EXTI_Line4; // line 4 see [RM p. 215]
 8001df6:	2304      	movs	r3, #4
 8001df8:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	73bb      	strb	r3, [r7, #14]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8001e02:	2308      	movs	r3, #8
 8001e04:	737b      	strb	r3, [r7, #13]
    EXTI_Init(&EXTI_InitStructure);
 8001e06:	f107 0308 	add.w	r3, r7, #8
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fffa 	bl	8000e04 <EXTI_Init>
        // setup NVIC
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 8001e10:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8001e14:	f7ff f94e 	bl	80010b4 <NVIC_PriorityGroupConfig>

    // setup NVIC 0
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 8001e18:	2306      	movs	r3, #6
 8001e1a:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	71fb      	strb	r3, [r7, #7]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	71bb      	strb	r3, [r7, #6]
    NVIC_Init(&NVIC_InitStructure);
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff f956 	bl	80010dc <NVIC_Init>

    // setup NVIC 1
    NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn;
 8001e30:	2307      	movs	r3, #7
 8001e32:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001e34:	2301      	movs	r3, #1
 8001e36:	71fb      	strb	r3, [r7, #7]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	71bb      	strb	r3, [r7, #6]
    NVIC_Init(&NVIC_InitStructure);
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff f94a 	bl	80010dc <NVIC_Init>

    // setup NVIC 4
    NVIC_InitStructure.NVIC_IRQChannel = EXTI4_IRQn;
 8001e48:	230a      	movs	r3, #10
 8001e4a:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	71fb      	strb	r3, [r7, #7]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	71bb      	strb	r3, [r7, #6]
    NVIC_Init(&NVIC_InitStructure);
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff f93e 	bl	80010dc <NVIC_Init>

}
 8001e60:	bf00      	nop
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <TIM1_BRK_TIM15_IRQHandler>:
	NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);

	TIM_Cmd(TIM15, ENABLE);
}

void TIM1_BRK_TIM15_IRQHandler(void) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8001e6e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i");
 8001e70:	b672      	cpsid	i
}
 8001e72:	bf00      	nop
	//TODO sæt et flag her og gør ting i main.c

	__disable_irq();

	uint16_t x = ADC_measure_PA(1);
 8001e74:	2001      	movs	r0, #1
 8001e76:	f7ff fef3 	bl	8001c60 <ADC_measure_PA>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	uint16_t y = ADC_measure_PA(2);
 8001e80:	2002      	movs	r0, #2
 8001e82:	f7ff feed 	bl	8001c60 <ADC_measure_PA>
 8001e86:	4603      	mov	r3, r0
 8001e88:	f8a7 340c 	strh.w	r3, [r7, #1036]	; 0x40c

	uint8_t printout[512] = {0};
 8001e8c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001e90:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f001 fc50 	bl	8003746 <memset>

	char str_test[512] = {0};
 8001ea6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001eaa:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f001 fc43 	bl	8003746 <memset>

	if (++LCD_COUNTER == LCD_DELAY_MAX) {
 8001ec0:	4b36      	ldr	r3, [pc, #216]	; (8001f9c <TIM1_BRK_TIM15_IRQHandler+0x134>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	4b34      	ldr	r3, [pc, #208]	; (8001f9c <TIM1_BRK_TIM15_IRQHandler+0x134>)
 8001eca:	701a      	strb	r2, [r3, #0]
 8001ecc:	4b33      	ldr	r3, [pc, #204]	; (8001f9c <TIM1_BRK_TIM15_IRQHandler+0x134>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2264      	movs	r2, #100	; 0x64
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d15b      	bne.n	8001f8e <TIM1_BRK_TIM15_IRQHandler+0x126>

		float VCH1 = (VDDA / 4095) * x;
 8001ed6:	4b32      	ldr	r3, [pc, #200]	; (8001fa0 <TIM1_BRK_TIM15_IRQHandler+0x138>)
 8001ed8:	edd3 7a00 	vldr	s15, [r3]
 8001edc:	eddf 6a31 	vldr	s13, [pc, #196]	; 8001fa4 <TIM1_BRK_TIM15_IRQHandler+0x13c>
 8001ee0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ee4:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8001ee8:	ee07 3a90 	vmov	s15, r3
 8001eec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef4:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001ef8:	edc3 7a00 	vstr	s15, [r3]
		float VCH2 = (VDDA / 4095) * y;
 8001efc:	4b28      	ldr	r3, [pc, #160]	; (8001fa0 <TIM1_BRK_TIM15_IRQHandler+0x138>)
 8001efe:	edd3 7a00 	vldr	s15, [r3]
 8001f02:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001fa4 <TIM1_BRK_TIM15_IRQHandler+0x13c>
 8001f06:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f0a:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	; 0x40c
 8001f0e:	ee07 3a90 	vmov	s15, r3
 8001f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f1a:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8001f1e:	edc3 7a00 	vstr	s15, [r3]

		//TODO lav en funktion til at samle nedenstående
		sprintf(str_test, "VCH1 = %.2f", VCH1);
 8001f22:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	f7fe fb0e 	bl	8000548 <__aeabi_f2d>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	1d38      	adds	r0, r7, #4
 8001f32:	491d      	ldr	r1, [pc, #116]	; (8001fa8 <TIM1_BRK_TIM15_IRQHandler+0x140>)
 8001f34:	f001 fba4 	bl	8003680 <siprintf>
		lcd_write_string(str_test, printout, 1, 1);
 8001f38:	f507 7101 	add.w	r1, r7, #516	; 0x204
 8001f3c:	1d38      	adds	r0, r7, #4
 8001f3e:	2301      	movs	r3, #1
 8001f40:	2201      	movs	r2, #1
 8001f42:	f000 fc07 	bl	8002754 <lcd_write_string>
		lcd_push_buffer(printout);
 8001f46:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 f8b2 	bl	80020b4 <lcd_push_buffer>

		sprintf(str_test, "VCH2 = %.2f", VCH2);
 8001f50:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	f7fe faf7 	bl	8000548 <__aeabi_f2d>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	1d38      	adds	r0, r7, #4
 8001f60:	4912      	ldr	r1, [pc, #72]	; (8001fac <TIM1_BRK_TIM15_IRQHandler+0x144>)
 8001f62:	f001 fb8d 	bl	8003680 <siprintf>
		lcd_write_string(str_test, printout, 1, 2);
 8001f66:	f507 7101 	add.w	r1, r7, #516	; 0x204
 8001f6a:	1d38      	adds	r0, r7, #4
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f000 fbf0 	bl	8002754 <lcd_write_string>
		lcd_push_buffer(printout);
 8001f74:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 f89b 	bl	80020b4 <lcd_push_buffer>
		LCD_flag = FALSE;
 8001f7e:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <TIM1_BRK_TIM15_IRQHandler+0x148>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	701a      	strb	r2, [r3, #0]
		LCD_COUNTER = RESET;
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <TIM1_BRK_TIM15_IRQHandler+0x134>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 8001f8a:	b662      	cpsie	i
}
 8001f8c:	bf00      	nop
  __ASM volatile ("cpsie i");
 8001f8e:	b662      	cpsie	i
}
 8001f90:	bf00      	nop
		TIM_ClearITPendingBit(TIM15, TIM_IT_Update);
	}
*/

	__enable_irq();
}
 8001f92:	bf00      	nop
 8001f94:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000313 	.word	0x20000313
 8001fa0:	20000318 	.word	0x20000318
 8001fa4:	457ff000 	.word	0x457ff000
 8001fa8:	0800593c 	.word	0x0800593c
 8001fac:	08005948 	.word	0x08005948
 8001fb0:	20000314 	.word	0x20000314

08001fb4 <TIM2_IRQHandler>:
//	// Clear the interrupt flag
//
//	__enable_irq();
//}

void TIM2_IRQHandler(void) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i");
 8001fb8:	b672      	cpsid	i
}
 8001fba:	bf00      	nop
	__disable_irq();
	// Update the time structure

	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) {
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001fc2:	f7ff fbb7 	bl	8001734 <TIM_GetITStatus>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d033      	beq.n	8002034 <TIM2_IRQHandler+0x80>
		if (++sw_time.hundredths == 100) {
 8001fcc:	4b1f      	ldr	r3, [pc, #124]	; (800204c <TIM2_IRQHandler+0x98>)
 8001fce:	78db      	ldrb	r3, [r3, #3]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	4a1d      	ldr	r2, [pc, #116]	; (800204c <TIM2_IRQHandler+0x98>)
 8001fd8:	4619      	mov	r1, r3
 8001fda:	70d1      	strb	r1, [r2, #3]
 8001fdc:	2b64      	cmp	r3, #100	; 0x64
 8001fde:	d129      	bne.n	8002034 <TIM2_IRQHandler+0x80>
			sw_time.hundredths = 0;
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <TIM2_IRQHandler+0x98>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	70da      	strb	r2, [r3, #3]

			if (++sw_time.seconds == 60) {
 8001fe6:	4b19      	ldr	r3, [pc, #100]	; (800204c <TIM2_IRQHandler+0x98>)
 8001fe8:	789b      	ldrb	r3, [r3, #2]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	3301      	adds	r3, #1
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	4a16      	ldr	r2, [pc, #88]	; (800204c <TIM2_IRQHandler+0x98>)
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	7091      	strb	r1, [r2, #2]
 8001ff6:	2b3c      	cmp	r3, #60	; 0x3c
 8001ff8:	d11c      	bne.n	8002034 <TIM2_IRQHandler+0x80>
				sw_time.seconds = 0;
 8001ffa:	4b14      	ldr	r3, [pc, #80]	; (800204c <TIM2_IRQHandler+0x98>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	709a      	strb	r2, [r3, #2]

				if (++sw_time.minutes == 60) {
 8002000:	4b12      	ldr	r3, [pc, #72]	; (800204c <TIM2_IRQHandler+0x98>)
 8002002:	785b      	ldrb	r3, [r3, #1]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	3301      	adds	r3, #1
 8002008:	b2db      	uxtb	r3, r3
 800200a:	4a10      	ldr	r2, [pc, #64]	; (800204c <TIM2_IRQHandler+0x98>)
 800200c:	4619      	mov	r1, r3
 800200e:	7051      	strb	r1, [r2, #1]
 8002010:	2b3c      	cmp	r3, #60	; 0x3c
 8002012:	d10f      	bne.n	8002034 <TIM2_IRQHandler+0x80>
					sw_time.minutes = 0;
 8002014:	4b0d      	ldr	r3, [pc, #52]	; (800204c <TIM2_IRQHandler+0x98>)
 8002016:	2200      	movs	r2, #0
 8002018:	705a      	strb	r2, [r3, #1]

					if (++sw_time.hours == 100) {
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <TIM2_IRQHandler+0x98>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	3301      	adds	r3, #1
 8002022:	b2db      	uxtb	r3, r3
 8002024:	4a09      	ldr	r2, [pc, #36]	; (800204c <TIM2_IRQHandler+0x98>)
 8002026:	4619      	mov	r1, r3
 8002028:	7011      	strb	r1, [r2, #0]
 800202a:	2b64      	cmp	r3, #100	; 0x64
 800202c:	d102      	bne.n	8002034 <TIM2_IRQHandler+0x80>
						sw_time.hours = 0;
 800202e:	4b07      	ldr	r3, [pc, #28]	; (800204c <TIM2_IRQHandler+0x98>)
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	// Clear the interrupt flag
	TIM2->SR &= ~TIM_SR_UIF;
 8002034:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800203e:	f023 0301 	bic.w	r3, r3, #1
 8002042:	6113      	str	r3, [r2, #16]
  __ASM volatile ("cpsie i");
 8002044:	b662      	cpsie	i
}
 8002046:	bf00      	nop

	__enable_irq();
}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}
 800204c:	2000031c 	.word	0x2000031c

08002050 <lcd_transmit_byte>:
#include "charset.h"

/*****************************/
/*** LCD Control Functions ***/
/*****************************/
void lcd_transmit_byte(uint8_t data) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
    GPIOB->ODR &= ~(0x0001 << 6); // CS = 0 - Start Transmission
 800205a:	4b14      	ldr	r3, [pc, #80]	; (80020ac <lcd_transmit_byte+0x5c>)
 800205c:	8a9b      	ldrh	r3, [r3, #20]
 800205e:	b29b      	uxth	r3, r3
 8002060:	4a12      	ldr	r2, [pc, #72]	; (80020ac <lcd_transmit_byte+0x5c>)
 8002062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002066:	b29b      	uxth	r3, r3
 8002068:	8293      	strh	r3, [r2, #20]
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 800206a:	bf00      	nop
 800206c:	2102      	movs	r1, #2
 800206e:	4810      	ldr	r0, [pc, #64]	; (80020b0 <lcd_transmit_byte+0x60>)
 8002070:	f7ff fae2 	bl	8001638 <SPI_I2S_GetFlagStatus>
 8002074:	4603      	mov	r3, r0
 8002076:	2b01      	cmp	r3, #1
 8002078:	d1f8      	bne.n	800206c <lcd_transmit_byte+0x1c>
    SPI_SendData8(SPI2, data);
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	4619      	mov	r1, r3
 800207e:	480c      	ldr	r0, [pc, #48]	; (80020b0 <lcd_transmit_byte+0x60>)
 8002080:	f7ff fac4 	bl	800160c <SPI_SendData8>
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 8002084:	bf00      	nop
 8002086:	2102      	movs	r1, #2
 8002088:	4809      	ldr	r0, [pc, #36]	; (80020b0 <lcd_transmit_byte+0x60>)
 800208a:	f7ff fad5 	bl	8001638 <SPI_I2S_GetFlagStatus>
 800208e:	4603      	mov	r3, r0
 8002090:	2b01      	cmp	r3, #1
 8002092:	d1f8      	bne.n	8002086 <lcd_transmit_byte+0x36>
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - End Transmission
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <lcd_transmit_byte+0x5c>)
 8002096:	8a9b      	ldrh	r3, [r3, #20]
 8002098:	b29b      	uxth	r3, r3
 800209a:	4a04      	ldr	r2, [pc, #16]	; (80020ac <lcd_transmit_byte+0x5c>)
 800209c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	8293      	strh	r3, [r2, #20]
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	48000400 	.word	0x48000400
 80020b0:	40003800 	.word	0x40003800

080020b4 <lcd_push_buffer>:

void lcd_push_buffer(uint8_t* buffer)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
    int i = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]

    //page 0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 80020c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80020c4:	8a9b      	ldrh	r3, [r3, #20]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80020cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 80020d4:	2000      	movs	r0, #0
 80020d6:	f7ff ffbb 	bl	8002050 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 80020da:	2010      	movs	r0, #16
 80020dc:	f7ff ffb8 	bl	8002050 <lcd_transmit_byte>
    lcd_transmit_byte(0xB0);      // set page address  0
 80020e0:	20b0      	movs	r0, #176	; 0xb0
 80020e2:	f7ff ffb5 	bl	8002050 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 80020e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80020ea:	8a9b      	ldrh	r3, [r3, #20]
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80020f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	8293      	strh	r3, [r2, #20]
    for(i=0; i<128; i++) {
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	e009      	b.n	8002114 <lcd_push_buffer+0x60>
       lcd_transmit_byte(buffer[i]);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ffa1 	bl	8002050 <lcd_transmit_byte>
    for(i=0; i<128; i++) {
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3301      	adds	r3, #1
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2b7f      	cmp	r3, #127	; 0x7f
 8002118:	ddf2      	ble.n	8002100 <lcd_push_buffer+0x4c>
    }

    // page 1
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 800211a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800211e:	8a9b      	ldrh	r3, [r3, #20]
 8002120:	b29b      	uxth	r3, r3
 8002122:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002126:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800212a:	b29b      	uxth	r3, r3
 800212c:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 800212e:	2000      	movs	r0, #0
 8002130:	f7ff ff8e 	bl	8002050 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8002134:	2010      	movs	r0, #16
 8002136:	f7ff ff8b 	bl	8002050 <lcd_transmit_byte>
    lcd_transmit_byte(0xB1);      // set page address  1
 800213a:	20b1      	movs	r0, #177	; 0xb1
 800213c:	f7ff ff88 	bl	8002050 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8002140:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002144:	8a9b      	ldrh	r3, [r3, #20]
 8002146:	b29b      	uxth	r3, r3
 8002148:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800214c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002150:	b29b      	uxth	r3, r3
 8002152:	8293      	strh	r3, [r2, #20]
    for( i = 128 ; i < 256 ; i++ ) {
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	e009      	b.n	800216e <lcd_push_buffer+0xba>
       lcd_transmit_byte(buffer[i]);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	4413      	add	r3, r2
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff ff74 	bl	8002050 <lcd_transmit_byte>
    for( i = 128 ; i < 256 ; i++ ) {
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	3301      	adds	r3, #1
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2bff      	cmp	r3, #255	; 0xff
 8002172:	ddf2      	ble.n	800215a <lcd_push_buffer+0xa6>
    }

    //page 2
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8002174:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002178:	8a9b      	ldrh	r3, [r3, #20]
 800217a:	b29b      	uxth	r3, r3
 800217c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002184:	b29b      	uxth	r3, r3
 8002186:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8002188:	2000      	movs	r0, #0
 800218a:	f7ff ff61 	bl	8002050 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 800218e:	2010      	movs	r0, #16
 8002190:	f7ff ff5e 	bl	8002050 <lcd_transmit_byte>
    lcd_transmit_byte(0xB2);      // set page address  2
 8002194:	20b2      	movs	r0, #178	; 0xb2
 8002196:	f7ff ff5b 	bl	8002050 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 800219a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800219e:	8a9b      	ldrh	r3, [r3, #20]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80021a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	8293      	strh	r3, [r2, #20]
    for(i=256; i<384; i++) {
 80021ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	e009      	b.n	80021ca <lcd_push_buffer+0x116>
       lcd_transmit_byte(buffer[i]);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	4413      	add	r3, r2
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff ff46 	bl	8002050 <lcd_transmit_byte>
    for(i=256; i<384; i++) {
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	3301      	adds	r3, #1
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80021d0:	dbf1      	blt.n	80021b6 <lcd_push_buffer+0x102>
    }

    //page 3
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 80021d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80021d6:	8a9b      	ldrh	r3, [r3, #20]
 80021d8:	b29b      	uxth	r3, r3
 80021da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80021de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 80021e6:	2000      	movs	r0, #0
 80021e8:	f7ff ff32 	bl	8002050 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 80021ec:	2010      	movs	r0, #16
 80021ee:	f7ff ff2f 	bl	8002050 <lcd_transmit_byte>
    lcd_transmit_byte(0xB3);      // set page address  3
 80021f2:	20b3      	movs	r0, #179	; 0xb3
 80021f4:	f7ff ff2c 	bl	8002050 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 80021f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80021fc:	8a9b      	ldrh	r3, [r3, #20]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002208:	b29b      	uxth	r3, r3
 800220a:	8293      	strh	r3, [r2, #20]
    for(i=384; i<512; i++) {
 800220c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	e009      	b.n	8002228 <lcd_push_buffer+0x174>
       lcd_transmit_byte(buffer[i]);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff17 	bl	8002050 <lcd_transmit_byte>
    for(i=384; i<512; i++) {
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	3301      	adds	r3, #1
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800222e:	dbf1      	blt.n	8002214 <lcd_push_buffer+0x160>
    }
}
 8002230:	bf00      	nop
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <lcd_reset>:

void lcd_reset()
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Reset Command/Data
 8002242:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002246:	8a9b      	ldrh	r3, [r3, #20]
 8002248:	b29b      	uxth	r3, r3
 800224a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800224e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002252:	b29b      	uxth	r3, r3
 8002254:	8293      	strh	r3, [r2, #20]
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - Reset C/S
 8002256:	4b2f      	ldr	r3, [pc, #188]	; (8002314 <lcd_reset+0xd8>)
 8002258:	8a9b      	ldrh	r3, [r3, #20]
 800225a:	b29b      	uxth	r3, r3
 800225c:	4a2d      	ldr	r2, [pc, #180]	; (8002314 <lcd_reset+0xd8>)
 800225e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002262:	b29b      	uxth	r3, r3
 8002264:	8293      	strh	r3, [r2, #20]

    GPIOB->ODR &= ~(0x0001 << 14); // RESET = 0 - Reset Display
 8002266:	4b2b      	ldr	r3, [pc, #172]	; (8002314 <lcd_reset+0xd8>)
 8002268:	8a9b      	ldrh	r3, [r3, #20]
 800226a:	b29b      	uxth	r3, r3
 800226c:	4a29      	ldr	r2, [pc, #164]	; (8002314 <lcd_reset+0xd8>)
 800226e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002272:	b29b      	uxth	r3, r3
 8002274:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 4680 ; i++) { asm("nop"); }; // Wait
 8002276:	2300      	movs	r3, #0
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	e003      	b.n	8002284 <lcd_reset+0x48>
 800227c:	bf00      	nop
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3301      	adds	r3, #1
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f241 2247 	movw	r2, #4679	; 0x1247
 800228a:	4293      	cmp	r3, r2
 800228c:	d9f6      	bls.n	800227c <lcd_reset+0x40>
    GPIOB->ODR |=  (0x0001 << 14); // RESET = 1 - Stop Reset
 800228e:	4b21      	ldr	r3, [pc, #132]	; (8002314 <lcd_reset+0xd8>)
 8002290:	8a9b      	ldrh	r3, [r3, #20]
 8002292:	b29b      	uxth	r3, r3
 8002294:	4a1f      	ldr	r2, [pc, #124]	; (8002314 <lcd_reset+0xd8>)
 8002296:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800229a:	b29b      	uxth	r3, r3
 800229c:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 390000 ; i++) { asm("nop"); }; // Wait
 800229e:	2300      	movs	r3, #0
 80022a0:	603b      	str	r3, [r7, #0]
 80022a2:	e003      	b.n	80022ac <lcd_reset+0x70>
 80022a4:	bf00      	nop
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	3301      	adds	r3, #1
 80022aa:	603b      	str	r3, [r7, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	4a1a      	ldr	r2, [pc, #104]	; (8002318 <lcd_reset+0xdc>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d9f7      	bls.n	80022a4 <lcd_reset+0x68>

    // Configure Display
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 80022b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80022b8:	8a9b      	ldrh	r3, [r3, #20]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80022c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	8293      	strh	r3, [r2, #20]

    lcd_transmit_byte(0xAE);  // Turn off display
 80022c8:	20ae      	movs	r0, #174	; 0xae
 80022ca:	f7ff fec1 	bl	8002050 <lcd_transmit_byte>
    lcd_transmit_byte(0xA2);  // Set bias voltage to 1/9
 80022ce:	20a2      	movs	r0, #162	; 0xa2
 80022d0:	f7ff febe 	bl	8002050 <lcd_transmit_byte>

    lcd_transmit_byte(0xA0);  // Set display RAM address normal
 80022d4:	20a0      	movs	r0, #160	; 0xa0
 80022d6:	f7ff febb 	bl	8002050 <lcd_transmit_byte>
    lcd_transmit_byte(0xC8);  // Set update direction
 80022da:	20c8      	movs	r0, #200	; 0xc8
 80022dc:	f7ff feb8 	bl	8002050 <lcd_transmit_byte>

    lcd_transmit_byte(0x22);  // Set internal resistor ratio
 80022e0:	2022      	movs	r0, #34	; 0x22
 80022e2:	f7ff feb5 	bl	8002050 <lcd_transmit_byte>
    lcd_transmit_byte(0x2F);  // Set operating mode
 80022e6:	202f      	movs	r0, #47	; 0x2f
 80022e8:	f7ff feb2 	bl	8002050 <lcd_transmit_byte>
    lcd_transmit_byte(0x40);  // Set start line address
 80022ec:	2040      	movs	r0, #64	; 0x40
 80022ee:	f7ff feaf 	bl	8002050 <lcd_transmit_byte>

    lcd_transmit_byte(0xAF);  // Turn on display
 80022f2:	20af      	movs	r0, #175	; 0xaf
 80022f4:	f7ff feac 	bl	8002050 <lcd_transmit_byte>

    lcd_transmit_byte(0x81);  // Set output voltage
 80022f8:	2081      	movs	r0, #129	; 0x81
 80022fa:	f7ff fea9 	bl	8002050 <lcd_transmit_byte>
    lcd_transmit_byte(0x17);  // Set contrast
 80022fe:	2017      	movs	r0, #23
 8002300:	f7ff fea6 	bl	8002050 <lcd_transmit_byte>

    lcd_transmit_byte(0xA6);  // Set normal mode
 8002304:	20a6      	movs	r0, #166	; 0xa6
 8002306:	f7ff fea3 	bl	8002050 <lcd_transmit_byte>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	48000400 	.word	0x48000400
 8002318:	0005f36f 	.word	0x0005f36f

0800231c <init_spi_lcd>:

void init_spi_lcd() {
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
    // Enable Clocks
    RCC->AHBENR  |= 0x00020000 | 0x00040000;    // Enable Clock for GPIO Banks A and B
 8002320:	4b9d      	ldr	r3, [pc, #628]	; (8002598 <init_spi_lcd+0x27c>)
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	4a9c      	ldr	r2, [pc, #624]	; (8002598 <init_spi_lcd+0x27c>)
 8002326:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 800232a:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= 0x00004000;                 // Enable Clock for SPI2
 800232c:	4b9a      	ldr	r3, [pc, #616]	; (8002598 <init_spi_lcd+0x27c>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	4a99      	ldr	r2, [pc, #612]	; (8002598 <init_spi_lcd+0x27c>)
 8002332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002336:	61d3      	str	r3, [r2, #28]

    // Connect pins to SPI2
    GPIOB->AFR[13 >> 0x03] &= ~(0x0000000F << ((13 & 0x00000007) * 4)); // Clear alternate function for PB13
 8002338:	4b98      	ldr	r3, [pc, #608]	; (800259c <init_spi_lcd+0x280>)
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	4a97      	ldr	r2, [pc, #604]	; (800259c <init_spi_lcd+0x280>)
 800233e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002342:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[13 >> 0x03] |=  (0x00000005 << ((13 & 0x00000007) * 4)); // Set alternate 5 function for PB13 - SCLK
 8002344:	4b95      	ldr	r3, [pc, #596]	; (800259c <init_spi_lcd+0x280>)
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	4a94      	ldr	r2, [pc, #592]	; (800259c <init_spi_lcd+0x280>)
 800234a:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800234e:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[15 >> 0x03] &= ~(0x0000000F << ((15 & 0x00000007) * 4)); // Clear alternate function for PB15
 8002350:	4b92      	ldr	r3, [pc, #584]	; (800259c <init_spi_lcd+0x280>)
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	4a91      	ldr	r2, [pc, #580]	; (800259c <init_spi_lcd+0x280>)
 8002356:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800235a:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[15 >> 0x03] |=  (0x00000005 << ((15 & 0x00000007) * 4)); // Set alternate 5 function for PB15 - MOSI
 800235c:	4b8f      	ldr	r3, [pc, #572]	; (800259c <init_spi_lcd+0x280>)
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	4a8e      	ldr	r2, [pc, #568]	; (800259c <init_spi_lcd+0x280>)
 8002362:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8002366:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB13 and PB15 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear speed register
 8002368:	4b8c      	ldr	r3, [pc, #560]	; (800259c <init_spi_lcd+0x280>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	4a8b      	ldr	r2, [pc, #556]	; (800259c <init_spi_lcd+0x280>)
 800236e:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 8002372:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (13 * 2) | 0x00000001 << (15 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8002374:	4b89      	ldr	r3, [pc, #548]	; (800259c <init_spi_lcd+0x280>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	4a88      	ldr	r2, [pc, #544]	; (800259c <init_spi_lcd+0x280>)
 800237a:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 800237e:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (13)     | 0x0001     << (15));        // Clear output type register
 8002380:	4b86      	ldr	r3, [pc, #536]	; (800259c <init_spi_lcd+0x280>)
 8002382:	889b      	ldrh	r3, [r3, #4]
 8002384:	b29a      	uxth	r2, r3
 8002386:	4985      	ldr	r1, [pc, #532]	; (800259c <init_spi_lcd+0x280>)
 8002388:	f645 73ff 	movw	r3, #24575	; 0x5fff
 800238c:	4013      	ands	r3, r2
 800238e:	b29b      	uxth	r3, r3
 8002390:	808b      	strh	r3, [r1, #4]
    GPIOB->OTYPER  |=  (0x0000     << (13)     | 0x0000     << (15));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8002392:	4a82      	ldr	r2, [pc, #520]	; (800259c <init_spi_lcd+0x280>)
 8002394:	4b81      	ldr	r3, [pc, #516]	; (800259c <init_spi_lcd+0x280>)
 8002396:	8892      	ldrh	r2, [r2, #4]
 8002398:	b292      	uxth	r2, r2
 800239a:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear mode register
 800239c:	4b7f      	ldr	r3, [pc, #508]	; (800259c <init_spi_lcd+0x280>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a7e      	ldr	r2, [pc, #504]	; (800259c <init_spi_lcd+0x280>)
 80023a2:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 80023a6:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (13 * 2) | 0x00000002 << (15 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80023a8:	4b7c      	ldr	r3, [pc, #496]	; (800259c <init_spi_lcd+0x280>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a7b      	ldr	r2, [pc, #492]	; (800259c <init_spi_lcd+0x280>)
 80023ae:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 80023b2:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear push/pull register
 80023b4:	4b79      	ldr	r3, [pc, #484]	; (800259c <init_spi_lcd+0x280>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4a78      	ldr	r2, [pc, #480]	; (800259c <init_spi_lcd+0x280>)
 80023ba:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 80023be:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (13 * 2) | 0x00000000 << (15 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80023c0:	4b76      	ldr	r3, [pc, #472]	; (800259c <init_spi_lcd+0x280>)
 80023c2:	4a76      	ldr	r2, [pc, #472]	; (800259c <init_spi_lcd+0x280>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	60d3      	str	r3, [r2, #12]

    // Initialize REEST, nCS, and A0
    // Configure pins PB6 and PB14 for 10 MHz output
    GPIOB->OSPEEDR &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear speed register
 80023c8:	4b74      	ldr	r3, [pc, #464]	; (800259c <init_spi_lcd+0x280>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	4a73      	ldr	r2, [pc, #460]	; (800259c <init_spi_lcd+0x280>)
 80023ce:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 80023d2:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80023d4:	4b71      	ldr	r3, [pc, #452]	; (800259c <init_spi_lcd+0x280>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	4a70      	ldr	r2, [pc, #448]	; (800259c <init_spi_lcd+0x280>)
 80023da:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
 80023de:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (6)     | 0x0001     << (14));        // Clear output type register
 80023e0:	4b6e      	ldr	r3, [pc, #440]	; (800259c <init_spi_lcd+0x280>)
 80023e2:	889b      	ldrh	r3, [r3, #4]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	4a6d      	ldr	r2, [pc, #436]	; (800259c <init_spi_lcd+0x280>)
 80023e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0000     << (6)     | 0x0000     << (14));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80023f4:	4a69      	ldr	r2, [pc, #420]	; (800259c <init_spi_lcd+0x280>)
 80023f6:	4b69      	ldr	r3, [pc, #420]	; (800259c <init_spi_lcd+0x280>)
 80023f8:	8892      	ldrh	r2, [r2, #4]
 80023fa:	b292      	uxth	r2, r2
 80023fc:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear mode register
 80023fe:	4b67      	ldr	r3, [pc, #412]	; (800259c <init_spi_lcd+0x280>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a66      	ldr	r2, [pc, #408]	; (800259c <init_spi_lcd+0x280>)
 8002404:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 8002408:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 800240a:	4b64      	ldr	r3, [pc, #400]	; (800259c <init_spi_lcd+0x280>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a63      	ldr	r2, [pc, #396]	; (800259c <init_spi_lcd+0x280>)
 8002410:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
 8002414:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear push/pull register
 8002416:	4b61      	ldr	r3, [pc, #388]	; (800259c <init_spi_lcd+0x280>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	4a60      	ldr	r2, [pc, #384]	; (800259c <init_spi_lcd+0x280>)
 800241c:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 8002420:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (6 * 2) | 0x00000000 << (14 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8002422:	4b5e      	ldr	r3, [pc, #376]	; (800259c <init_spi_lcd+0x280>)
 8002424:	4a5d      	ldr	r2, [pc, #372]	; (800259c <init_spi_lcd+0x280>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	60d3      	str	r3, [r2, #12]
    // Configure pin PA8 for 10 MHz output
    GPIOA->OSPEEDR &= ~0x00000003 << (8 * 2);    // Clear speed register
 800242a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002434:	0c9b      	lsrs	r3, r3, #18
 8002436:	049b      	lsls	r3, r3, #18
 8002438:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  0x00000001 << (8 * 2);    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 800243a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002448:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~0x0001     << (8);        // Clear output type register
 800244a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800244e:	889b      	ldrh	r3, [r3, #4]
 8002450:	b29b      	uxth	r3, r3
 8002452:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002456:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800245a:	f023 0301 	bic.w	r3, r3, #1
 800245e:	b29b      	uxth	r3, r3
 8002460:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  0x0000     << (8);        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8002462:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002466:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800246a:	8892      	ldrh	r2, [r2, #4]
 800246c:	b292      	uxth	r2, r2
 800246e:	809a      	strh	r2, [r3, #4]


    GPIOA->MODER   &= ~0x00000003 << (8 * 2);    // Clear mode register
 8002470:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800247a:	0c9b      	lsrs	r3, r3, #18
 800247c:	049b      	lsls	r3, r3, #18
 800247e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  0x00000001 << (8 * 2);    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8002480:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800248a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248e:	6013      	str	r3, [r2, #0]

    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // This is needed for UART to work. It makes no sense.
 8002490:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800249a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800249e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));
 80024a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80024aa:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80024ae:	6013      	str	r3, [r2, #0]

    GPIOA->PUPDR   &= ~0x00000003 << (8 * 2);    // Clear push/pull register
 80024b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80024ba:	0c9b      	lsrs	r3, r3, #18
 80024bc:	049b      	lsls	r3, r3, #18
 80024be:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  0x00000000 << (8 * 2);    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80024c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024c4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	60d3      	str	r3, [r2, #12]

    GPIOB->ODR |=  (0x0001 << 6); // CS = 1
 80024cc:	4b33      	ldr	r3, [pc, #204]	; (800259c <init_spi_lcd+0x280>)
 80024ce:	8a9b      	ldrh	r3, [r3, #20]
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	4a32      	ldr	r2, [pc, #200]	; (800259c <init_spi_lcd+0x280>)
 80024d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024d8:	b29b      	uxth	r3, r3
 80024da:	8293      	strh	r3, [r2, #20]

    // Configure SPI2
    SPI2->CR1 &= 0x3040; // Clear CR1 Register
 80024dc:	4b30      	ldr	r3, [pc, #192]	; (80025a0 <init_spi_lcd+0x284>)
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	4a2f      	ldr	r2, [pc, #188]	; (80025a0 <init_spi_lcd+0x284>)
 80024e4:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Configure direction (0x0000 - 2 Lines Full Duplex, 0x0400 - 2 Lines RX Only, 0x8000 - 1 Line RX, 0xC000 - 1 Line TX)
 80024ec:	4a2c      	ldr	r2, [pc, #176]	; (80025a0 <init_spi_lcd+0x284>)
 80024ee:	4b2c      	ldr	r3, [pc, #176]	; (80025a0 <init_spi_lcd+0x284>)
 80024f0:	8812      	ldrh	r2, [r2, #0]
 80024f2:	b292      	uxth	r2, r2
 80024f4:	801a      	strh	r2, [r3, #0]
    SPI2->CR1 |= 0x0104; // Configure mode (0x0000 - Slave, 0x0104 - Master)
 80024f6:	4b2a      	ldr	r3, [pc, #168]	; (80025a0 <init_spi_lcd+0x284>)
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	4a28      	ldr	r2, [pc, #160]	; (80025a0 <init_spi_lcd+0x284>)
 80024fe:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 8002502:	b29b      	uxth	r3, r3
 8002504:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0002; // Configure clock polarity (0x0000 - Low, 0x0002 - High)
 8002506:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <init_spi_lcd+0x284>)
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	b29b      	uxth	r3, r3
 800250c:	4a24      	ldr	r2, [pc, #144]	; (80025a0 <init_spi_lcd+0x284>)
 800250e:	f043 0302 	orr.w	r3, r3, #2
 8002512:	b29b      	uxth	r3, r3
 8002514:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0001; // Configure clock phase (0x0000 - 1 Edge, 0x0001 - 2 Edge)
 8002516:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <init_spi_lcd+0x284>)
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	b29b      	uxth	r3, r3
 800251c:	4a20      	ldr	r2, [pc, #128]	; (80025a0 <init_spi_lcd+0x284>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	b29b      	uxth	r3, r3
 8002524:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0200; // Configure chip select (0x0000 - Hardware based, 0x0200 - Software based)
 8002526:	4b1e      	ldr	r3, [pc, #120]	; (80025a0 <init_spi_lcd+0x284>)
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	b29b      	uxth	r3, r3
 800252c:	4a1c      	ldr	r2, [pc, #112]	; (80025a0 <init_spi_lcd+0x284>)
 800252e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002532:	b29b      	uxth	r3, r3
 8002534:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0008; // Set Baud Rate Prescaler (0x0000 - 2, 0x0008 - 4, 0x0018 - 8, 0x0020 - 16, 0x0028 - 32, 0x0028 - 64, 0x0030 - 128, 0x0038 - 128)
 8002536:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <init_spi_lcd+0x284>)
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	b29b      	uxth	r3, r3
 800253c:	4a18      	ldr	r2, [pc, #96]	; (80025a0 <init_spi_lcd+0x284>)
 800253e:	f043 0308 	orr.w	r3, r3, #8
 8002542:	b29b      	uxth	r3, r3
 8002544:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Set Bit Order (0x0000 - MSB First, 0x0080 - LSB First)
 8002546:	4a16      	ldr	r2, [pc, #88]	; (80025a0 <init_spi_lcd+0x284>)
 8002548:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <init_spi_lcd+0x284>)
 800254a:	8812      	ldrh	r2, [r2, #0]
 800254c:	b292      	uxth	r2, r2
 800254e:	801a      	strh	r2, [r3, #0]
    SPI2->CR2 &= ~0x0F00; // Clear CR2 Register
 8002550:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <init_spi_lcd+0x284>)
 8002552:	889b      	ldrh	r3, [r3, #4]
 8002554:	b29b      	uxth	r3, r3
 8002556:	4a12      	ldr	r2, [pc, #72]	; (80025a0 <init_spi_lcd+0x284>)
 8002558:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800255c:	b29b      	uxth	r3, r3
 800255e:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x0700; // Set Number of Bits (0x0300 - 4, 0x0400 - 5, 0x0500 - 6, ...);
 8002560:	4b0f      	ldr	r3, [pc, #60]	; (80025a0 <init_spi_lcd+0x284>)
 8002562:	889b      	ldrh	r3, [r3, #4]
 8002564:	b29b      	uxth	r3, r3
 8002566:	4a0e      	ldr	r2, [pc, #56]	; (80025a0 <init_spi_lcd+0x284>)
 8002568:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800256c:	b29b      	uxth	r3, r3
 800256e:	8093      	strh	r3, [r2, #4]
    SPI2->I2SCFGR &= ~0x0800; // Disable I2S
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <init_spi_lcd+0x284>)
 8002572:	8b9b      	ldrh	r3, [r3, #28]
 8002574:	b29b      	uxth	r3, r3
 8002576:	4a0a      	ldr	r2, [pc, #40]	; (80025a0 <init_spi_lcd+0x284>)
 8002578:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800257c:	b29b      	uxth	r3, r3
 800257e:	8393      	strh	r3, [r2, #28]
    SPI2->CRCPR = 7; // Set CRC polynomial order
 8002580:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <init_spi_lcd+0x284>)
 8002582:	2207      	movs	r2, #7
 8002584:	821a      	strh	r2, [r3, #16]
    SPI2->CR2 &= ~0x1000;
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <init_spi_lcd+0x284>)
 8002588:	889b      	ldrh	r3, [r3, #4]
 800258a:	b29b      	uxth	r3, r3
 800258c:	4a04      	ldr	r2, [pc, #16]	; (80025a0 <init_spi_lcd+0x284>)
 800258e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002592:	b29b      	uxth	r3, r3
 8002594:	e006      	b.n	80025a4 <init_spi_lcd+0x288>
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000
 800259c:	48000400 	.word	0x48000400
 80025a0:	40003800 	.word	0x40003800
 80025a4:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x1000; // Configure RXFIFO return at (0x0000 - Half-full (16 bits), 0x1000 - Quarter-full (8 bits))
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <init_spi_lcd+0x2b4>)
 80025a8:	889b      	ldrh	r3, [r3, #4]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	4a08      	ldr	r2, [pc, #32]	; (80025d0 <init_spi_lcd+0x2b4>)
 80025ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	8093      	strh	r3, [r2, #4]
    SPI2->CR1 |= 0x0040; // Enable SPI2
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <init_spi_lcd+0x2b4>)
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	4a04      	ldr	r2, [pc, #16]	; (80025d0 <init_spi_lcd+0x2b4>)
 80025be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	8013      	strh	r3, [r2, #0]

    lcd_reset();
 80025c6:	f7ff fe39 	bl	800223c <lcd_reset>
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40003800 	.word	0x40003800

080025d4 <generate_line_buff>:

void generate_line_buff(uint8_t * str, uint8_t * linebuff, uint16_t bufflen){
 80025d4:	b480      	push	{r7}
 80025d6:	b087      	sub	sp, #28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	4613      	mov	r3, r2
 80025e0:	80fb      	strh	r3, [r7, #6]
    uint8_t idx;
    //convert each character to a 5+1 (CHAR_WIDTH) slices and add it to the line buffer
    for(int i = 0; i<bufflen; i++){
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	e06d      	b.n	80026c4 <generate_line_buff+0xf0>
        if (str[i] == '\0'){
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4413      	add	r3, r2
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d06c      	beq.n	80026ce <generate_line_buff+0xfa>
            break;
        }
        idx = CHAR_WIDTH*i;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	0052      	lsls	r2, r2, #1
 80025fc:	4413      	add	r3, r2
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	74fb      	strb	r3, [r7, #19]
        linebuff[idx] = character_data[str[i]-0x20][0];
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4413      	add	r3, r2
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	f1a3 0220 	sub.w	r2, r3, #32
 800260e:	7cfb      	ldrb	r3, [r7, #19]
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	4419      	add	r1, r3
 8002614:	4831      	ldr	r0, [pc, #196]	; (80026dc <generate_line_buff+0x108>)
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	4403      	add	r3, r0
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	700b      	strb	r3, [r1, #0]
        linebuff[idx+1] = character_data[str[i]-0x20][1];
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	4413      	add	r3, r2
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	f1a3 0220 	sub.w	r2, r3, #32
 800262e:	7cfb      	ldrb	r3, [r7, #19]
 8002630:	3301      	adds	r3, #1
 8002632:	68b9      	ldr	r1, [r7, #8]
 8002634:	4419      	add	r1, r3
 8002636:	4829      	ldr	r0, [pc, #164]	; (80026dc <generate_line_buff+0x108>)
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	4403      	add	r3, r0
 8002640:	3301      	adds	r3, #1
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	700b      	strb	r3, [r1, #0]
        linebuff[idx+2] = character_data[str[i]-0x20][2];
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	4413      	add	r3, r2
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	f1a3 0220 	sub.w	r2, r3, #32
 8002652:	7cfb      	ldrb	r3, [r7, #19]
 8002654:	3302      	adds	r3, #2
 8002656:	68b9      	ldr	r1, [r7, #8]
 8002658:	4419      	add	r1, r3
 800265a:	4820      	ldr	r0, [pc, #128]	; (80026dc <generate_line_buff+0x108>)
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	4403      	add	r3, r0
 8002664:	3302      	adds	r3, #2
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	700b      	strb	r3, [r1, #0]
        linebuff[idx+3] = character_data[str[i]-0x20][3];
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	4413      	add	r3, r2
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	f1a3 0220 	sub.w	r2, r3, #32
 8002676:	7cfb      	ldrb	r3, [r7, #19]
 8002678:	3303      	adds	r3, #3
 800267a:	68b9      	ldr	r1, [r7, #8]
 800267c:	4419      	add	r1, r3
 800267e:	4817      	ldr	r0, [pc, #92]	; (80026dc <generate_line_buff+0x108>)
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	4403      	add	r3, r0
 8002688:	3303      	adds	r3, #3
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	700b      	strb	r3, [r1, #0]
        linebuff[idx+4] = character_data[str[i]-0x20][4];
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4413      	add	r3, r2
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	f1a3 0220 	sub.w	r2, r3, #32
 800269a:	7cfb      	ldrb	r3, [r7, #19]
 800269c:	3304      	adds	r3, #4
 800269e:	68b9      	ldr	r1, [r7, #8]
 80026a0:	4419      	add	r1, r3
 80026a2:	480e      	ldr	r0, [pc, #56]	; (80026dc <generate_line_buff+0x108>)
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	4403      	add	r3, r0
 80026ac:	3304      	adds	r3, #4
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	700b      	strb	r3, [r1, #0]
        linebuff[idx+5] = 0x00;
 80026b2:	7cfb      	ldrb	r3, [r7, #19]
 80026b4:	3305      	adds	r3, #5
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	4413      	add	r3, r2
 80026ba:	2200      	movs	r2, #0
 80026bc:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i<bufflen; i++){
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	3301      	adds	r3, #1
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	88fb      	ldrh	r3, [r7, #6]
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	db8d      	blt.n	80025e8 <generate_line_buff+0x14>
    }
}
 80026cc:	e000      	b.n	80026d0 <generate_line_buff+0xfc>
            break;
 80026ce:	bf00      	nop
}
 80026d0:	bf00      	nop
 80026d2:	371c      	adds	r7, #28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	08005964 	.word	0x08005964

080026e0 <write_line_buff>:

void write_line_buff(uint8_t * linebuff, uint8_t * lcdbuff, uint8_t xoffset, uint8_t yoffset, uint8_t scrollena){
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	4611      	mov	r1, r2
 80026ec:	461a      	mov	r2, r3
 80026ee:	460b      	mov	r3, r1
 80026f0:	71fb      	strb	r3, [r7, #7]
 80026f2:	4613      	mov	r3, r2
 80026f4:	71bb      	strb	r3, [r7, #6]
    //  y offset refers to the line offset
    //note:     String will be capped, if it is longer than LCD_LINE_SIZE slices (i.e. 1 line)
    //note2:    String will be capped, if it exceeds size of lcdBuffer.
    //note3:    If scrolling is enabled, the LCD line will wrap around when xoffset is large enough.
    //          Otherwise, it will be capped.
    if (scrollena > 0){
 80026f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d019      	beq.n	8002732 <write_line_buff+0x52>
        for(uint8_t idx = 0; idx<LCD_LINE_SIZE; idx++){
 80026fe:	2300      	movs	r3, #0
 8002700:	75fb      	strb	r3, [r7, #23]
 8002702:	e011      	b.n	8002728 <write_line_buff+0x48>
            lcdbuff[idx+yoffset*LCD_LINE_SIZE] = linebuff[(idx + xoffset) & LCD_LINE_BUFF_SIZE-1];
 8002704:	7dfa      	ldrb	r2, [r7, #23]
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	4413      	add	r3, r2
 800270a:	b2db      	uxtb	r3, r3
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	441a      	add	r2, r3
 8002710:	7df9      	ldrb	r1, [r7, #23]
 8002712:	79bb      	ldrb	r3, [r7, #6]
 8002714:	01db      	lsls	r3, r3, #7
 8002716:	440b      	add	r3, r1
 8002718:	4619      	mov	r1, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	440b      	add	r3, r1
 800271e:	7812      	ldrb	r2, [r2, #0]
 8002720:	701a      	strb	r2, [r3, #0]
        for(uint8_t idx = 0; idx<LCD_LINE_SIZE; idx++){
 8002722:	7dfb      	ldrb	r3, [r7, #23]
 8002724:	3301      	adds	r3, #1
 8002726:	75fb      	strb	r3, [r7, #23]
 8002728:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800272c:	2b00      	cmp	r3, #0
 800272e:	dae9      	bge.n	8002704 <write_line_buff+0x24>
        }
    }else{
        memcpy(lcdbuff + xoffset+yoffset*LCD_LINE_SIZE, linebuff, sizeof(uint8_t) * LCD_LINE_SIZE-xoffset);
    }

}
 8002730:	e00c      	b.n	800274c <write_line_buff+0x6c>
        memcpy(lcdbuff + xoffset+yoffset*LCD_LINE_SIZE, linebuff, sizeof(uint8_t) * LCD_LINE_SIZE-xoffset);
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	79ba      	ldrb	r2, [r7, #6]
 8002736:	01d2      	lsls	r2, r2, #7
 8002738:	4413      	add	r3, r2
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	18d0      	adds	r0, r2, r3
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002744:	461a      	mov	r2, r3
 8002746:	68f9      	ldr	r1, [r7, #12]
 8002748:	f001 f86a 	bl	8003820 <memcpy>
}
 800274c:	bf00      	nop
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <lcd_write_string>:

void lcd_write_string(uint8_t * str, uint8_t * lcdBuff, uint8_t xoffset, uint8_t yoffset){
 8002754:	b590      	push	{r4, r7, lr}
 8002756:	b0c7      	sub	sp, #284	; 0x11c
 8002758:	af02      	add	r7, sp, #8
 800275a:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800275e:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8002762:	6020      	str	r0, [r4, #0]
 8002764:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8002768:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 800276c:	6001      	str	r1, [r0, #0]
 800276e:	4619      	mov	r1, r3
 8002770:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002774:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002778:	701a      	strb	r2, [r3, #0]
 800277a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800277e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002782:	460a      	mov	r2, r1
 8002784:	701a      	strb	r2, [r3, #0]
    uint8_t lineBuff[256];
    memset(lineBuff,0x00,256);
 8002786:	f107 0310 	add.w	r3, r7, #16
 800278a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800278e:	2100      	movs	r1, #0
 8002790:	4618      	mov	r0, r3
 8002792:	f000 ffd8 	bl	8003746 <memset>
    //render a string and add to the line buffer (256 slices long)
    generate_line_buff(str, lineBuff, 255);
 8002796:	f107 0110 	add.w	r1, r7, #16
 800279a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800279e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80027a2:	22ff      	movs	r2, #255	; 0xff
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	f7ff ff15 	bl	80025d4 <generate_line_buff>
    //add line buffer to LCD buffer at a specific x,y position
    //  (horizontal scrolling is always disabled!)
    write_line_buff(lineBuff, lcdBuff, xoffset, yoffset, 0);
 80027aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027ae:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80027b2:	781c      	ldrb	r4, [r3, #0]
 80027b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027b8:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80027bc:	781a      	ldrb	r2, [r3, #0]
 80027be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027c2:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 80027c6:	f107 0010 	add.w	r0, r7, #16
 80027ca:	2300      	movs	r3, #0
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	4623      	mov	r3, r4
 80027d0:	6809      	ldr	r1, [r1, #0]
 80027d2:	f7ff ff85 	bl	80026e0 <write_line_buff>
}
 80027d6:	bf00      	nop
 80027d8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd90      	pop	{r4, r7, pc}

080027e0 <init>:


extern bool LCD_flag;


void init(void) {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i");
 80027e4:	b672      	cpsid	i
}
 80027e6:	bf00      	nop

	__disable_irq(); //Disable global interrupts.

	uart_init(115200); // Initialize USB serial at 115200 baud
 80027e8:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80027ec:	f7ff f91e 	bl	8001a2c <uart_init>
	//initJoystick();
	//initLed();
	//setLed(off);
	init_Interrupt();
 80027f0:	f7ff fac3 	bl	8001d7a <init_Interrupt>
	//init_TIM2();
	//setup_TIM15();
	init_spi_lcd();
 80027f4:	f7ff fd92 	bl	800231c <init_spi_lcd>
  __ASM volatile ("cpsie i");
 80027f8:	b662      	cpsie	i
}
 80027fa:	bf00      	nop
	//ADC_setup_PA();
	//ADC_CAL();
	__enable_irq();	//Enable global interrupts.
}
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}

08002800 <main>:


int main(void) {
 8002800:	b580      	push	{r7, lr}
 8002802:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002806:	af00      	add	r7, sp, #0

	init();
 8002808:	f7ff ffea 	bl	80027e0 <init>
TIM_Cmd(TIM2, ENABLE);
 800280c:	2101      	movs	r1, #1
 800280e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002812:	f7fe ff6f 	bl	80016f4 <TIM_Cmd>
//					last_second = sw_time.seconds;
//				}

/* OPG 2.1  */
				uint8_t fbuffer[512];
				memset(fbuffer,0x0A,512); // Sets each element of the buffer to 0xAA
 8002816:	463b      	mov	r3, r7
 8002818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800281c:	210a      	movs	r1, #10
 800281e:	4618      	mov	r0, r3
 8002820:	f000 ff91 	bl	8003746 <memset>
			    //uint8_t fbuffer[512] = {0x7F, 0x31, 0x34, 0x3C, 0x34, 0x30, 0x78, 0x00};
			    lcd_push_buffer(fbuffer);
 8002824:	463b      	mov	r3, r7
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff fc44 	bl	80020b4 <lcd_push_buffer>
	while (1) {
 800282c:	e7f3      	b.n	8002816 <main+0x16>

0800282e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800282e:	b480      	push	{r7}
 8002830:	af00      	add	r7, sp, #0
	return 1;
 8002832:	2301      	movs	r3, #1
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <_kill>:

int _kill(int pid, int sig)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002848:	f000 ffbe 	bl	80037c8 <__errno>
 800284c:	4603      	mov	r3, r0
 800284e:	2216      	movs	r2, #22
 8002850:	601a      	str	r2, [r3, #0]
	return -1;
 8002852:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <_exit>:

void _exit (int status)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002866:	f04f 31ff 	mov.w	r1, #4294967295
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff ffe7 	bl	800283e <_kill>
	while (1) {}		/* Make sure we hang here */
 8002870:	e7fe      	b.n	8002870 <_exit+0x12>

08002872 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b086      	sub	sp, #24
 8002876:	af00      	add	r7, sp, #0
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	e00a      	b.n	800289a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002884:	f3af 8000 	nop.w
 8002888:	4601      	mov	r1, r0
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	60ba      	str	r2, [r7, #8]
 8002890:	b2ca      	uxtb	r2, r1
 8002892:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	3301      	adds	r3, #1
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	429a      	cmp	r2, r3
 80028a0:	dbf0      	blt.n	8002884 <_read+0x12>
	}

return len;
 80028a2:	687b      	ldr	r3, [r7, #4]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <_close>:
	}
	return len;
}

int _close(int file)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
	return -1;
 80028b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028d4:	605a      	str	r2, [r3, #4]
	return 0;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <_isatty>:

int _isatty(int file)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
	return 1;
 80028ec:	2301      	movs	r3, #1
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b085      	sub	sp, #20
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
	return 0;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800291c:	4b11      	ldr	r3, [pc, #68]	; (8002964 <_sbrk+0x50>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d102      	bne.n	800292a <_sbrk+0x16>
		heap_end = &end;
 8002924:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <_sbrk+0x50>)
 8002926:	4a10      	ldr	r2, [pc, #64]	; (8002968 <_sbrk+0x54>)
 8002928:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800292a:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <_sbrk+0x50>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002930:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <_sbrk+0x50>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4413      	add	r3, r2
 8002938:	466a      	mov	r2, sp
 800293a:	4293      	cmp	r3, r2
 800293c:	d907      	bls.n	800294e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800293e:	f000 ff43 	bl	80037c8 <__errno>
 8002942:	4603      	mov	r3, r0
 8002944:	220c      	movs	r2, #12
 8002946:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002948:	f04f 33ff 	mov.w	r3, #4294967295
 800294c:	e006      	b.n	800295c <_sbrk+0x48>
	}

	heap_end += incr;
 800294e:	4b05      	ldr	r3, [pc, #20]	; (8002964 <_sbrk+0x50>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	4a03      	ldr	r2, [pc, #12]	; (8002964 <_sbrk+0x50>)
 8002958:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800295a:	68fb      	ldr	r3, [r7, #12]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	20000324 	.word	0x20000324
 8002968:	20000478 	.word	0x20000478

0800296c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002970:	4b1f      	ldr	r3, [pc, #124]	; (80029f0 <SystemInit+0x84>)
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002976:	4a1e      	ldr	r2, [pc, #120]	; (80029f0 <SystemInit+0x84>)
 8002978:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800297c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002980:	4b1c      	ldr	r3, [pc, #112]	; (80029f4 <SystemInit+0x88>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a1b      	ldr	r2, [pc, #108]	; (80029f4 <SystemInit+0x88>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 800298c:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <SystemInit+0x88>)
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	4918      	ldr	r1, [pc, #96]	; (80029f4 <SystemInit+0x88>)
 8002992:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <SystemInit+0x8c>)
 8002994:	4013      	ands	r3, r2
 8002996:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002998:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <SystemInit+0x88>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a15      	ldr	r2, [pc, #84]	; (80029f4 <SystemInit+0x88>)
 800299e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80029a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80029a8:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <SystemInit+0x88>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a11      	ldr	r2, [pc, #68]	; (80029f4 <SystemInit+0x88>)
 80029ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80029b4:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <SystemInit+0x88>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	4a0e      	ldr	r2, [pc, #56]	; (80029f4 <SystemInit+0x88>)
 80029ba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80029be:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <SystemInit+0x88>)
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c4:	4a0b      	ldr	r2, [pc, #44]	; (80029f4 <SystemInit+0x88>)
 80029c6:	f023 030f 	bic.w	r3, r3, #15
 80029ca:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80029cc:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <SystemInit+0x88>)
 80029ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d0:	4908      	ldr	r1, [pc, #32]	; (80029f4 <SystemInit+0x88>)
 80029d2:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <SystemInit+0x90>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80029d8:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <SystemInit+0x88>)
 80029da:	2200      	movs	r2, #0
 80029dc:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80029de:	f000 f80f 	bl	8002a00 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80029e2:	4b03      	ldr	r3, [pc, #12]	; (80029f0 <SystemInit+0x84>)
 80029e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029e8:	609a      	str	r2, [r3, #8]
#endif  
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	e000ed00 	.word	0xe000ed00
 80029f4:	40021000 	.word	0x40021000
 80029f8:	f87fc00c 	.word	0xf87fc00c
 80029fc:	ff00fccc 	.word	0xff00fccc

08002a00 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8002a04:	4b21      	ldr	r3, [pc, #132]	; (8002a8c <SetSysClock+0x8c>)
 8002a06:	2212      	movs	r2, #18
 8002a08:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002a0a:	4b21      	ldr	r3, [pc, #132]	; (8002a90 <SetSysClock+0x90>)
 8002a0c:	4a20      	ldr	r2, [pc, #128]	; (8002a90 <SetSysClock+0x90>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002a12:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <SetSysClock+0x90>)
 8002a14:	4a1e      	ldr	r2, [pc, #120]	; (8002a90 <SetSysClock+0x90>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002a1a:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <SetSysClock+0x90>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4a1c      	ldr	r2, [pc, #112]	; (8002a90 <SetSysClock+0x90>)
 8002a20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a24:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8002a26:	4b1a      	ldr	r3, [pc, #104]	; (8002a90 <SetSysClock+0x90>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	4a19      	ldr	r2, [pc, #100]	; (8002a90 <SetSysClock+0x90>)
 8002a2c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002a30:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8002a32:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <SetSysClock+0x90>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	4a16      	ldr	r2, [pc, #88]	; (8002a90 <SetSysClock+0x90>)
 8002a38:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8002a3c:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8002a3e:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <SetSysClock+0x90>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a13      	ldr	r2, [pc, #76]	; (8002a90 <SetSysClock+0x90>)
 8002a44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a48:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002a4a:	bf00      	nop
 8002a4c:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <SetSysClock+0x90>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f9      	beq.n	8002a4c <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002a58:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <SetSysClock+0x90>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	4a0c      	ldr	r2, [pc, #48]	; (8002a90 <SetSysClock+0x90>)
 8002a5e:	f023 0303 	bic.w	r3, r3, #3
 8002a62:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8002a64:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <SetSysClock+0x90>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4a09      	ldr	r2, [pc, #36]	; (8002a90 <SetSysClock+0x90>)
 8002a6a:	f043 0302 	orr.w	r3, r3, #2
 8002a6e:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8002a70:	bf00      	nop
 8002a72:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <SetSysClock+0x90>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d1f9      	bne.n	8002a72 <SetSysClock+0x72>
  {
  }
}
 8002a7e:	bf00      	nop
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40022000 	.word	0x40022000
 8002a90:	40021000 	.word	0x40021000

08002a94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a94:	480d      	ldr	r0, [pc, #52]	; (8002acc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a96:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a98:	480d      	ldr	r0, [pc, #52]	; (8002ad0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a9a:	490e      	ldr	r1, [pc, #56]	; (8002ad4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a9c:	4a0e      	ldr	r2, [pc, #56]	; (8002ad8 <LoopForever+0xe>)
  movs r3, #0
 8002a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aa0:	e002      	b.n	8002aa8 <LoopCopyDataInit>

08002aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aa6:	3304      	adds	r3, #4

08002aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aac:	d3f9      	bcc.n	8002aa2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aae:	4a0b      	ldr	r2, [pc, #44]	; (8002adc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ab0:	4c0b      	ldr	r4, [pc, #44]	; (8002ae0 <LoopForever+0x16>)
  movs r3, #0
 8002ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ab4:	e001      	b.n	8002aba <LoopFillZerobss>

08002ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ab8:	3204      	adds	r2, #4

08002aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002abc:	d3fb      	bcc.n	8002ab6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002abe:	f7ff ff55 	bl	800296c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002ac2:	f000 fe87 	bl	80037d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ac6:	f7ff fe9b 	bl	8002800 <main>

08002aca <LoopForever>:

LoopForever:
    b LoopForever
 8002aca:	e7fe      	b.n	8002aca <LoopForever>
  ldr   r0, =_estack
 8002acc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ad4:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002ad8:	08005ebc 	.word	0x08005ebc
  ldr r2, =_sbss
 8002adc:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002ae0:	20000474 	.word	0x20000474

08002ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ae4:	e7fe      	b.n	8002ae4 <ADC1_2_IRQHandler>

08002ae6 <__cvt>:
 8002ae6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002aea:	ec55 4b10 	vmov	r4, r5, d0
 8002aee:	2d00      	cmp	r5, #0
 8002af0:	460e      	mov	r6, r1
 8002af2:	4619      	mov	r1, r3
 8002af4:	462b      	mov	r3, r5
 8002af6:	bfbb      	ittet	lt
 8002af8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002afc:	461d      	movlt	r5, r3
 8002afe:	2300      	movge	r3, #0
 8002b00:	232d      	movlt	r3, #45	; 0x2d
 8002b02:	700b      	strb	r3, [r1, #0]
 8002b04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002b06:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002b0a:	4691      	mov	r9, r2
 8002b0c:	f023 0820 	bic.w	r8, r3, #32
 8002b10:	bfbc      	itt	lt
 8002b12:	4622      	movlt	r2, r4
 8002b14:	4614      	movlt	r4, r2
 8002b16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002b1a:	d005      	beq.n	8002b28 <__cvt+0x42>
 8002b1c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002b20:	d100      	bne.n	8002b24 <__cvt+0x3e>
 8002b22:	3601      	adds	r6, #1
 8002b24:	2102      	movs	r1, #2
 8002b26:	e000      	b.n	8002b2a <__cvt+0x44>
 8002b28:	2103      	movs	r1, #3
 8002b2a:	ab03      	add	r3, sp, #12
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	ab02      	add	r3, sp, #8
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	ec45 4b10 	vmov	d0, r4, r5
 8002b36:	4653      	mov	r3, sl
 8002b38:	4632      	mov	r2, r6
 8002b3a:	f000 ff09 	bl	8003950 <_dtoa_r>
 8002b3e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002b42:	4607      	mov	r7, r0
 8002b44:	d102      	bne.n	8002b4c <__cvt+0x66>
 8002b46:	f019 0f01 	tst.w	r9, #1
 8002b4a:	d022      	beq.n	8002b92 <__cvt+0xac>
 8002b4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002b50:	eb07 0906 	add.w	r9, r7, r6
 8002b54:	d110      	bne.n	8002b78 <__cvt+0x92>
 8002b56:	783b      	ldrb	r3, [r7, #0]
 8002b58:	2b30      	cmp	r3, #48	; 0x30
 8002b5a:	d10a      	bne.n	8002b72 <__cvt+0x8c>
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2300      	movs	r3, #0
 8002b60:	4620      	mov	r0, r4
 8002b62:	4629      	mov	r1, r5
 8002b64:	f7fd ffb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8002b68:	b918      	cbnz	r0, 8002b72 <__cvt+0x8c>
 8002b6a:	f1c6 0601 	rsb	r6, r6, #1
 8002b6e:	f8ca 6000 	str.w	r6, [sl]
 8002b72:	f8da 3000 	ldr.w	r3, [sl]
 8002b76:	4499      	add	r9, r3
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	4629      	mov	r1, r5
 8002b80:	f7fd ffa2 	bl	8000ac8 <__aeabi_dcmpeq>
 8002b84:	b108      	cbz	r0, 8002b8a <__cvt+0xa4>
 8002b86:	f8cd 900c 	str.w	r9, [sp, #12]
 8002b8a:	2230      	movs	r2, #48	; 0x30
 8002b8c:	9b03      	ldr	r3, [sp, #12]
 8002b8e:	454b      	cmp	r3, r9
 8002b90:	d307      	bcc.n	8002ba2 <__cvt+0xbc>
 8002b92:	9b03      	ldr	r3, [sp, #12]
 8002b94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002b96:	1bdb      	subs	r3, r3, r7
 8002b98:	4638      	mov	r0, r7
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	b004      	add	sp, #16
 8002b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ba2:	1c59      	adds	r1, r3, #1
 8002ba4:	9103      	str	r1, [sp, #12]
 8002ba6:	701a      	strb	r2, [r3, #0]
 8002ba8:	e7f0      	b.n	8002b8c <__cvt+0xa6>

08002baa <__exponent>:
 8002baa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bac:	4603      	mov	r3, r0
 8002bae:	2900      	cmp	r1, #0
 8002bb0:	bfb8      	it	lt
 8002bb2:	4249      	neglt	r1, r1
 8002bb4:	f803 2b02 	strb.w	r2, [r3], #2
 8002bb8:	bfb4      	ite	lt
 8002bba:	222d      	movlt	r2, #45	; 0x2d
 8002bbc:	222b      	movge	r2, #43	; 0x2b
 8002bbe:	2909      	cmp	r1, #9
 8002bc0:	7042      	strb	r2, [r0, #1]
 8002bc2:	dd2a      	ble.n	8002c1a <__exponent+0x70>
 8002bc4:	f10d 0207 	add.w	r2, sp, #7
 8002bc8:	4617      	mov	r7, r2
 8002bca:	260a      	movs	r6, #10
 8002bcc:	4694      	mov	ip, r2
 8002bce:	fb91 f5f6 	sdiv	r5, r1, r6
 8002bd2:	fb06 1415 	mls	r4, r6, r5, r1
 8002bd6:	3430      	adds	r4, #48	; 0x30
 8002bd8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8002bdc:	460c      	mov	r4, r1
 8002bde:	2c63      	cmp	r4, #99	; 0x63
 8002be0:	f102 32ff 	add.w	r2, r2, #4294967295
 8002be4:	4629      	mov	r1, r5
 8002be6:	dcf1      	bgt.n	8002bcc <__exponent+0x22>
 8002be8:	3130      	adds	r1, #48	; 0x30
 8002bea:	f1ac 0402 	sub.w	r4, ip, #2
 8002bee:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002bf2:	1c41      	adds	r1, r0, #1
 8002bf4:	4622      	mov	r2, r4
 8002bf6:	42ba      	cmp	r2, r7
 8002bf8:	d30a      	bcc.n	8002c10 <__exponent+0x66>
 8002bfa:	f10d 0209 	add.w	r2, sp, #9
 8002bfe:	eba2 020c 	sub.w	r2, r2, ip
 8002c02:	42bc      	cmp	r4, r7
 8002c04:	bf88      	it	hi
 8002c06:	2200      	movhi	r2, #0
 8002c08:	4413      	add	r3, r2
 8002c0a:	1a18      	subs	r0, r3, r0
 8002c0c:	b003      	add	sp, #12
 8002c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c10:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002c14:	f801 5f01 	strb.w	r5, [r1, #1]!
 8002c18:	e7ed      	b.n	8002bf6 <__exponent+0x4c>
 8002c1a:	2330      	movs	r3, #48	; 0x30
 8002c1c:	3130      	adds	r1, #48	; 0x30
 8002c1e:	7083      	strb	r3, [r0, #2]
 8002c20:	70c1      	strb	r1, [r0, #3]
 8002c22:	1d03      	adds	r3, r0, #4
 8002c24:	e7f1      	b.n	8002c0a <__exponent+0x60>
	...

08002c28 <_printf_float>:
 8002c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c2c:	ed2d 8b02 	vpush	{d8}
 8002c30:	b08d      	sub	sp, #52	; 0x34
 8002c32:	460c      	mov	r4, r1
 8002c34:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002c38:	4616      	mov	r6, r2
 8002c3a:	461f      	mov	r7, r3
 8002c3c:	4605      	mov	r5, r0
 8002c3e:	f000 fd8b 	bl	8003758 <_localeconv_r>
 8002c42:	f8d0 a000 	ldr.w	sl, [r0]
 8002c46:	4650      	mov	r0, sl
 8002c48:	f7fd fb12 	bl	8000270 <strlen>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8002c50:	6823      	ldr	r3, [r4, #0]
 8002c52:	9305      	str	r3, [sp, #20]
 8002c54:	f8d8 3000 	ldr.w	r3, [r8]
 8002c58:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002c5c:	3307      	adds	r3, #7
 8002c5e:	f023 0307 	bic.w	r3, r3, #7
 8002c62:	f103 0208 	add.w	r2, r3, #8
 8002c66:	f8c8 2000 	str.w	r2, [r8]
 8002c6a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002c6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002c72:	9307      	str	r3, [sp, #28]
 8002c74:	f8cd 8018 	str.w	r8, [sp, #24]
 8002c78:	ee08 0a10 	vmov	s16, r0
 8002c7c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8002c80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002c84:	4b9e      	ldr	r3, [pc, #632]	; (8002f00 <_printf_float+0x2d8>)
 8002c86:	f04f 32ff 	mov.w	r2, #4294967295
 8002c8a:	f7fd ff4f 	bl	8000b2c <__aeabi_dcmpun>
 8002c8e:	bb88      	cbnz	r0, 8002cf4 <_printf_float+0xcc>
 8002c90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002c94:	4b9a      	ldr	r3, [pc, #616]	; (8002f00 <_printf_float+0x2d8>)
 8002c96:	f04f 32ff 	mov.w	r2, #4294967295
 8002c9a:	f7fd ff29 	bl	8000af0 <__aeabi_dcmple>
 8002c9e:	bb48      	cbnz	r0, 8002cf4 <_printf_float+0xcc>
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	4640      	mov	r0, r8
 8002ca6:	4649      	mov	r1, r9
 8002ca8:	f7fd ff18 	bl	8000adc <__aeabi_dcmplt>
 8002cac:	b110      	cbz	r0, 8002cb4 <_printf_float+0x8c>
 8002cae:	232d      	movs	r3, #45	; 0x2d
 8002cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cb4:	4a93      	ldr	r2, [pc, #588]	; (8002f04 <_printf_float+0x2dc>)
 8002cb6:	4b94      	ldr	r3, [pc, #592]	; (8002f08 <_printf_float+0x2e0>)
 8002cb8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002cbc:	bf94      	ite	ls
 8002cbe:	4690      	movls	r8, r2
 8002cc0:	4698      	movhi	r8, r3
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	6123      	str	r3, [r4, #16]
 8002cc6:	9b05      	ldr	r3, [sp, #20]
 8002cc8:	f023 0304 	bic.w	r3, r3, #4
 8002ccc:	6023      	str	r3, [r4, #0]
 8002cce:	f04f 0900 	mov.w	r9, #0
 8002cd2:	9700      	str	r7, [sp, #0]
 8002cd4:	4633      	mov	r3, r6
 8002cd6:	aa0b      	add	r2, sp, #44	; 0x2c
 8002cd8:	4621      	mov	r1, r4
 8002cda:	4628      	mov	r0, r5
 8002cdc:	f000 f9da 	bl	8003094 <_printf_common>
 8002ce0:	3001      	adds	r0, #1
 8002ce2:	f040 8090 	bne.w	8002e06 <_printf_float+0x1de>
 8002ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8002cea:	b00d      	add	sp, #52	; 0x34
 8002cec:	ecbd 8b02 	vpop	{d8}
 8002cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cf4:	4642      	mov	r2, r8
 8002cf6:	464b      	mov	r3, r9
 8002cf8:	4640      	mov	r0, r8
 8002cfa:	4649      	mov	r1, r9
 8002cfc:	f7fd ff16 	bl	8000b2c <__aeabi_dcmpun>
 8002d00:	b140      	cbz	r0, 8002d14 <_printf_float+0xec>
 8002d02:	464b      	mov	r3, r9
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	bfbc      	itt	lt
 8002d08:	232d      	movlt	r3, #45	; 0x2d
 8002d0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002d0e:	4a7f      	ldr	r2, [pc, #508]	; (8002f0c <_printf_float+0x2e4>)
 8002d10:	4b7f      	ldr	r3, [pc, #508]	; (8002f10 <_printf_float+0x2e8>)
 8002d12:	e7d1      	b.n	8002cb8 <_printf_float+0x90>
 8002d14:	6863      	ldr	r3, [r4, #4]
 8002d16:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002d1a:	9206      	str	r2, [sp, #24]
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	d13f      	bne.n	8002da0 <_printf_float+0x178>
 8002d20:	2306      	movs	r3, #6
 8002d22:	6063      	str	r3, [r4, #4]
 8002d24:	9b05      	ldr	r3, [sp, #20]
 8002d26:	6861      	ldr	r1, [r4, #4]
 8002d28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	9303      	str	r3, [sp, #12]
 8002d30:	ab0a      	add	r3, sp, #40	; 0x28
 8002d32:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002d36:	ab09      	add	r3, sp, #36	; 0x24
 8002d38:	ec49 8b10 	vmov	d0, r8, r9
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	6022      	str	r2, [r4, #0]
 8002d40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002d44:	4628      	mov	r0, r5
 8002d46:	f7ff fece 	bl	8002ae6 <__cvt>
 8002d4a:	9b06      	ldr	r3, [sp, #24]
 8002d4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002d4e:	2b47      	cmp	r3, #71	; 0x47
 8002d50:	4680      	mov	r8, r0
 8002d52:	d108      	bne.n	8002d66 <_printf_float+0x13e>
 8002d54:	1cc8      	adds	r0, r1, #3
 8002d56:	db02      	blt.n	8002d5e <_printf_float+0x136>
 8002d58:	6863      	ldr	r3, [r4, #4]
 8002d5a:	4299      	cmp	r1, r3
 8002d5c:	dd41      	ble.n	8002de2 <_printf_float+0x1ba>
 8002d5e:	f1ab 0302 	sub.w	r3, fp, #2
 8002d62:	fa5f fb83 	uxtb.w	fp, r3
 8002d66:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002d6a:	d820      	bhi.n	8002dae <_printf_float+0x186>
 8002d6c:	3901      	subs	r1, #1
 8002d6e:	465a      	mov	r2, fp
 8002d70:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002d74:	9109      	str	r1, [sp, #36]	; 0x24
 8002d76:	f7ff ff18 	bl	8002baa <__exponent>
 8002d7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d7c:	1813      	adds	r3, r2, r0
 8002d7e:	2a01      	cmp	r2, #1
 8002d80:	4681      	mov	r9, r0
 8002d82:	6123      	str	r3, [r4, #16]
 8002d84:	dc02      	bgt.n	8002d8c <_printf_float+0x164>
 8002d86:	6822      	ldr	r2, [r4, #0]
 8002d88:	07d2      	lsls	r2, r2, #31
 8002d8a:	d501      	bpl.n	8002d90 <_printf_float+0x168>
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	6123      	str	r3, [r4, #16]
 8002d90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d09c      	beq.n	8002cd2 <_printf_float+0xaa>
 8002d98:	232d      	movs	r3, #45	; 0x2d
 8002d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d9e:	e798      	b.n	8002cd2 <_printf_float+0xaa>
 8002da0:	9a06      	ldr	r2, [sp, #24]
 8002da2:	2a47      	cmp	r2, #71	; 0x47
 8002da4:	d1be      	bne.n	8002d24 <_printf_float+0xfc>
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1bc      	bne.n	8002d24 <_printf_float+0xfc>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e7b9      	b.n	8002d22 <_printf_float+0xfa>
 8002dae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002db2:	d118      	bne.n	8002de6 <_printf_float+0x1be>
 8002db4:	2900      	cmp	r1, #0
 8002db6:	6863      	ldr	r3, [r4, #4]
 8002db8:	dd0b      	ble.n	8002dd2 <_printf_float+0x1aa>
 8002dba:	6121      	str	r1, [r4, #16]
 8002dbc:	b913      	cbnz	r3, 8002dc4 <_printf_float+0x19c>
 8002dbe:	6822      	ldr	r2, [r4, #0]
 8002dc0:	07d0      	lsls	r0, r2, #31
 8002dc2:	d502      	bpl.n	8002dca <_printf_float+0x1a2>
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	440b      	add	r3, r1
 8002dc8:	6123      	str	r3, [r4, #16]
 8002dca:	65a1      	str	r1, [r4, #88]	; 0x58
 8002dcc:	f04f 0900 	mov.w	r9, #0
 8002dd0:	e7de      	b.n	8002d90 <_printf_float+0x168>
 8002dd2:	b913      	cbnz	r3, 8002dda <_printf_float+0x1b2>
 8002dd4:	6822      	ldr	r2, [r4, #0]
 8002dd6:	07d2      	lsls	r2, r2, #31
 8002dd8:	d501      	bpl.n	8002dde <_printf_float+0x1b6>
 8002dda:	3302      	adds	r3, #2
 8002ddc:	e7f4      	b.n	8002dc8 <_printf_float+0x1a0>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e7f2      	b.n	8002dc8 <_printf_float+0x1a0>
 8002de2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002de8:	4299      	cmp	r1, r3
 8002dea:	db05      	blt.n	8002df8 <_printf_float+0x1d0>
 8002dec:	6823      	ldr	r3, [r4, #0]
 8002dee:	6121      	str	r1, [r4, #16]
 8002df0:	07d8      	lsls	r0, r3, #31
 8002df2:	d5ea      	bpl.n	8002dca <_printf_float+0x1a2>
 8002df4:	1c4b      	adds	r3, r1, #1
 8002df6:	e7e7      	b.n	8002dc8 <_printf_float+0x1a0>
 8002df8:	2900      	cmp	r1, #0
 8002dfa:	bfd4      	ite	le
 8002dfc:	f1c1 0202 	rsble	r2, r1, #2
 8002e00:	2201      	movgt	r2, #1
 8002e02:	4413      	add	r3, r2
 8002e04:	e7e0      	b.n	8002dc8 <_printf_float+0x1a0>
 8002e06:	6823      	ldr	r3, [r4, #0]
 8002e08:	055a      	lsls	r2, r3, #21
 8002e0a:	d407      	bmi.n	8002e1c <_printf_float+0x1f4>
 8002e0c:	6923      	ldr	r3, [r4, #16]
 8002e0e:	4642      	mov	r2, r8
 8002e10:	4631      	mov	r1, r6
 8002e12:	4628      	mov	r0, r5
 8002e14:	47b8      	blx	r7
 8002e16:	3001      	adds	r0, #1
 8002e18:	d12c      	bne.n	8002e74 <_printf_float+0x24c>
 8002e1a:	e764      	b.n	8002ce6 <_printf_float+0xbe>
 8002e1c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002e20:	f240 80e0 	bls.w	8002fe4 <_printf_float+0x3bc>
 8002e24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f7fd fe4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8002e30:	2800      	cmp	r0, #0
 8002e32:	d034      	beq.n	8002e9e <_printf_float+0x276>
 8002e34:	4a37      	ldr	r2, [pc, #220]	; (8002f14 <_printf_float+0x2ec>)
 8002e36:	2301      	movs	r3, #1
 8002e38:	4631      	mov	r1, r6
 8002e3a:	4628      	mov	r0, r5
 8002e3c:	47b8      	blx	r7
 8002e3e:	3001      	adds	r0, #1
 8002e40:	f43f af51 	beq.w	8002ce6 <_printf_float+0xbe>
 8002e44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	db02      	blt.n	8002e52 <_printf_float+0x22a>
 8002e4c:	6823      	ldr	r3, [r4, #0]
 8002e4e:	07d8      	lsls	r0, r3, #31
 8002e50:	d510      	bpl.n	8002e74 <_printf_float+0x24c>
 8002e52:	ee18 3a10 	vmov	r3, s16
 8002e56:	4652      	mov	r2, sl
 8002e58:	4631      	mov	r1, r6
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	47b8      	blx	r7
 8002e5e:	3001      	adds	r0, #1
 8002e60:	f43f af41 	beq.w	8002ce6 <_printf_float+0xbe>
 8002e64:	f04f 0800 	mov.w	r8, #0
 8002e68:	f104 091a 	add.w	r9, r4, #26
 8002e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	4543      	cmp	r3, r8
 8002e72:	dc09      	bgt.n	8002e88 <_printf_float+0x260>
 8002e74:	6823      	ldr	r3, [r4, #0]
 8002e76:	079b      	lsls	r3, r3, #30
 8002e78:	f100 8107 	bmi.w	800308a <_printf_float+0x462>
 8002e7c:	68e0      	ldr	r0, [r4, #12]
 8002e7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e80:	4298      	cmp	r0, r3
 8002e82:	bfb8      	it	lt
 8002e84:	4618      	movlt	r0, r3
 8002e86:	e730      	b.n	8002cea <_printf_float+0xc2>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	464a      	mov	r2, r9
 8002e8c:	4631      	mov	r1, r6
 8002e8e:	4628      	mov	r0, r5
 8002e90:	47b8      	blx	r7
 8002e92:	3001      	adds	r0, #1
 8002e94:	f43f af27 	beq.w	8002ce6 <_printf_float+0xbe>
 8002e98:	f108 0801 	add.w	r8, r8, #1
 8002e9c:	e7e6      	b.n	8002e6c <_printf_float+0x244>
 8002e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	dc39      	bgt.n	8002f18 <_printf_float+0x2f0>
 8002ea4:	4a1b      	ldr	r2, [pc, #108]	; (8002f14 <_printf_float+0x2ec>)
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	4631      	mov	r1, r6
 8002eaa:	4628      	mov	r0, r5
 8002eac:	47b8      	blx	r7
 8002eae:	3001      	adds	r0, #1
 8002eb0:	f43f af19 	beq.w	8002ce6 <_printf_float+0xbe>
 8002eb4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	d102      	bne.n	8002ec2 <_printf_float+0x29a>
 8002ebc:	6823      	ldr	r3, [r4, #0]
 8002ebe:	07d9      	lsls	r1, r3, #31
 8002ec0:	d5d8      	bpl.n	8002e74 <_printf_float+0x24c>
 8002ec2:	ee18 3a10 	vmov	r3, s16
 8002ec6:	4652      	mov	r2, sl
 8002ec8:	4631      	mov	r1, r6
 8002eca:	4628      	mov	r0, r5
 8002ecc:	47b8      	blx	r7
 8002ece:	3001      	adds	r0, #1
 8002ed0:	f43f af09 	beq.w	8002ce6 <_printf_float+0xbe>
 8002ed4:	f04f 0900 	mov.w	r9, #0
 8002ed8:	f104 0a1a 	add.w	sl, r4, #26
 8002edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ede:	425b      	negs	r3, r3
 8002ee0:	454b      	cmp	r3, r9
 8002ee2:	dc01      	bgt.n	8002ee8 <_printf_float+0x2c0>
 8002ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ee6:	e792      	b.n	8002e0e <_printf_float+0x1e6>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	4652      	mov	r2, sl
 8002eec:	4631      	mov	r1, r6
 8002eee:	4628      	mov	r0, r5
 8002ef0:	47b8      	blx	r7
 8002ef2:	3001      	adds	r0, #1
 8002ef4:	f43f aef7 	beq.w	8002ce6 <_printf_float+0xbe>
 8002ef8:	f109 0901 	add.w	r9, r9, #1
 8002efc:	e7ee      	b.n	8002edc <_printf_float+0x2b4>
 8002efe:	bf00      	nop
 8002f00:	7fefffff 	.word	0x7fefffff
 8002f04:	08005b3f 	.word	0x08005b3f
 8002f08:	08005b43 	.word	0x08005b43
 8002f0c:	08005b47 	.word	0x08005b47
 8002f10:	08005b4b 	.word	0x08005b4b
 8002f14:	08005b4f 	.word	0x08005b4f
 8002f18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	bfa8      	it	ge
 8002f20:	461a      	movge	r2, r3
 8002f22:	2a00      	cmp	r2, #0
 8002f24:	4691      	mov	r9, r2
 8002f26:	dc37      	bgt.n	8002f98 <_printf_float+0x370>
 8002f28:	f04f 0b00 	mov.w	fp, #0
 8002f2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f30:	f104 021a 	add.w	r2, r4, #26
 8002f34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f36:	9305      	str	r3, [sp, #20]
 8002f38:	eba3 0309 	sub.w	r3, r3, r9
 8002f3c:	455b      	cmp	r3, fp
 8002f3e:	dc33      	bgt.n	8002fa8 <_printf_float+0x380>
 8002f40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f44:	429a      	cmp	r2, r3
 8002f46:	db3b      	blt.n	8002fc0 <_printf_float+0x398>
 8002f48:	6823      	ldr	r3, [r4, #0]
 8002f4a:	07da      	lsls	r2, r3, #31
 8002f4c:	d438      	bmi.n	8002fc0 <_printf_float+0x398>
 8002f4e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002f52:	eba2 0903 	sub.w	r9, r2, r3
 8002f56:	9b05      	ldr	r3, [sp, #20]
 8002f58:	1ad2      	subs	r2, r2, r3
 8002f5a:	4591      	cmp	r9, r2
 8002f5c:	bfa8      	it	ge
 8002f5e:	4691      	movge	r9, r2
 8002f60:	f1b9 0f00 	cmp.w	r9, #0
 8002f64:	dc35      	bgt.n	8002fd2 <_printf_float+0x3aa>
 8002f66:	f04f 0800 	mov.w	r8, #0
 8002f6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f6e:	f104 0a1a 	add.w	sl, r4, #26
 8002f72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f76:	1a9b      	subs	r3, r3, r2
 8002f78:	eba3 0309 	sub.w	r3, r3, r9
 8002f7c:	4543      	cmp	r3, r8
 8002f7e:	f77f af79 	ble.w	8002e74 <_printf_float+0x24c>
 8002f82:	2301      	movs	r3, #1
 8002f84:	4652      	mov	r2, sl
 8002f86:	4631      	mov	r1, r6
 8002f88:	4628      	mov	r0, r5
 8002f8a:	47b8      	blx	r7
 8002f8c:	3001      	adds	r0, #1
 8002f8e:	f43f aeaa 	beq.w	8002ce6 <_printf_float+0xbe>
 8002f92:	f108 0801 	add.w	r8, r8, #1
 8002f96:	e7ec      	b.n	8002f72 <_printf_float+0x34a>
 8002f98:	4613      	mov	r3, r2
 8002f9a:	4631      	mov	r1, r6
 8002f9c:	4642      	mov	r2, r8
 8002f9e:	4628      	mov	r0, r5
 8002fa0:	47b8      	blx	r7
 8002fa2:	3001      	adds	r0, #1
 8002fa4:	d1c0      	bne.n	8002f28 <_printf_float+0x300>
 8002fa6:	e69e      	b.n	8002ce6 <_printf_float+0xbe>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	4631      	mov	r1, r6
 8002fac:	4628      	mov	r0, r5
 8002fae:	9205      	str	r2, [sp, #20]
 8002fb0:	47b8      	blx	r7
 8002fb2:	3001      	adds	r0, #1
 8002fb4:	f43f ae97 	beq.w	8002ce6 <_printf_float+0xbe>
 8002fb8:	9a05      	ldr	r2, [sp, #20]
 8002fba:	f10b 0b01 	add.w	fp, fp, #1
 8002fbe:	e7b9      	b.n	8002f34 <_printf_float+0x30c>
 8002fc0:	ee18 3a10 	vmov	r3, s16
 8002fc4:	4652      	mov	r2, sl
 8002fc6:	4631      	mov	r1, r6
 8002fc8:	4628      	mov	r0, r5
 8002fca:	47b8      	blx	r7
 8002fcc:	3001      	adds	r0, #1
 8002fce:	d1be      	bne.n	8002f4e <_printf_float+0x326>
 8002fd0:	e689      	b.n	8002ce6 <_printf_float+0xbe>
 8002fd2:	9a05      	ldr	r2, [sp, #20]
 8002fd4:	464b      	mov	r3, r9
 8002fd6:	4442      	add	r2, r8
 8002fd8:	4631      	mov	r1, r6
 8002fda:	4628      	mov	r0, r5
 8002fdc:	47b8      	blx	r7
 8002fde:	3001      	adds	r0, #1
 8002fe0:	d1c1      	bne.n	8002f66 <_printf_float+0x33e>
 8002fe2:	e680      	b.n	8002ce6 <_printf_float+0xbe>
 8002fe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002fe6:	2a01      	cmp	r2, #1
 8002fe8:	dc01      	bgt.n	8002fee <_printf_float+0x3c6>
 8002fea:	07db      	lsls	r3, r3, #31
 8002fec:	d53a      	bpl.n	8003064 <_printf_float+0x43c>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	4642      	mov	r2, r8
 8002ff2:	4631      	mov	r1, r6
 8002ff4:	4628      	mov	r0, r5
 8002ff6:	47b8      	blx	r7
 8002ff8:	3001      	adds	r0, #1
 8002ffa:	f43f ae74 	beq.w	8002ce6 <_printf_float+0xbe>
 8002ffe:	ee18 3a10 	vmov	r3, s16
 8003002:	4652      	mov	r2, sl
 8003004:	4631      	mov	r1, r6
 8003006:	4628      	mov	r0, r5
 8003008:	47b8      	blx	r7
 800300a:	3001      	adds	r0, #1
 800300c:	f43f ae6b 	beq.w	8002ce6 <_printf_float+0xbe>
 8003010:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003014:	2200      	movs	r2, #0
 8003016:	2300      	movs	r3, #0
 8003018:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800301c:	f7fd fd54 	bl	8000ac8 <__aeabi_dcmpeq>
 8003020:	b9d8      	cbnz	r0, 800305a <_printf_float+0x432>
 8003022:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003026:	f108 0201 	add.w	r2, r8, #1
 800302a:	4631      	mov	r1, r6
 800302c:	4628      	mov	r0, r5
 800302e:	47b8      	blx	r7
 8003030:	3001      	adds	r0, #1
 8003032:	d10e      	bne.n	8003052 <_printf_float+0x42a>
 8003034:	e657      	b.n	8002ce6 <_printf_float+0xbe>
 8003036:	2301      	movs	r3, #1
 8003038:	4652      	mov	r2, sl
 800303a:	4631      	mov	r1, r6
 800303c:	4628      	mov	r0, r5
 800303e:	47b8      	blx	r7
 8003040:	3001      	adds	r0, #1
 8003042:	f43f ae50 	beq.w	8002ce6 <_printf_float+0xbe>
 8003046:	f108 0801 	add.w	r8, r8, #1
 800304a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800304c:	3b01      	subs	r3, #1
 800304e:	4543      	cmp	r3, r8
 8003050:	dcf1      	bgt.n	8003036 <_printf_float+0x40e>
 8003052:	464b      	mov	r3, r9
 8003054:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003058:	e6da      	b.n	8002e10 <_printf_float+0x1e8>
 800305a:	f04f 0800 	mov.w	r8, #0
 800305e:	f104 0a1a 	add.w	sl, r4, #26
 8003062:	e7f2      	b.n	800304a <_printf_float+0x422>
 8003064:	2301      	movs	r3, #1
 8003066:	4642      	mov	r2, r8
 8003068:	e7df      	b.n	800302a <_printf_float+0x402>
 800306a:	2301      	movs	r3, #1
 800306c:	464a      	mov	r2, r9
 800306e:	4631      	mov	r1, r6
 8003070:	4628      	mov	r0, r5
 8003072:	47b8      	blx	r7
 8003074:	3001      	adds	r0, #1
 8003076:	f43f ae36 	beq.w	8002ce6 <_printf_float+0xbe>
 800307a:	f108 0801 	add.w	r8, r8, #1
 800307e:	68e3      	ldr	r3, [r4, #12]
 8003080:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003082:	1a5b      	subs	r3, r3, r1
 8003084:	4543      	cmp	r3, r8
 8003086:	dcf0      	bgt.n	800306a <_printf_float+0x442>
 8003088:	e6f8      	b.n	8002e7c <_printf_float+0x254>
 800308a:	f04f 0800 	mov.w	r8, #0
 800308e:	f104 0919 	add.w	r9, r4, #25
 8003092:	e7f4      	b.n	800307e <_printf_float+0x456>

08003094 <_printf_common>:
 8003094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003098:	4616      	mov	r6, r2
 800309a:	4699      	mov	r9, r3
 800309c:	688a      	ldr	r2, [r1, #8]
 800309e:	690b      	ldr	r3, [r1, #16]
 80030a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030a4:	4293      	cmp	r3, r2
 80030a6:	bfb8      	it	lt
 80030a8:	4613      	movlt	r3, r2
 80030aa:	6033      	str	r3, [r6, #0]
 80030ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030b0:	4607      	mov	r7, r0
 80030b2:	460c      	mov	r4, r1
 80030b4:	b10a      	cbz	r2, 80030ba <_printf_common+0x26>
 80030b6:	3301      	adds	r3, #1
 80030b8:	6033      	str	r3, [r6, #0]
 80030ba:	6823      	ldr	r3, [r4, #0]
 80030bc:	0699      	lsls	r1, r3, #26
 80030be:	bf42      	ittt	mi
 80030c0:	6833      	ldrmi	r3, [r6, #0]
 80030c2:	3302      	addmi	r3, #2
 80030c4:	6033      	strmi	r3, [r6, #0]
 80030c6:	6825      	ldr	r5, [r4, #0]
 80030c8:	f015 0506 	ands.w	r5, r5, #6
 80030cc:	d106      	bne.n	80030dc <_printf_common+0x48>
 80030ce:	f104 0a19 	add.w	sl, r4, #25
 80030d2:	68e3      	ldr	r3, [r4, #12]
 80030d4:	6832      	ldr	r2, [r6, #0]
 80030d6:	1a9b      	subs	r3, r3, r2
 80030d8:	42ab      	cmp	r3, r5
 80030da:	dc26      	bgt.n	800312a <_printf_common+0x96>
 80030dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80030e0:	1e13      	subs	r3, r2, #0
 80030e2:	6822      	ldr	r2, [r4, #0]
 80030e4:	bf18      	it	ne
 80030e6:	2301      	movne	r3, #1
 80030e8:	0692      	lsls	r2, r2, #26
 80030ea:	d42b      	bmi.n	8003144 <_printf_common+0xb0>
 80030ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030f0:	4649      	mov	r1, r9
 80030f2:	4638      	mov	r0, r7
 80030f4:	47c0      	blx	r8
 80030f6:	3001      	adds	r0, #1
 80030f8:	d01e      	beq.n	8003138 <_printf_common+0xa4>
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	6922      	ldr	r2, [r4, #16]
 80030fe:	f003 0306 	and.w	r3, r3, #6
 8003102:	2b04      	cmp	r3, #4
 8003104:	bf02      	ittt	eq
 8003106:	68e5      	ldreq	r5, [r4, #12]
 8003108:	6833      	ldreq	r3, [r6, #0]
 800310a:	1aed      	subeq	r5, r5, r3
 800310c:	68a3      	ldr	r3, [r4, #8]
 800310e:	bf0c      	ite	eq
 8003110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003114:	2500      	movne	r5, #0
 8003116:	4293      	cmp	r3, r2
 8003118:	bfc4      	itt	gt
 800311a:	1a9b      	subgt	r3, r3, r2
 800311c:	18ed      	addgt	r5, r5, r3
 800311e:	2600      	movs	r6, #0
 8003120:	341a      	adds	r4, #26
 8003122:	42b5      	cmp	r5, r6
 8003124:	d11a      	bne.n	800315c <_printf_common+0xc8>
 8003126:	2000      	movs	r0, #0
 8003128:	e008      	b.n	800313c <_printf_common+0xa8>
 800312a:	2301      	movs	r3, #1
 800312c:	4652      	mov	r2, sl
 800312e:	4649      	mov	r1, r9
 8003130:	4638      	mov	r0, r7
 8003132:	47c0      	blx	r8
 8003134:	3001      	adds	r0, #1
 8003136:	d103      	bne.n	8003140 <_printf_common+0xac>
 8003138:	f04f 30ff 	mov.w	r0, #4294967295
 800313c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003140:	3501      	adds	r5, #1
 8003142:	e7c6      	b.n	80030d2 <_printf_common+0x3e>
 8003144:	18e1      	adds	r1, r4, r3
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	2030      	movs	r0, #48	; 0x30
 800314a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800314e:	4422      	add	r2, r4
 8003150:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003154:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003158:	3302      	adds	r3, #2
 800315a:	e7c7      	b.n	80030ec <_printf_common+0x58>
 800315c:	2301      	movs	r3, #1
 800315e:	4622      	mov	r2, r4
 8003160:	4649      	mov	r1, r9
 8003162:	4638      	mov	r0, r7
 8003164:	47c0      	blx	r8
 8003166:	3001      	adds	r0, #1
 8003168:	d0e6      	beq.n	8003138 <_printf_common+0xa4>
 800316a:	3601      	adds	r6, #1
 800316c:	e7d9      	b.n	8003122 <_printf_common+0x8e>
	...

08003170 <_printf_i>:
 8003170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003174:	7e0f      	ldrb	r7, [r1, #24]
 8003176:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003178:	2f78      	cmp	r7, #120	; 0x78
 800317a:	4691      	mov	r9, r2
 800317c:	4680      	mov	r8, r0
 800317e:	460c      	mov	r4, r1
 8003180:	469a      	mov	sl, r3
 8003182:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003186:	d807      	bhi.n	8003198 <_printf_i+0x28>
 8003188:	2f62      	cmp	r7, #98	; 0x62
 800318a:	d80a      	bhi.n	80031a2 <_printf_i+0x32>
 800318c:	2f00      	cmp	r7, #0
 800318e:	f000 80d4 	beq.w	800333a <_printf_i+0x1ca>
 8003192:	2f58      	cmp	r7, #88	; 0x58
 8003194:	f000 80c0 	beq.w	8003318 <_printf_i+0x1a8>
 8003198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800319c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031a0:	e03a      	b.n	8003218 <_printf_i+0xa8>
 80031a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031a6:	2b15      	cmp	r3, #21
 80031a8:	d8f6      	bhi.n	8003198 <_printf_i+0x28>
 80031aa:	a101      	add	r1, pc, #4	; (adr r1, 80031b0 <_printf_i+0x40>)
 80031ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031b0:	08003209 	.word	0x08003209
 80031b4:	0800321d 	.word	0x0800321d
 80031b8:	08003199 	.word	0x08003199
 80031bc:	08003199 	.word	0x08003199
 80031c0:	08003199 	.word	0x08003199
 80031c4:	08003199 	.word	0x08003199
 80031c8:	0800321d 	.word	0x0800321d
 80031cc:	08003199 	.word	0x08003199
 80031d0:	08003199 	.word	0x08003199
 80031d4:	08003199 	.word	0x08003199
 80031d8:	08003199 	.word	0x08003199
 80031dc:	08003321 	.word	0x08003321
 80031e0:	08003249 	.word	0x08003249
 80031e4:	080032db 	.word	0x080032db
 80031e8:	08003199 	.word	0x08003199
 80031ec:	08003199 	.word	0x08003199
 80031f0:	08003343 	.word	0x08003343
 80031f4:	08003199 	.word	0x08003199
 80031f8:	08003249 	.word	0x08003249
 80031fc:	08003199 	.word	0x08003199
 8003200:	08003199 	.word	0x08003199
 8003204:	080032e3 	.word	0x080032e3
 8003208:	682b      	ldr	r3, [r5, #0]
 800320a:	1d1a      	adds	r2, r3, #4
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	602a      	str	r2, [r5, #0]
 8003210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003218:	2301      	movs	r3, #1
 800321a:	e09f      	b.n	800335c <_printf_i+0x1ec>
 800321c:	6820      	ldr	r0, [r4, #0]
 800321e:	682b      	ldr	r3, [r5, #0]
 8003220:	0607      	lsls	r7, r0, #24
 8003222:	f103 0104 	add.w	r1, r3, #4
 8003226:	6029      	str	r1, [r5, #0]
 8003228:	d501      	bpl.n	800322e <_printf_i+0xbe>
 800322a:	681e      	ldr	r6, [r3, #0]
 800322c:	e003      	b.n	8003236 <_printf_i+0xc6>
 800322e:	0646      	lsls	r6, r0, #25
 8003230:	d5fb      	bpl.n	800322a <_printf_i+0xba>
 8003232:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003236:	2e00      	cmp	r6, #0
 8003238:	da03      	bge.n	8003242 <_printf_i+0xd2>
 800323a:	232d      	movs	r3, #45	; 0x2d
 800323c:	4276      	negs	r6, r6
 800323e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003242:	485a      	ldr	r0, [pc, #360]	; (80033ac <_printf_i+0x23c>)
 8003244:	230a      	movs	r3, #10
 8003246:	e012      	b.n	800326e <_printf_i+0xfe>
 8003248:	682b      	ldr	r3, [r5, #0]
 800324a:	6820      	ldr	r0, [r4, #0]
 800324c:	1d19      	adds	r1, r3, #4
 800324e:	6029      	str	r1, [r5, #0]
 8003250:	0605      	lsls	r5, r0, #24
 8003252:	d501      	bpl.n	8003258 <_printf_i+0xe8>
 8003254:	681e      	ldr	r6, [r3, #0]
 8003256:	e002      	b.n	800325e <_printf_i+0xee>
 8003258:	0641      	lsls	r1, r0, #25
 800325a:	d5fb      	bpl.n	8003254 <_printf_i+0xe4>
 800325c:	881e      	ldrh	r6, [r3, #0]
 800325e:	4853      	ldr	r0, [pc, #332]	; (80033ac <_printf_i+0x23c>)
 8003260:	2f6f      	cmp	r7, #111	; 0x6f
 8003262:	bf0c      	ite	eq
 8003264:	2308      	moveq	r3, #8
 8003266:	230a      	movne	r3, #10
 8003268:	2100      	movs	r1, #0
 800326a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800326e:	6865      	ldr	r5, [r4, #4]
 8003270:	60a5      	str	r5, [r4, #8]
 8003272:	2d00      	cmp	r5, #0
 8003274:	bfa2      	ittt	ge
 8003276:	6821      	ldrge	r1, [r4, #0]
 8003278:	f021 0104 	bicge.w	r1, r1, #4
 800327c:	6021      	strge	r1, [r4, #0]
 800327e:	b90e      	cbnz	r6, 8003284 <_printf_i+0x114>
 8003280:	2d00      	cmp	r5, #0
 8003282:	d04b      	beq.n	800331c <_printf_i+0x1ac>
 8003284:	4615      	mov	r5, r2
 8003286:	fbb6 f1f3 	udiv	r1, r6, r3
 800328a:	fb03 6711 	mls	r7, r3, r1, r6
 800328e:	5dc7      	ldrb	r7, [r0, r7]
 8003290:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003294:	4637      	mov	r7, r6
 8003296:	42bb      	cmp	r3, r7
 8003298:	460e      	mov	r6, r1
 800329a:	d9f4      	bls.n	8003286 <_printf_i+0x116>
 800329c:	2b08      	cmp	r3, #8
 800329e:	d10b      	bne.n	80032b8 <_printf_i+0x148>
 80032a0:	6823      	ldr	r3, [r4, #0]
 80032a2:	07de      	lsls	r6, r3, #31
 80032a4:	d508      	bpl.n	80032b8 <_printf_i+0x148>
 80032a6:	6923      	ldr	r3, [r4, #16]
 80032a8:	6861      	ldr	r1, [r4, #4]
 80032aa:	4299      	cmp	r1, r3
 80032ac:	bfde      	ittt	le
 80032ae:	2330      	movle	r3, #48	; 0x30
 80032b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80032b8:	1b52      	subs	r2, r2, r5
 80032ba:	6122      	str	r2, [r4, #16]
 80032bc:	f8cd a000 	str.w	sl, [sp]
 80032c0:	464b      	mov	r3, r9
 80032c2:	aa03      	add	r2, sp, #12
 80032c4:	4621      	mov	r1, r4
 80032c6:	4640      	mov	r0, r8
 80032c8:	f7ff fee4 	bl	8003094 <_printf_common>
 80032cc:	3001      	adds	r0, #1
 80032ce:	d14a      	bne.n	8003366 <_printf_i+0x1f6>
 80032d0:	f04f 30ff 	mov.w	r0, #4294967295
 80032d4:	b004      	add	sp, #16
 80032d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032da:	6823      	ldr	r3, [r4, #0]
 80032dc:	f043 0320 	orr.w	r3, r3, #32
 80032e0:	6023      	str	r3, [r4, #0]
 80032e2:	4833      	ldr	r0, [pc, #204]	; (80033b0 <_printf_i+0x240>)
 80032e4:	2778      	movs	r7, #120	; 0x78
 80032e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	6829      	ldr	r1, [r5, #0]
 80032ee:	061f      	lsls	r7, r3, #24
 80032f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80032f4:	d402      	bmi.n	80032fc <_printf_i+0x18c>
 80032f6:	065f      	lsls	r7, r3, #25
 80032f8:	bf48      	it	mi
 80032fa:	b2b6      	uxthmi	r6, r6
 80032fc:	07df      	lsls	r7, r3, #31
 80032fe:	bf48      	it	mi
 8003300:	f043 0320 	orrmi.w	r3, r3, #32
 8003304:	6029      	str	r1, [r5, #0]
 8003306:	bf48      	it	mi
 8003308:	6023      	strmi	r3, [r4, #0]
 800330a:	b91e      	cbnz	r6, 8003314 <_printf_i+0x1a4>
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	f023 0320 	bic.w	r3, r3, #32
 8003312:	6023      	str	r3, [r4, #0]
 8003314:	2310      	movs	r3, #16
 8003316:	e7a7      	b.n	8003268 <_printf_i+0xf8>
 8003318:	4824      	ldr	r0, [pc, #144]	; (80033ac <_printf_i+0x23c>)
 800331a:	e7e4      	b.n	80032e6 <_printf_i+0x176>
 800331c:	4615      	mov	r5, r2
 800331e:	e7bd      	b.n	800329c <_printf_i+0x12c>
 8003320:	682b      	ldr	r3, [r5, #0]
 8003322:	6826      	ldr	r6, [r4, #0]
 8003324:	6961      	ldr	r1, [r4, #20]
 8003326:	1d18      	adds	r0, r3, #4
 8003328:	6028      	str	r0, [r5, #0]
 800332a:	0635      	lsls	r5, r6, #24
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	d501      	bpl.n	8003334 <_printf_i+0x1c4>
 8003330:	6019      	str	r1, [r3, #0]
 8003332:	e002      	b.n	800333a <_printf_i+0x1ca>
 8003334:	0670      	lsls	r0, r6, #25
 8003336:	d5fb      	bpl.n	8003330 <_printf_i+0x1c0>
 8003338:	8019      	strh	r1, [r3, #0]
 800333a:	2300      	movs	r3, #0
 800333c:	6123      	str	r3, [r4, #16]
 800333e:	4615      	mov	r5, r2
 8003340:	e7bc      	b.n	80032bc <_printf_i+0x14c>
 8003342:	682b      	ldr	r3, [r5, #0]
 8003344:	1d1a      	adds	r2, r3, #4
 8003346:	602a      	str	r2, [r5, #0]
 8003348:	681d      	ldr	r5, [r3, #0]
 800334a:	6862      	ldr	r2, [r4, #4]
 800334c:	2100      	movs	r1, #0
 800334e:	4628      	mov	r0, r5
 8003350:	f7fc ff3e 	bl	80001d0 <memchr>
 8003354:	b108      	cbz	r0, 800335a <_printf_i+0x1ea>
 8003356:	1b40      	subs	r0, r0, r5
 8003358:	6060      	str	r0, [r4, #4]
 800335a:	6863      	ldr	r3, [r4, #4]
 800335c:	6123      	str	r3, [r4, #16]
 800335e:	2300      	movs	r3, #0
 8003360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003364:	e7aa      	b.n	80032bc <_printf_i+0x14c>
 8003366:	6923      	ldr	r3, [r4, #16]
 8003368:	462a      	mov	r2, r5
 800336a:	4649      	mov	r1, r9
 800336c:	4640      	mov	r0, r8
 800336e:	47d0      	blx	sl
 8003370:	3001      	adds	r0, #1
 8003372:	d0ad      	beq.n	80032d0 <_printf_i+0x160>
 8003374:	6823      	ldr	r3, [r4, #0]
 8003376:	079b      	lsls	r3, r3, #30
 8003378:	d413      	bmi.n	80033a2 <_printf_i+0x232>
 800337a:	68e0      	ldr	r0, [r4, #12]
 800337c:	9b03      	ldr	r3, [sp, #12]
 800337e:	4298      	cmp	r0, r3
 8003380:	bfb8      	it	lt
 8003382:	4618      	movlt	r0, r3
 8003384:	e7a6      	b.n	80032d4 <_printf_i+0x164>
 8003386:	2301      	movs	r3, #1
 8003388:	4632      	mov	r2, r6
 800338a:	4649      	mov	r1, r9
 800338c:	4640      	mov	r0, r8
 800338e:	47d0      	blx	sl
 8003390:	3001      	adds	r0, #1
 8003392:	d09d      	beq.n	80032d0 <_printf_i+0x160>
 8003394:	3501      	adds	r5, #1
 8003396:	68e3      	ldr	r3, [r4, #12]
 8003398:	9903      	ldr	r1, [sp, #12]
 800339a:	1a5b      	subs	r3, r3, r1
 800339c:	42ab      	cmp	r3, r5
 800339e:	dcf2      	bgt.n	8003386 <_printf_i+0x216>
 80033a0:	e7eb      	b.n	800337a <_printf_i+0x20a>
 80033a2:	2500      	movs	r5, #0
 80033a4:	f104 0619 	add.w	r6, r4, #25
 80033a8:	e7f5      	b.n	8003396 <_printf_i+0x226>
 80033aa:	bf00      	nop
 80033ac:	08005b51 	.word	0x08005b51
 80033b0:	08005b62 	.word	0x08005b62

080033b4 <std>:
 80033b4:	2300      	movs	r3, #0
 80033b6:	b510      	push	{r4, lr}
 80033b8:	4604      	mov	r4, r0
 80033ba:	e9c0 3300 	strd	r3, r3, [r0]
 80033be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033c2:	6083      	str	r3, [r0, #8]
 80033c4:	8181      	strh	r1, [r0, #12]
 80033c6:	6643      	str	r3, [r0, #100]	; 0x64
 80033c8:	81c2      	strh	r2, [r0, #14]
 80033ca:	6183      	str	r3, [r0, #24]
 80033cc:	4619      	mov	r1, r3
 80033ce:	2208      	movs	r2, #8
 80033d0:	305c      	adds	r0, #92	; 0x5c
 80033d2:	f000 f9b8 	bl	8003746 <memset>
 80033d6:	4b05      	ldr	r3, [pc, #20]	; (80033ec <std+0x38>)
 80033d8:	6263      	str	r3, [r4, #36]	; 0x24
 80033da:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <std+0x3c>)
 80033dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <std+0x40>)
 80033e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033e2:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <std+0x44>)
 80033e4:	6224      	str	r4, [r4, #32]
 80033e6:	6323      	str	r3, [r4, #48]	; 0x30
 80033e8:	bd10      	pop	{r4, pc}
 80033ea:	bf00      	nop
 80033ec:	080036c1 	.word	0x080036c1
 80033f0:	080036e3 	.word	0x080036e3
 80033f4:	0800371b 	.word	0x0800371b
 80033f8:	0800373f 	.word	0x0800373f

080033fc <stdio_exit_handler>:
 80033fc:	4a02      	ldr	r2, [pc, #8]	; (8003408 <stdio_exit_handler+0xc>)
 80033fe:	4903      	ldr	r1, [pc, #12]	; (800340c <stdio_exit_handler+0x10>)
 8003400:	4803      	ldr	r0, [pc, #12]	; (8003410 <stdio_exit_handler+0x14>)
 8003402:	f000 b869 	b.w	80034d8 <_fwalk_sglue>
 8003406:	bf00      	nop
 8003408:	2000002c 	.word	0x2000002c
 800340c:	08005471 	.word	0x08005471
 8003410:	20000038 	.word	0x20000038

08003414 <cleanup_stdio>:
 8003414:	6841      	ldr	r1, [r0, #4]
 8003416:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <cleanup_stdio+0x34>)
 8003418:	4299      	cmp	r1, r3
 800341a:	b510      	push	{r4, lr}
 800341c:	4604      	mov	r4, r0
 800341e:	d001      	beq.n	8003424 <cleanup_stdio+0x10>
 8003420:	f002 f826 	bl	8005470 <_fflush_r>
 8003424:	68a1      	ldr	r1, [r4, #8]
 8003426:	4b09      	ldr	r3, [pc, #36]	; (800344c <cleanup_stdio+0x38>)
 8003428:	4299      	cmp	r1, r3
 800342a:	d002      	beq.n	8003432 <cleanup_stdio+0x1e>
 800342c:	4620      	mov	r0, r4
 800342e:	f002 f81f 	bl	8005470 <_fflush_r>
 8003432:	68e1      	ldr	r1, [r4, #12]
 8003434:	4b06      	ldr	r3, [pc, #24]	; (8003450 <cleanup_stdio+0x3c>)
 8003436:	4299      	cmp	r1, r3
 8003438:	d004      	beq.n	8003444 <cleanup_stdio+0x30>
 800343a:	4620      	mov	r0, r4
 800343c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003440:	f002 b816 	b.w	8005470 <_fflush_r>
 8003444:	bd10      	pop	{r4, pc}
 8003446:	bf00      	nop
 8003448:	20000328 	.word	0x20000328
 800344c:	20000390 	.word	0x20000390
 8003450:	200003f8 	.word	0x200003f8

08003454 <global_stdio_init.part.0>:
 8003454:	b510      	push	{r4, lr}
 8003456:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <global_stdio_init.part.0+0x30>)
 8003458:	4c0b      	ldr	r4, [pc, #44]	; (8003488 <global_stdio_init.part.0+0x34>)
 800345a:	4a0c      	ldr	r2, [pc, #48]	; (800348c <global_stdio_init.part.0+0x38>)
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	4620      	mov	r0, r4
 8003460:	2200      	movs	r2, #0
 8003462:	2104      	movs	r1, #4
 8003464:	f7ff ffa6 	bl	80033b4 <std>
 8003468:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800346c:	2201      	movs	r2, #1
 800346e:	2109      	movs	r1, #9
 8003470:	f7ff ffa0 	bl	80033b4 <std>
 8003474:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003478:	2202      	movs	r2, #2
 800347a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800347e:	2112      	movs	r1, #18
 8003480:	f7ff bf98 	b.w	80033b4 <std>
 8003484:	20000460 	.word	0x20000460
 8003488:	20000328 	.word	0x20000328
 800348c:	080033fd 	.word	0x080033fd

08003490 <__sfp_lock_acquire>:
 8003490:	4801      	ldr	r0, [pc, #4]	; (8003498 <__sfp_lock_acquire+0x8>)
 8003492:	f000 b9c3 	b.w	800381c <__retarget_lock_acquire_recursive>
 8003496:	bf00      	nop
 8003498:	20000469 	.word	0x20000469

0800349c <__sfp_lock_release>:
 800349c:	4801      	ldr	r0, [pc, #4]	; (80034a4 <__sfp_lock_release+0x8>)
 800349e:	f000 b9be 	b.w	800381e <__retarget_lock_release_recursive>
 80034a2:	bf00      	nop
 80034a4:	20000469 	.word	0x20000469

080034a8 <__sinit>:
 80034a8:	b510      	push	{r4, lr}
 80034aa:	4604      	mov	r4, r0
 80034ac:	f7ff fff0 	bl	8003490 <__sfp_lock_acquire>
 80034b0:	6a23      	ldr	r3, [r4, #32]
 80034b2:	b11b      	cbz	r3, 80034bc <__sinit+0x14>
 80034b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034b8:	f7ff bff0 	b.w	800349c <__sfp_lock_release>
 80034bc:	4b04      	ldr	r3, [pc, #16]	; (80034d0 <__sinit+0x28>)
 80034be:	6223      	str	r3, [r4, #32]
 80034c0:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <__sinit+0x2c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f5      	bne.n	80034b4 <__sinit+0xc>
 80034c8:	f7ff ffc4 	bl	8003454 <global_stdio_init.part.0>
 80034cc:	e7f2      	b.n	80034b4 <__sinit+0xc>
 80034ce:	bf00      	nop
 80034d0:	08003415 	.word	0x08003415
 80034d4:	20000460 	.word	0x20000460

080034d8 <_fwalk_sglue>:
 80034d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034dc:	4607      	mov	r7, r0
 80034de:	4688      	mov	r8, r1
 80034e0:	4614      	mov	r4, r2
 80034e2:	2600      	movs	r6, #0
 80034e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034e8:	f1b9 0901 	subs.w	r9, r9, #1
 80034ec:	d505      	bpl.n	80034fa <_fwalk_sglue+0x22>
 80034ee:	6824      	ldr	r4, [r4, #0]
 80034f0:	2c00      	cmp	r4, #0
 80034f2:	d1f7      	bne.n	80034e4 <_fwalk_sglue+0xc>
 80034f4:	4630      	mov	r0, r6
 80034f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034fa:	89ab      	ldrh	r3, [r5, #12]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d907      	bls.n	8003510 <_fwalk_sglue+0x38>
 8003500:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003504:	3301      	adds	r3, #1
 8003506:	d003      	beq.n	8003510 <_fwalk_sglue+0x38>
 8003508:	4629      	mov	r1, r5
 800350a:	4638      	mov	r0, r7
 800350c:	47c0      	blx	r8
 800350e:	4306      	orrs	r6, r0
 8003510:	3568      	adds	r5, #104	; 0x68
 8003512:	e7e9      	b.n	80034e8 <_fwalk_sglue+0x10>

08003514 <setbuf>:
 8003514:	fab1 f281 	clz	r2, r1
 8003518:	0952      	lsrs	r2, r2, #5
 800351a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800351e:	0052      	lsls	r2, r2, #1
 8003520:	f000 b800 	b.w	8003524 <setvbuf>

08003524 <setvbuf>:
 8003524:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003528:	461d      	mov	r5, r3
 800352a:	4b54      	ldr	r3, [pc, #336]	; (800367c <setvbuf+0x158>)
 800352c:	681f      	ldr	r7, [r3, #0]
 800352e:	4604      	mov	r4, r0
 8003530:	460e      	mov	r6, r1
 8003532:	4690      	mov	r8, r2
 8003534:	b127      	cbz	r7, 8003540 <setvbuf+0x1c>
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	b913      	cbnz	r3, 8003540 <setvbuf+0x1c>
 800353a:	4638      	mov	r0, r7
 800353c:	f7ff ffb4 	bl	80034a8 <__sinit>
 8003540:	f1b8 0f02 	cmp.w	r8, #2
 8003544:	d006      	beq.n	8003554 <setvbuf+0x30>
 8003546:	f1b8 0f01 	cmp.w	r8, #1
 800354a:	f200 8094 	bhi.w	8003676 <setvbuf+0x152>
 800354e:	2d00      	cmp	r5, #0
 8003550:	f2c0 8091 	blt.w	8003676 <setvbuf+0x152>
 8003554:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003556:	07da      	lsls	r2, r3, #31
 8003558:	d405      	bmi.n	8003566 <setvbuf+0x42>
 800355a:	89a3      	ldrh	r3, [r4, #12]
 800355c:	059b      	lsls	r3, r3, #22
 800355e:	d402      	bmi.n	8003566 <setvbuf+0x42>
 8003560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003562:	f000 f95b 	bl	800381c <__retarget_lock_acquire_recursive>
 8003566:	4621      	mov	r1, r4
 8003568:	4638      	mov	r0, r7
 800356a:	f001 ff81 	bl	8005470 <_fflush_r>
 800356e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003570:	b141      	cbz	r1, 8003584 <setvbuf+0x60>
 8003572:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003576:	4299      	cmp	r1, r3
 8003578:	d002      	beq.n	8003580 <setvbuf+0x5c>
 800357a:	4638      	mov	r0, r7
 800357c:	f000 ffda 	bl	8004534 <_free_r>
 8003580:	2300      	movs	r3, #0
 8003582:	6363      	str	r3, [r4, #52]	; 0x34
 8003584:	2300      	movs	r3, #0
 8003586:	61a3      	str	r3, [r4, #24]
 8003588:	6063      	str	r3, [r4, #4]
 800358a:	89a3      	ldrh	r3, [r4, #12]
 800358c:	0618      	lsls	r0, r3, #24
 800358e:	d503      	bpl.n	8003598 <setvbuf+0x74>
 8003590:	6921      	ldr	r1, [r4, #16]
 8003592:	4638      	mov	r0, r7
 8003594:	f000 ffce 	bl	8004534 <_free_r>
 8003598:	89a3      	ldrh	r3, [r4, #12]
 800359a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800359e:	f023 0303 	bic.w	r3, r3, #3
 80035a2:	f1b8 0f02 	cmp.w	r8, #2
 80035a6:	81a3      	strh	r3, [r4, #12]
 80035a8:	d05f      	beq.n	800366a <setvbuf+0x146>
 80035aa:	ab01      	add	r3, sp, #4
 80035ac:	466a      	mov	r2, sp
 80035ae:	4621      	mov	r1, r4
 80035b0:	4638      	mov	r0, r7
 80035b2:	f001 ff85 	bl	80054c0 <__swhatbuf_r>
 80035b6:	89a3      	ldrh	r3, [r4, #12]
 80035b8:	4318      	orrs	r0, r3
 80035ba:	81a0      	strh	r0, [r4, #12]
 80035bc:	bb2d      	cbnz	r5, 800360a <setvbuf+0xe6>
 80035be:	9d00      	ldr	r5, [sp, #0]
 80035c0:	4628      	mov	r0, r5
 80035c2:	f001 f803 	bl	80045cc <malloc>
 80035c6:	4606      	mov	r6, r0
 80035c8:	2800      	cmp	r0, #0
 80035ca:	d150      	bne.n	800366e <setvbuf+0x14a>
 80035cc:	f8dd 9000 	ldr.w	r9, [sp]
 80035d0:	45a9      	cmp	r9, r5
 80035d2:	d13e      	bne.n	8003652 <setvbuf+0x12e>
 80035d4:	f04f 35ff 	mov.w	r5, #4294967295
 80035d8:	2200      	movs	r2, #0
 80035da:	60a2      	str	r2, [r4, #8]
 80035dc:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80035e0:	6022      	str	r2, [r4, #0]
 80035e2:	6122      	str	r2, [r4, #16]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035ea:	6162      	str	r2, [r4, #20]
 80035ec:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035ee:	f043 0302 	orr.w	r3, r3, #2
 80035f2:	07d1      	lsls	r1, r2, #31
 80035f4:	81a3      	strh	r3, [r4, #12]
 80035f6:	d404      	bmi.n	8003602 <setvbuf+0xde>
 80035f8:	059b      	lsls	r3, r3, #22
 80035fa:	d402      	bmi.n	8003602 <setvbuf+0xde>
 80035fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035fe:	f000 f90e 	bl	800381e <__retarget_lock_release_recursive>
 8003602:	4628      	mov	r0, r5
 8003604:	b003      	add	sp, #12
 8003606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800360a:	2e00      	cmp	r6, #0
 800360c:	d0d8      	beq.n	80035c0 <setvbuf+0x9c>
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	b913      	cbnz	r3, 8003618 <setvbuf+0xf4>
 8003612:	4638      	mov	r0, r7
 8003614:	f7ff ff48 	bl	80034a8 <__sinit>
 8003618:	f1b8 0f01 	cmp.w	r8, #1
 800361c:	bf08      	it	eq
 800361e:	89a3      	ldrheq	r3, [r4, #12]
 8003620:	6026      	str	r6, [r4, #0]
 8003622:	bf04      	itt	eq
 8003624:	f043 0301 	orreq.w	r3, r3, #1
 8003628:	81a3      	strheq	r3, [r4, #12]
 800362a:	89a3      	ldrh	r3, [r4, #12]
 800362c:	f013 0208 	ands.w	r2, r3, #8
 8003630:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003634:	d01d      	beq.n	8003672 <setvbuf+0x14e>
 8003636:	07da      	lsls	r2, r3, #31
 8003638:	bf41      	itttt	mi
 800363a:	2200      	movmi	r2, #0
 800363c:	426d      	negmi	r5, r5
 800363e:	60a2      	strmi	r2, [r4, #8]
 8003640:	61a5      	strmi	r5, [r4, #24]
 8003642:	bf58      	it	pl
 8003644:	60a5      	strpl	r5, [r4, #8]
 8003646:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003648:	f015 0501 	ands.w	r5, r5, #1
 800364c:	d0d4      	beq.n	80035f8 <setvbuf+0xd4>
 800364e:	2500      	movs	r5, #0
 8003650:	e7d7      	b.n	8003602 <setvbuf+0xde>
 8003652:	4648      	mov	r0, r9
 8003654:	f000 ffba 	bl	80045cc <malloc>
 8003658:	4606      	mov	r6, r0
 800365a:	2800      	cmp	r0, #0
 800365c:	d0ba      	beq.n	80035d4 <setvbuf+0xb0>
 800365e:	89a3      	ldrh	r3, [r4, #12]
 8003660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003664:	81a3      	strh	r3, [r4, #12]
 8003666:	464d      	mov	r5, r9
 8003668:	e7d1      	b.n	800360e <setvbuf+0xea>
 800366a:	2500      	movs	r5, #0
 800366c:	e7b4      	b.n	80035d8 <setvbuf+0xb4>
 800366e:	46a9      	mov	r9, r5
 8003670:	e7f5      	b.n	800365e <setvbuf+0x13a>
 8003672:	60a2      	str	r2, [r4, #8]
 8003674:	e7e7      	b.n	8003646 <setvbuf+0x122>
 8003676:	f04f 35ff 	mov.w	r5, #4294967295
 800367a:	e7c2      	b.n	8003602 <setvbuf+0xde>
 800367c:	20000084 	.word	0x20000084

08003680 <siprintf>:
 8003680:	b40e      	push	{r1, r2, r3}
 8003682:	b500      	push	{lr}
 8003684:	b09c      	sub	sp, #112	; 0x70
 8003686:	ab1d      	add	r3, sp, #116	; 0x74
 8003688:	9002      	str	r0, [sp, #8]
 800368a:	9006      	str	r0, [sp, #24]
 800368c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003690:	4809      	ldr	r0, [pc, #36]	; (80036b8 <siprintf+0x38>)
 8003692:	9107      	str	r1, [sp, #28]
 8003694:	9104      	str	r1, [sp, #16]
 8003696:	4909      	ldr	r1, [pc, #36]	; (80036bc <siprintf+0x3c>)
 8003698:	f853 2b04 	ldr.w	r2, [r3], #4
 800369c:	9105      	str	r1, [sp, #20]
 800369e:	6800      	ldr	r0, [r0, #0]
 80036a0:	9301      	str	r3, [sp, #4]
 80036a2:	a902      	add	r1, sp, #8
 80036a4:	f001 fc1c 	bl	8004ee0 <_svfiprintf_r>
 80036a8:	9b02      	ldr	r3, [sp, #8]
 80036aa:	2200      	movs	r2, #0
 80036ac:	701a      	strb	r2, [r3, #0]
 80036ae:	b01c      	add	sp, #112	; 0x70
 80036b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80036b4:	b003      	add	sp, #12
 80036b6:	4770      	bx	lr
 80036b8:	20000084 	.word	0x20000084
 80036bc:	ffff0208 	.word	0xffff0208

080036c0 <__sread>:
 80036c0:	b510      	push	{r4, lr}
 80036c2:	460c      	mov	r4, r1
 80036c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036c8:	f000 f86c 	bl	80037a4 <_read_r>
 80036cc:	2800      	cmp	r0, #0
 80036ce:	bfab      	itete	ge
 80036d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80036d2:	89a3      	ldrhlt	r3, [r4, #12]
 80036d4:	181b      	addge	r3, r3, r0
 80036d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80036da:	bfac      	ite	ge
 80036dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80036de:	81a3      	strhlt	r3, [r4, #12]
 80036e0:	bd10      	pop	{r4, pc}

080036e2 <__swrite>:
 80036e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036e6:	461f      	mov	r7, r3
 80036e8:	898b      	ldrh	r3, [r1, #12]
 80036ea:	05db      	lsls	r3, r3, #23
 80036ec:	4605      	mov	r5, r0
 80036ee:	460c      	mov	r4, r1
 80036f0:	4616      	mov	r6, r2
 80036f2:	d505      	bpl.n	8003700 <__swrite+0x1e>
 80036f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036f8:	2302      	movs	r3, #2
 80036fa:	2200      	movs	r2, #0
 80036fc:	f000 f840 	bl	8003780 <_lseek_r>
 8003700:	89a3      	ldrh	r3, [r4, #12]
 8003702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800370a:	81a3      	strh	r3, [r4, #12]
 800370c:	4632      	mov	r2, r6
 800370e:	463b      	mov	r3, r7
 8003710:	4628      	mov	r0, r5
 8003712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003716:	f7fe b929 	b.w	800196c <_write_r>

0800371a <__sseek>:
 800371a:	b510      	push	{r4, lr}
 800371c:	460c      	mov	r4, r1
 800371e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003722:	f000 f82d 	bl	8003780 <_lseek_r>
 8003726:	1c43      	adds	r3, r0, #1
 8003728:	89a3      	ldrh	r3, [r4, #12]
 800372a:	bf15      	itete	ne
 800372c:	6560      	strne	r0, [r4, #84]	; 0x54
 800372e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003732:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003736:	81a3      	strheq	r3, [r4, #12]
 8003738:	bf18      	it	ne
 800373a:	81a3      	strhne	r3, [r4, #12]
 800373c:	bd10      	pop	{r4, pc}

0800373e <__sclose>:
 800373e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003742:	f000 b80d 	b.w	8003760 <_close_r>

08003746 <memset>:
 8003746:	4402      	add	r2, r0
 8003748:	4603      	mov	r3, r0
 800374a:	4293      	cmp	r3, r2
 800374c:	d100      	bne.n	8003750 <memset+0xa>
 800374e:	4770      	bx	lr
 8003750:	f803 1b01 	strb.w	r1, [r3], #1
 8003754:	e7f9      	b.n	800374a <memset+0x4>
	...

08003758 <_localeconv_r>:
 8003758:	4800      	ldr	r0, [pc, #0]	; (800375c <_localeconv_r+0x4>)
 800375a:	4770      	bx	lr
 800375c:	20000178 	.word	0x20000178

08003760 <_close_r>:
 8003760:	b538      	push	{r3, r4, r5, lr}
 8003762:	4d06      	ldr	r5, [pc, #24]	; (800377c <_close_r+0x1c>)
 8003764:	2300      	movs	r3, #0
 8003766:	4604      	mov	r4, r0
 8003768:	4608      	mov	r0, r1
 800376a:	602b      	str	r3, [r5, #0]
 800376c:	f7ff f89e 	bl	80028ac <_close>
 8003770:	1c43      	adds	r3, r0, #1
 8003772:	d102      	bne.n	800377a <_close_r+0x1a>
 8003774:	682b      	ldr	r3, [r5, #0]
 8003776:	b103      	cbz	r3, 800377a <_close_r+0x1a>
 8003778:	6023      	str	r3, [r4, #0]
 800377a:	bd38      	pop	{r3, r4, r5, pc}
 800377c:	20000464 	.word	0x20000464

08003780 <_lseek_r>:
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	4d07      	ldr	r5, [pc, #28]	; (80037a0 <_lseek_r+0x20>)
 8003784:	4604      	mov	r4, r0
 8003786:	4608      	mov	r0, r1
 8003788:	4611      	mov	r1, r2
 800378a:	2200      	movs	r2, #0
 800378c:	602a      	str	r2, [r5, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	f7ff f8b3 	bl	80028fa <_lseek>
 8003794:	1c43      	adds	r3, r0, #1
 8003796:	d102      	bne.n	800379e <_lseek_r+0x1e>
 8003798:	682b      	ldr	r3, [r5, #0]
 800379a:	b103      	cbz	r3, 800379e <_lseek_r+0x1e>
 800379c:	6023      	str	r3, [r4, #0]
 800379e:	bd38      	pop	{r3, r4, r5, pc}
 80037a0:	20000464 	.word	0x20000464

080037a4 <_read_r>:
 80037a4:	b538      	push	{r3, r4, r5, lr}
 80037a6:	4d07      	ldr	r5, [pc, #28]	; (80037c4 <_read_r+0x20>)
 80037a8:	4604      	mov	r4, r0
 80037aa:	4608      	mov	r0, r1
 80037ac:	4611      	mov	r1, r2
 80037ae:	2200      	movs	r2, #0
 80037b0:	602a      	str	r2, [r5, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	f7ff f85d 	bl	8002872 <_read>
 80037b8:	1c43      	adds	r3, r0, #1
 80037ba:	d102      	bne.n	80037c2 <_read_r+0x1e>
 80037bc:	682b      	ldr	r3, [r5, #0]
 80037be:	b103      	cbz	r3, 80037c2 <_read_r+0x1e>
 80037c0:	6023      	str	r3, [r4, #0]
 80037c2:	bd38      	pop	{r3, r4, r5, pc}
 80037c4:	20000464 	.word	0x20000464

080037c8 <__errno>:
 80037c8:	4b01      	ldr	r3, [pc, #4]	; (80037d0 <__errno+0x8>)
 80037ca:	6818      	ldr	r0, [r3, #0]
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	20000084 	.word	0x20000084

080037d4 <__libc_init_array>:
 80037d4:	b570      	push	{r4, r5, r6, lr}
 80037d6:	4d0d      	ldr	r5, [pc, #52]	; (800380c <__libc_init_array+0x38>)
 80037d8:	4c0d      	ldr	r4, [pc, #52]	; (8003810 <__libc_init_array+0x3c>)
 80037da:	1b64      	subs	r4, r4, r5
 80037dc:	10a4      	asrs	r4, r4, #2
 80037de:	2600      	movs	r6, #0
 80037e0:	42a6      	cmp	r6, r4
 80037e2:	d109      	bne.n	80037f8 <__libc_init_array+0x24>
 80037e4:	4d0b      	ldr	r5, [pc, #44]	; (8003814 <__libc_init_array+0x40>)
 80037e6:	4c0c      	ldr	r4, [pc, #48]	; (8003818 <__libc_init_array+0x44>)
 80037e8:	f002 f896 	bl	8005918 <_init>
 80037ec:	1b64      	subs	r4, r4, r5
 80037ee:	10a4      	asrs	r4, r4, #2
 80037f0:	2600      	movs	r6, #0
 80037f2:	42a6      	cmp	r6, r4
 80037f4:	d105      	bne.n	8003802 <__libc_init_array+0x2e>
 80037f6:	bd70      	pop	{r4, r5, r6, pc}
 80037f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037fc:	4798      	blx	r3
 80037fe:	3601      	adds	r6, #1
 8003800:	e7ee      	b.n	80037e0 <__libc_init_array+0xc>
 8003802:	f855 3b04 	ldr.w	r3, [r5], #4
 8003806:	4798      	blx	r3
 8003808:	3601      	adds	r6, #1
 800380a:	e7f2      	b.n	80037f2 <__libc_init_array+0x1e>
 800380c:	08005eb4 	.word	0x08005eb4
 8003810:	08005eb4 	.word	0x08005eb4
 8003814:	08005eb4 	.word	0x08005eb4
 8003818:	08005eb8 	.word	0x08005eb8

0800381c <__retarget_lock_acquire_recursive>:
 800381c:	4770      	bx	lr

0800381e <__retarget_lock_release_recursive>:
 800381e:	4770      	bx	lr

08003820 <memcpy>:
 8003820:	440a      	add	r2, r1
 8003822:	4291      	cmp	r1, r2
 8003824:	f100 33ff 	add.w	r3, r0, #4294967295
 8003828:	d100      	bne.n	800382c <memcpy+0xc>
 800382a:	4770      	bx	lr
 800382c:	b510      	push	{r4, lr}
 800382e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003832:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003836:	4291      	cmp	r1, r2
 8003838:	d1f9      	bne.n	800382e <memcpy+0xe>
 800383a:	bd10      	pop	{r4, pc}

0800383c <quorem>:
 800383c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003840:	6903      	ldr	r3, [r0, #16]
 8003842:	690c      	ldr	r4, [r1, #16]
 8003844:	42a3      	cmp	r3, r4
 8003846:	4607      	mov	r7, r0
 8003848:	db7e      	blt.n	8003948 <quorem+0x10c>
 800384a:	3c01      	subs	r4, #1
 800384c:	f101 0814 	add.w	r8, r1, #20
 8003850:	f100 0514 	add.w	r5, r0, #20
 8003854:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003858:	9301      	str	r3, [sp, #4]
 800385a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800385e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003862:	3301      	adds	r3, #1
 8003864:	429a      	cmp	r2, r3
 8003866:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800386a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800386e:	fbb2 f6f3 	udiv	r6, r2, r3
 8003872:	d331      	bcc.n	80038d8 <quorem+0x9c>
 8003874:	f04f 0e00 	mov.w	lr, #0
 8003878:	4640      	mov	r0, r8
 800387a:	46ac      	mov	ip, r5
 800387c:	46f2      	mov	sl, lr
 800387e:	f850 2b04 	ldr.w	r2, [r0], #4
 8003882:	b293      	uxth	r3, r2
 8003884:	fb06 e303 	mla	r3, r6, r3, lr
 8003888:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800388c:	0c1a      	lsrs	r2, r3, #16
 800388e:	b29b      	uxth	r3, r3
 8003890:	ebaa 0303 	sub.w	r3, sl, r3
 8003894:	f8dc a000 	ldr.w	sl, [ip]
 8003898:	fa13 f38a 	uxtah	r3, r3, sl
 800389c:	fb06 220e 	mla	r2, r6, lr, r2
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	9b00      	ldr	r3, [sp, #0]
 80038a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80038a8:	b292      	uxth	r2, r2
 80038aa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80038ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80038b2:	f8bd 3000 	ldrh.w	r3, [sp]
 80038b6:	4581      	cmp	r9, r0
 80038b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80038bc:	f84c 3b04 	str.w	r3, [ip], #4
 80038c0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80038c4:	d2db      	bcs.n	800387e <quorem+0x42>
 80038c6:	f855 300b 	ldr.w	r3, [r5, fp]
 80038ca:	b92b      	cbnz	r3, 80038d8 <quorem+0x9c>
 80038cc:	9b01      	ldr	r3, [sp, #4]
 80038ce:	3b04      	subs	r3, #4
 80038d0:	429d      	cmp	r5, r3
 80038d2:	461a      	mov	r2, r3
 80038d4:	d32c      	bcc.n	8003930 <quorem+0xf4>
 80038d6:	613c      	str	r4, [r7, #16]
 80038d8:	4638      	mov	r0, r7
 80038da:	f001 f9a7 	bl	8004c2c <__mcmp>
 80038de:	2800      	cmp	r0, #0
 80038e0:	db22      	blt.n	8003928 <quorem+0xec>
 80038e2:	3601      	adds	r6, #1
 80038e4:	4629      	mov	r1, r5
 80038e6:	2000      	movs	r0, #0
 80038e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80038ec:	f8d1 c000 	ldr.w	ip, [r1]
 80038f0:	b293      	uxth	r3, r2
 80038f2:	1ac3      	subs	r3, r0, r3
 80038f4:	0c12      	lsrs	r2, r2, #16
 80038f6:	fa13 f38c 	uxtah	r3, r3, ip
 80038fa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80038fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003902:	b29b      	uxth	r3, r3
 8003904:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003908:	45c1      	cmp	r9, r8
 800390a:	f841 3b04 	str.w	r3, [r1], #4
 800390e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003912:	d2e9      	bcs.n	80038e8 <quorem+0xac>
 8003914:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003918:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800391c:	b922      	cbnz	r2, 8003928 <quorem+0xec>
 800391e:	3b04      	subs	r3, #4
 8003920:	429d      	cmp	r5, r3
 8003922:	461a      	mov	r2, r3
 8003924:	d30a      	bcc.n	800393c <quorem+0x100>
 8003926:	613c      	str	r4, [r7, #16]
 8003928:	4630      	mov	r0, r6
 800392a:	b003      	add	sp, #12
 800392c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003930:	6812      	ldr	r2, [r2, #0]
 8003932:	3b04      	subs	r3, #4
 8003934:	2a00      	cmp	r2, #0
 8003936:	d1ce      	bne.n	80038d6 <quorem+0x9a>
 8003938:	3c01      	subs	r4, #1
 800393a:	e7c9      	b.n	80038d0 <quorem+0x94>
 800393c:	6812      	ldr	r2, [r2, #0]
 800393e:	3b04      	subs	r3, #4
 8003940:	2a00      	cmp	r2, #0
 8003942:	d1f0      	bne.n	8003926 <quorem+0xea>
 8003944:	3c01      	subs	r4, #1
 8003946:	e7eb      	b.n	8003920 <quorem+0xe4>
 8003948:	2000      	movs	r0, #0
 800394a:	e7ee      	b.n	800392a <quorem+0xee>
 800394c:	0000      	movs	r0, r0
	...

08003950 <_dtoa_r>:
 8003950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003954:	ed2d 8b04 	vpush	{d8-d9}
 8003958:	69c5      	ldr	r5, [r0, #28]
 800395a:	b093      	sub	sp, #76	; 0x4c
 800395c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003960:	ec57 6b10 	vmov	r6, r7, d0
 8003964:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003968:	9107      	str	r1, [sp, #28]
 800396a:	4604      	mov	r4, r0
 800396c:	920a      	str	r2, [sp, #40]	; 0x28
 800396e:	930d      	str	r3, [sp, #52]	; 0x34
 8003970:	b975      	cbnz	r5, 8003990 <_dtoa_r+0x40>
 8003972:	2010      	movs	r0, #16
 8003974:	f000 fe2a 	bl	80045cc <malloc>
 8003978:	4602      	mov	r2, r0
 800397a:	61e0      	str	r0, [r4, #28]
 800397c:	b920      	cbnz	r0, 8003988 <_dtoa_r+0x38>
 800397e:	4bae      	ldr	r3, [pc, #696]	; (8003c38 <_dtoa_r+0x2e8>)
 8003980:	21ef      	movs	r1, #239	; 0xef
 8003982:	48ae      	ldr	r0, [pc, #696]	; (8003c3c <_dtoa_r+0x2ec>)
 8003984:	f001 fee0 	bl	8005748 <__assert_func>
 8003988:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800398c:	6005      	str	r5, [r0, #0]
 800398e:	60c5      	str	r5, [r0, #12]
 8003990:	69e3      	ldr	r3, [r4, #28]
 8003992:	6819      	ldr	r1, [r3, #0]
 8003994:	b151      	cbz	r1, 80039ac <_dtoa_r+0x5c>
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	604a      	str	r2, [r1, #4]
 800399a:	2301      	movs	r3, #1
 800399c:	4093      	lsls	r3, r2
 800399e:	608b      	str	r3, [r1, #8]
 80039a0:	4620      	mov	r0, r4
 80039a2:	f000 ff07 	bl	80047b4 <_Bfree>
 80039a6:	69e3      	ldr	r3, [r4, #28]
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	1e3b      	subs	r3, r7, #0
 80039ae:	bfbb      	ittet	lt
 80039b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80039b4:	9303      	strlt	r3, [sp, #12]
 80039b6:	2300      	movge	r3, #0
 80039b8:	2201      	movlt	r2, #1
 80039ba:	bfac      	ite	ge
 80039bc:	f8c8 3000 	strge.w	r3, [r8]
 80039c0:	f8c8 2000 	strlt.w	r2, [r8]
 80039c4:	4b9e      	ldr	r3, [pc, #632]	; (8003c40 <_dtoa_r+0x2f0>)
 80039c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80039ca:	ea33 0308 	bics.w	r3, r3, r8
 80039ce:	d11b      	bne.n	8003a08 <_dtoa_r+0xb8>
 80039d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80039d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80039dc:	4333      	orrs	r3, r6
 80039de:	f000 8593 	beq.w	8004508 <_dtoa_r+0xbb8>
 80039e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80039e4:	b963      	cbnz	r3, 8003a00 <_dtoa_r+0xb0>
 80039e6:	4b97      	ldr	r3, [pc, #604]	; (8003c44 <_dtoa_r+0x2f4>)
 80039e8:	e027      	b.n	8003a3a <_dtoa_r+0xea>
 80039ea:	4b97      	ldr	r3, [pc, #604]	; (8003c48 <_dtoa_r+0x2f8>)
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	3308      	adds	r3, #8
 80039f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	9800      	ldr	r0, [sp, #0]
 80039f6:	b013      	add	sp, #76	; 0x4c
 80039f8:	ecbd 8b04 	vpop	{d8-d9}
 80039fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a00:	4b90      	ldr	r3, [pc, #576]	; (8003c44 <_dtoa_r+0x2f4>)
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	3303      	adds	r3, #3
 8003a06:	e7f3      	b.n	80039f0 <_dtoa_r+0xa0>
 8003a08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	ec51 0b17 	vmov	r0, r1, d7
 8003a12:	eeb0 8a47 	vmov.f32	s16, s14
 8003a16:	eef0 8a67 	vmov.f32	s17, s15
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f7fd f854 	bl	8000ac8 <__aeabi_dcmpeq>
 8003a20:	4681      	mov	r9, r0
 8003a22:	b160      	cbz	r0, 8003a3e <_dtoa_r+0xee>
 8003a24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003a26:	2301      	movs	r3, #1
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 8568 	beq.w	8004502 <_dtoa_r+0xbb2>
 8003a32:	4b86      	ldr	r3, [pc, #536]	; (8003c4c <_dtoa_r+0x2fc>)
 8003a34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	e7da      	b.n	80039f4 <_dtoa_r+0xa4>
 8003a3e:	aa10      	add	r2, sp, #64	; 0x40
 8003a40:	a911      	add	r1, sp, #68	; 0x44
 8003a42:	4620      	mov	r0, r4
 8003a44:	eeb0 0a48 	vmov.f32	s0, s16
 8003a48:	eef0 0a68 	vmov.f32	s1, s17
 8003a4c:	f001 f994 	bl	8004d78 <__d2b>
 8003a50:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003a54:	4682      	mov	sl, r0
 8003a56:	2d00      	cmp	r5, #0
 8003a58:	d07f      	beq.n	8003b5a <_dtoa_r+0x20a>
 8003a5a:	ee18 3a90 	vmov	r3, s17
 8003a5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a62:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003a66:	ec51 0b18 	vmov	r0, r1, d8
 8003a6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003a6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003a72:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003a76:	4619      	mov	r1, r3
 8003a78:	2200      	movs	r2, #0
 8003a7a:	4b75      	ldr	r3, [pc, #468]	; (8003c50 <_dtoa_r+0x300>)
 8003a7c:	f7fc fc04 	bl	8000288 <__aeabi_dsub>
 8003a80:	a367      	add	r3, pc, #412	; (adr r3, 8003c20 <_dtoa_r+0x2d0>)
 8003a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a86:	f7fc fdb7 	bl	80005f8 <__aeabi_dmul>
 8003a8a:	a367      	add	r3, pc, #412	; (adr r3, 8003c28 <_dtoa_r+0x2d8>)
 8003a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a90:	f7fc fbfc 	bl	800028c <__adddf3>
 8003a94:	4606      	mov	r6, r0
 8003a96:	4628      	mov	r0, r5
 8003a98:	460f      	mov	r7, r1
 8003a9a:	f7fc fd43 	bl	8000524 <__aeabi_i2d>
 8003a9e:	a364      	add	r3, pc, #400	; (adr r3, 8003c30 <_dtoa_r+0x2e0>)
 8003aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa4:	f7fc fda8 	bl	80005f8 <__aeabi_dmul>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4630      	mov	r0, r6
 8003aae:	4639      	mov	r1, r7
 8003ab0:	f7fc fbec 	bl	800028c <__adddf3>
 8003ab4:	4606      	mov	r6, r0
 8003ab6:	460f      	mov	r7, r1
 8003ab8:	f7fd f84e 	bl	8000b58 <__aeabi_d2iz>
 8003abc:	2200      	movs	r2, #0
 8003abe:	4683      	mov	fp, r0
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	4639      	mov	r1, r7
 8003ac6:	f7fd f809 	bl	8000adc <__aeabi_dcmplt>
 8003aca:	b148      	cbz	r0, 8003ae0 <_dtoa_r+0x190>
 8003acc:	4658      	mov	r0, fp
 8003ace:	f7fc fd29 	bl	8000524 <__aeabi_i2d>
 8003ad2:	4632      	mov	r2, r6
 8003ad4:	463b      	mov	r3, r7
 8003ad6:	f7fc fff7 	bl	8000ac8 <__aeabi_dcmpeq>
 8003ada:	b908      	cbnz	r0, 8003ae0 <_dtoa_r+0x190>
 8003adc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003ae0:	f1bb 0f16 	cmp.w	fp, #22
 8003ae4:	d857      	bhi.n	8003b96 <_dtoa_r+0x246>
 8003ae6:	4b5b      	ldr	r3, [pc, #364]	; (8003c54 <_dtoa_r+0x304>)
 8003ae8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af0:	ec51 0b18 	vmov	r0, r1, d8
 8003af4:	f7fc fff2 	bl	8000adc <__aeabi_dcmplt>
 8003af8:	2800      	cmp	r0, #0
 8003afa:	d04e      	beq.n	8003b9a <_dtoa_r+0x24a>
 8003afc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003b00:	2300      	movs	r3, #0
 8003b02:	930c      	str	r3, [sp, #48]	; 0x30
 8003b04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003b06:	1b5b      	subs	r3, r3, r5
 8003b08:	1e5a      	subs	r2, r3, #1
 8003b0a:	bf45      	ittet	mi
 8003b0c:	f1c3 0301 	rsbmi	r3, r3, #1
 8003b10:	9305      	strmi	r3, [sp, #20]
 8003b12:	2300      	movpl	r3, #0
 8003b14:	2300      	movmi	r3, #0
 8003b16:	9206      	str	r2, [sp, #24]
 8003b18:	bf54      	ite	pl
 8003b1a:	9305      	strpl	r3, [sp, #20]
 8003b1c:	9306      	strmi	r3, [sp, #24]
 8003b1e:	f1bb 0f00 	cmp.w	fp, #0
 8003b22:	db3c      	blt.n	8003b9e <_dtoa_r+0x24e>
 8003b24:	9b06      	ldr	r3, [sp, #24]
 8003b26:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003b2a:	445b      	add	r3, fp
 8003b2c:	9306      	str	r3, [sp, #24]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	9308      	str	r3, [sp, #32]
 8003b32:	9b07      	ldr	r3, [sp, #28]
 8003b34:	2b09      	cmp	r3, #9
 8003b36:	d868      	bhi.n	8003c0a <_dtoa_r+0x2ba>
 8003b38:	2b05      	cmp	r3, #5
 8003b3a:	bfc4      	itt	gt
 8003b3c:	3b04      	subgt	r3, #4
 8003b3e:	9307      	strgt	r3, [sp, #28]
 8003b40:	9b07      	ldr	r3, [sp, #28]
 8003b42:	f1a3 0302 	sub.w	r3, r3, #2
 8003b46:	bfcc      	ite	gt
 8003b48:	2500      	movgt	r5, #0
 8003b4a:	2501      	movle	r5, #1
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	f200 8085 	bhi.w	8003c5c <_dtoa_r+0x30c>
 8003b52:	e8df f003 	tbb	[pc, r3]
 8003b56:	3b2e      	.short	0x3b2e
 8003b58:	5839      	.short	0x5839
 8003b5a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003b5e:	441d      	add	r5, r3
 8003b60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	bfc1      	itttt	gt
 8003b68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003b6c:	fa08 f803 	lslgt.w	r8, r8, r3
 8003b70:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8003b74:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003b78:	bfd6      	itet	le
 8003b7a:	f1c3 0320 	rsble	r3, r3, #32
 8003b7e:	ea48 0003 	orrgt.w	r0, r8, r3
 8003b82:	fa06 f003 	lslle.w	r0, r6, r3
 8003b86:	f7fc fcbd 	bl	8000504 <__aeabi_ui2d>
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003b90:	3d01      	subs	r5, #1
 8003b92:	920e      	str	r2, [sp, #56]	; 0x38
 8003b94:	e76f      	b.n	8003a76 <_dtoa_r+0x126>
 8003b96:	2301      	movs	r3, #1
 8003b98:	e7b3      	b.n	8003b02 <_dtoa_r+0x1b2>
 8003b9a:	900c      	str	r0, [sp, #48]	; 0x30
 8003b9c:	e7b2      	b.n	8003b04 <_dtoa_r+0x1b4>
 8003b9e:	9b05      	ldr	r3, [sp, #20]
 8003ba0:	eba3 030b 	sub.w	r3, r3, fp
 8003ba4:	9305      	str	r3, [sp, #20]
 8003ba6:	f1cb 0300 	rsb	r3, fp, #0
 8003baa:	9308      	str	r3, [sp, #32]
 8003bac:	2300      	movs	r3, #0
 8003bae:	930b      	str	r3, [sp, #44]	; 0x2c
 8003bb0:	e7bf      	b.n	8003b32 <_dtoa_r+0x1e2>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8003bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	dc52      	bgt.n	8003c62 <_dtoa_r+0x312>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	9301      	str	r3, [sp, #4]
 8003bc0:	9304      	str	r3, [sp, #16]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	920a      	str	r2, [sp, #40]	; 0x28
 8003bc6:	e00b      	b.n	8003be0 <_dtoa_r+0x290>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e7f3      	b.n	8003bb4 <_dtoa_r+0x264>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	9309      	str	r3, [sp, #36]	; 0x24
 8003bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bd2:	445b      	add	r3, fp
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	9304      	str	r3, [sp, #16]
 8003bdc:	bfb8      	it	lt
 8003bde:	2301      	movlt	r3, #1
 8003be0:	69e0      	ldr	r0, [r4, #28]
 8003be2:	2100      	movs	r1, #0
 8003be4:	2204      	movs	r2, #4
 8003be6:	f102 0614 	add.w	r6, r2, #20
 8003bea:	429e      	cmp	r6, r3
 8003bec:	d93d      	bls.n	8003c6a <_dtoa_r+0x31a>
 8003bee:	6041      	str	r1, [r0, #4]
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	f000 fd9f 	bl	8004734 <_Balloc>
 8003bf6:	9000      	str	r0, [sp, #0]
 8003bf8:	2800      	cmp	r0, #0
 8003bfa:	d139      	bne.n	8003c70 <_dtoa_r+0x320>
 8003bfc:	4b16      	ldr	r3, [pc, #88]	; (8003c58 <_dtoa_r+0x308>)
 8003bfe:	4602      	mov	r2, r0
 8003c00:	f240 11af 	movw	r1, #431	; 0x1af
 8003c04:	e6bd      	b.n	8003982 <_dtoa_r+0x32>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e7e1      	b.n	8003bce <_dtoa_r+0x27e>
 8003c0a:	2501      	movs	r5, #1
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	9307      	str	r3, [sp, #28]
 8003c10:	9509      	str	r5, [sp, #36]	; 0x24
 8003c12:	f04f 33ff 	mov.w	r3, #4294967295
 8003c16:	9301      	str	r3, [sp, #4]
 8003c18:	9304      	str	r3, [sp, #16]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2312      	movs	r3, #18
 8003c1e:	e7d1      	b.n	8003bc4 <_dtoa_r+0x274>
 8003c20:	636f4361 	.word	0x636f4361
 8003c24:	3fd287a7 	.word	0x3fd287a7
 8003c28:	8b60c8b3 	.word	0x8b60c8b3
 8003c2c:	3fc68a28 	.word	0x3fc68a28
 8003c30:	509f79fb 	.word	0x509f79fb
 8003c34:	3fd34413 	.word	0x3fd34413
 8003c38:	08005b80 	.word	0x08005b80
 8003c3c:	08005b97 	.word	0x08005b97
 8003c40:	7ff00000 	.word	0x7ff00000
 8003c44:	08005b7c 	.word	0x08005b7c
 8003c48:	08005b73 	.word	0x08005b73
 8003c4c:	08005b50 	.word	0x08005b50
 8003c50:	3ff80000 	.word	0x3ff80000
 8003c54:	08005c88 	.word	0x08005c88
 8003c58:	08005bef 	.word	0x08005bef
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8003c60:	e7d7      	b.n	8003c12 <_dtoa_r+0x2c2>
 8003c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c64:	9301      	str	r3, [sp, #4]
 8003c66:	9304      	str	r3, [sp, #16]
 8003c68:	e7ba      	b.n	8003be0 <_dtoa_r+0x290>
 8003c6a:	3101      	adds	r1, #1
 8003c6c:	0052      	lsls	r2, r2, #1
 8003c6e:	e7ba      	b.n	8003be6 <_dtoa_r+0x296>
 8003c70:	69e3      	ldr	r3, [r4, #28]
 8003c72:	9a00      	ldr	r2, [sp, #0]
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	9b04      	ldr	r3, [sp, #16]
 8003c78:	2b0e      	cmp	r3, #14
 8003c7a:	f200 80a8 	bhi.w	8003dce <_dtoa_r+0x47e>
 8003c7e:	2d00      	cmp	r5, #0
 8003c80:	f000 80a5 	beq.w	8003dce <_dtoa_r+0x47e>
 8003c84:	f1bb 0f00 	cmp.w	fp, #0
 8003c88:	dd38      	ble.n	8003cfc <_dtoa_r+0x3ac>
 8003c8a:	4bc0      	ldr	r3, [pc, #768]	; (8003f8c <_dtoa_r+0x63c>)
 8003c8c:	f00b 020f 	and.w	r2, fp, #15
 8003c90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003c98:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003c9c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8003ca0:	d019      	beq.n	8003cd6 <_dtoa_r+0x386>
 8003ca2:	4bbb      	ldr	r3, [pc, #748]	; (8003f90 <_dtoa_r+0x640>)
 8003ca4:	ec51 0b18 	vmov	r0, r1, d8
 8003ca8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003cac:	f7fc fdce 	bl	800084c <__aeabi_ddiv>
 8003cb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003cb4:	f008 080f 	and.w	r8, r8, #15
 8003cb8:	2503      	movs	r5, #3
 8003cba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8003f90 <_dtoa_r+0x640>
 8003cbe:	f1b8 0f00 	cmp.w	r8, #0
 8003cc2:	d10a      	bne.n	8003cda <_dtoa_r+0x38a>
 8003cc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cc8:	4632      	mov	r2, r6
 8003cca:	463b      	mov	r3, r7
 8003ccc:	f7fc fdbe 	bl	800084c <__aeabi_ddiv>
 8003cd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003cd4:	e02b      	b.n	8003d2e <_dtoa_r+0x3de>
 8003cd6:	2502      	movs	r5, #2
 8003cd8:	e7ef      	b.n	8003cba <_dtoa_r+0x36a>
 8003cda:	f018 0f01 	tst.w	r8, #1
 8003cde:	d008      	beq.n	8003cf2 <_dtoa_r+0x3a2>
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	4639      	mov	r1, r7
 8003ce4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003ce8:	f7fc fc86 	bl	80005f8 <__aeabi_dmul>
 8003cec:	3501      	adds	r5, #1
 8003cee:	4606      	mov	r6, r0
 8003cf0:	460f      	mov	r7, r1
 8003cf2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003cf6:	f109 0908 	add.w	r9, r9, #8
 8003cfa:	e7e0      	b.n	8003cbe <_dtoa_r+0x36e>
 8003cfc:	f000 809f 	beq.w	8003e3e <_dtoa_r+0x4ee>
 8003d00:	f1cb 0600 	rsb	r6, fp, #0
 8003d04:	4ba1      	ldr	r3, [pc, #644]	; (8003f8c <_dtoa_r+0x63c>)
 8003d06:	4fa2      	ldr	r7, [pc, #648]	; (8003f90 <_dtoa_r+0x640>)
 8003d08:	f006 020f 	and.w	r2, r6, #15
 8003d0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	ec51 0b18 	vmov	r0, r1, d8
 8003d18:	f7fc fc6e 	bl	80005f8 <__aeabi_dmul>
 8003d1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d20:	1136      	asrs	r6, r6, #4
 8003d22:	2300      	movs	r3, #0
 8003d24:	2502      	movs	r5, #2
 8003d26:	2e00      	cmp	r6, #0
 8003d28:	d17e      	bne.n	8003e28 <_dtoa_r+0x4d8>
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1d0      	bne.n	8003cd0 <_dtoa_r+0x380>
 8003d2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d30:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 8084 	beq.w	8003e42 <_dtoa_r+0x4f2>
 8003d3a:	4b96      	ldr	r3, [pc, #600]	; (8003f94 <_dtoa_r+0x644>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	4640      	mov	r0, r8
 8003d40:	4649      	mov	r1, r9
 8003d42:	f7fc fecb 	bl	8000adc <__aeabi_dcmplt>
 8003d46:	2800      	cmp	r0, #0
 8003d48:	d07b      	beq.n	8003e42 <_dtoa_r+0x4f2>
 8003d4a:	9b04      	ldr	r3, [sp, #16]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d078      	beq.n	8003e42 <_dtoa_r+0x4f2>
 8003d50:	9b01      	ldr	r3, [sp, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	dd39      	ble.n	8003dca <_dtoa_r+0x47a>
 8003d56:	4b90      	ldr	r3, [pc, #576]	; (8003f98 <_dtoa_r+0x648>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	4640      	mov	r0, r8
 8003d5c:	4649      	mov	r1, r9
 8003d5e:	f7fc fc4b 	bl	80005f8 <__aeabi_dmul>
 8003d62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d66:	9e01      	ldr	r6, [sp, #4]
 8003d68:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003d6c:	3501      	adds	r5, #1
 8003d6e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003d72:	4628      	mov	r0, r5
 8003d74:	f7fc fbd6 	bl	8000524 <__aeabi_i2d>
 8003d78:	4642      	mov	r2, r8
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	f7fc fc3c 	bl	80005f8 <__aeabi_dmul>
 8003d80:	4b86      	ldr	r3, [pc, #536]	; (8003f9c <_dtoa_r+0x64c>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	f7fc fa82 	bl	800028c <__adddf3>
 8003d88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8003d8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d90:	9303      	str	r3, [sp, #12]
 8003d92:	2e00      	cmp	r6, #0
 8003d94:	d158      	bne.n	8003e48 <_dtoa_r+0x4f8>
 8003d96:	4b82      	ldr	r3, [pc, #520]	; (8003fa0 <_dtoa_r+0x650>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	4640      	mov	r0, r8
 8003d9c:	4649      	mov	r1, r9
 8003d9e:	f7fc fa73 	bl	8000288 <__aeabi_dsub>
 8003da2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003da6:	4680      	mov	r8, r0
 8003da8:	4689      	mov	r9, r1
 8003daa:	f7fc feb5 	bl	8000b18 <__aeabi_dcmpgt>
 8003dae:	2800      	cmp	r0, #0
 8003db0:	f040 8296 	bne.w	80042e0 <_dtoa_r+0x990>
 8003db4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8003db8:	4640      	mov	r0, r8
 8003dba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003dbe:	4649      	mov	r1, r9
 8003dc0:	f7fc fe8c 	bl	8000adc <__aeabi_dcmplt>
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	f040 8289 	bne.w	80042dc <_dtoa_r+0x98c>
 8003dca:	ed8d 8b02 	vstr	d8, [sp, #8]
 8003dce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f2c0 814e 	blt.w	8004072 <_dtoa_r+0x722>
 8003dd6:	f1bb 0f0e 	cmp.w	fp, #14
 8003dda:	f300 814a 	bgt.w	8004072 <_dtoa_r+0x722>
 8003dde:	4b6b      	ldr	r3, [pc, #428]	; (8003f8c <_dtoa_r+0x63c>)
 8003de0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003de4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f280 80dc 	bge.w	8003fa8 <_dtoa_r+0x658>
 8003df0:	9b04      	ldr	r3, [sp, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f300 80d8 	bgt.w	8003fa8 <_dtoa_r+0x658>
 8003df8:	f040 826f 	bne.w	80042da <_dtoa_r+0x98a>
 8003dfc:	4b68      	ldr	r3, [pc, #416]	; (8003fa0 <_dtoa_r+0x650>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	4640      	mov	r0, r8
 8003e02:	4649      	mov	r1, r9
 8003e04:	f7fc fbf8 	bl	80005f8 <__aeabi_dmul>
 8003e08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e0c:	f7fc fe7a 	bl	8000b04 <__aeabi_dcmpge>
 8003e10:	9e04      	ldr	r6, [sp, #16]
 8003e12:	4637      	mov	r7, r6
 8003e14:	2800      	cmp	r0, #0
 8003e16:	f040 8245 	bne.w	80042a4 <_dtoa_r+0x954>
 8003e1a:	9d00      	ldr	r5, [sp, #0]
 8003e1c:	2331      	movs	r3, #49	; 0x31
 8003e1e:	f805 3b01 	strb.w	r3, [r5], #1
 8003e22:	f10b 0b01 	add.w	fp, fp, #1
 8003e26:	e241      	b.n	80042ac <_dtoa_r+0x95c>
 8003e28:	07f2      	lsls	r2, r6, #31
 8003e2a:	d505      	bpl.n	8003e38 <_dtoa_r+0x4e8>
 8003e2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e30:	f7fc fbe2 	bl	80005f8 <__aeabi_dmul>
 8003e34:	3501      	adds	r5, #1
 8003e36:	2301      	movs	r3, #1
 8003e38:	1076      	asrs	r6, r6, #1
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	e773      	b.n	8003d26 <_dtoa_r+0x3d6>
 8003e3e:	2502      	movs	r5, #2
 8003e40:	e775      	b.n	8003d2e <_dtoa_r+0x3de>
 8003e42:	9e04      	ldr	r6, [sp, #16]
 8003e44:	465f      	mov	r7, fp
 8003e46:	e792      	b.n	8003d6e <_dtoa_r+0x41e>
 8003e48:	9900      	ldr	r1, [sp, #0]
 8003e4a:	4b50      	ldr	r3, [pc, #320]	; (8003f8c <_dtoa_r+0x63c>)
 8003e4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003e50:	4431      	add	r1, r6
 8003e52:	9102      	str	r1, [sp, #8]
 8003e54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003e56:	eeb0 9a47 	vmov.f32	s18, s14
 8003e5a:	eef0 9a67 	vmov.f32	s19, s15
 8003e5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003e62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003e66:	2900      	cmp	r1, #0
 8003e68:	d044      	beq.n	8003ef4 <_dtoa_r+0x5a4>
 8003e6a:	494e      	ldr	r1, [pc, #312]	; (8003fa4 <_dtoa_r+0x654>)
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	f7fc fced 	bl	800084c <__aeabi_ddiv>
 8003e72:	ec53 2b19 	vmov	r2, r3, d9
 8003e76:	f7fc fa07 	bl	8000288 <__aeabi_dsub>
 8003e7a:	9d00      	ldr	r5, [sp, #0]
 8003e7c:	ec41 0b19 	vmov	d9, r0, r1
 8003e80:	4649      	mov	r1, r9
 8003e82:	4640      	mov	r0, r8
 8003e84:	f7fc fe68 	bl	8000b58 <__aeabi_d2iz>
 8003e88:	4606      	mov	r6, r0
 8003e8a:	f7fc fb4b 	bl	8000524 <__aeabi_i2d>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	4640      	mov	r0, r8
 8003e94:	4649      	mov	r1, r9
 8003e96:	f7fc f9f7 	bl	8000288 <__aeabi_dsub>
 8003e9a:	3630      	adds	r6, #48	; 0x30
 8003e9c:	f805 6b01 	strb.w	r6, [r5], #1
 8003ea0:	ec53 2b19 	vmov	r2, r3, d9
 8003ea4:	4680      	mov	r8, r0
 8003ea6:	4689      	mov	r9, r1
 8003ea8:	f7fc fe18 	bl	8000adc <__aeabi_dcmplt>
 8003eac:	2800      	cmp	r0, #0
 8003eae:	d164      	bne.n	8003f7a <_dtoa_r+0x62a>
 8003eb0:	4642      	mov	r2, r8
 8003eb2:	464b      	mov	r3, r9
 8003eb4:	4937      	ldr	r1, [pc, #220]	; (8003f94 <_dtoa_r+0x644>)
 8003eb6:	2000      	movs	r0, #0
 8003eb8:	f7fc f9e6 	bl	8000288 <__aeabi_dsub>
 8003ebc:	ec53 2b19 	vmov	r2, r3, d9
 8003ec0:	f7fc fe0c 	bl	8000adc <__aeabi_dcmplt>
 8003ec4:	2800      	cmp	r0, #0
 8003ec6:	f040 80b6 	bne.w	8004036 <_dtoa_r+0x6e6>
 8003eca:	9b02      	ldr	r3, [sp, #8]
 8003ecc:	429d      	cmp	r5, r3
 8003ece:	f43f af7c 	beq.w	8003dca <_dtoa_r+0x47a>
 8003ed2:	4b31      	ldr	r3, [pc, #196]	; (8003f98 <_dtoa_r+0x648>)
 8003ed4:	ec51 0b19 	vmov	r0, r1, d9
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f7fc fb8d 	bl	80005f8 <__aeabi_dmul>
 8003ede:	4b2e      	ldr	r3, [pc, #184]	; (8003f98 <_dtoa_r+0x648>)
 8003ee0:	ec41 0b19 	vmov	d9, r0, r1
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	4640      	mov	r0, r8
 8003ee8:	4649      	mov	r1, r9
 8003eea:	f7fc fb85 	bl	80005f8 <__aeabi_dmul>
 8003eee:	4680      	mov	r8, r0
 8003ef0:	4689      	mov	r9, r1
 8003ef2:	e7c5      	b.n	8003e80 <_dtoa_r+0x530>
 8003ef4:	ec51 0b17 	vmov	r0, r1, d7
 8003ef8:	f7fc fb7e 	bl	80005f8 <__aeabi_dmul>
 8003efc:	9b02      	ldr	r3, [sp, #8]
 8003efe:	9d00      	ldr	r5, [sp, #0]
 8003f00:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f02:	ec41 0b19 	vmov	d9, r0, r1
 8003f06:	4649      	mov	r1, r9
 8003f08:	4640      	mov	r0, r8
 8003f0a:	f7fc fe25 	bl	8000b58 <__aeabi_d2iz>
 8003f0e:	4606      	mov	r6, r0
 8003f10:	f7fc fb08 	bl	8000524 <__aeabi_i2d>
 8003f14:	3630      	adds	r6, #48	; 0x30
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4640      	mov	r0, r8
 8003f1c:	4649      	mov	r1, r9
 8003f1e:	f7fc f9b3 	bl	8000288 <__aeabi_dsub>
 8003f22:	f805 6b01 	strb.w	r6, [r5], #1
 8003f26:	9b02      	ldr	r3, [sp, #8]
 8003f28:	429d      	cmp	r5, r3
 8003f2a:	4680      	mov	r8, r0
 8003f2c:	4689      	mov	r9, r1
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	d124      	bne.n	8003f7e <_dtoa_r+0x62e>
 8003f34:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <_dtoa_r+0x654>)
 8003f36:	ec51 0b19 	vmov	r0, r1, d9
 8003f3a:	f7fc f9a7 	bl	800028c <__adddf3>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4640      	mov	r0, r8
 8003f44:	4649      	mov	r1, r9
 8003f46:	f7fc fde7 	bl	8000b18 <__aeabi_dcmpgt>
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d173      	bne.n	8004036 <_dtoa_r+0x6e6>
 8003f4e:	ec53 2b19 	vmov	r2, r3, d9
 8003f52:	4914      	ldr	r1, [pc, #80]	; (8003fa4 <_dtoa_r+0x654>)
 8003f54:	2000      	movs	r0, #0
 8003f56:	f7fc f997 	bl	8000288 <__aeabi_dsub>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4640      	mov	r0, r8
 8003f60:	4649      	mov	r1, r9
 8003f62:	f7fc fdbb 	bl	8000adc <__aeabi_dcmplt>
 8003f66:	2800      	cmp	r0, #0
 8003f68:	f43f af2f 	beq.w	8003dca <_dtoa_r+0x47a>
 8003f6c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003f6e:	1e6b      	subs	r3, r5, #1
 8003f70:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003f76:	2b30      	cmp	r3, #48	; 0x30
 8003f78:	d0f8      	beq.n	8003f6c <_dtoa_r+0x61c>
 8003f7a:	46bb      	mov	fp, r7
 8003f7c:	e04a      	b.n	8004014 <_dtoa_r+0x6c4>
 8003f7e:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <_dtoa_r+0x648>)
 8003f80:	f7fc fb3a 	bl	80005f8 <__aeabi_dmul>
 8003f84:	4680      	mov	r8, r0
 8003f86:	4689      	mov	r9, r1
 8003f88:	e7bd      	b.n	8003f06 <_dtoa_r+0x5b6>
 8003f8a:	bf00      	nop
 8003f8c:	08005c88 	.word	0x08005c88
 8003f90:	08005c60 	.word	0x08005c60
 8003f94:	3ff00000 	.word	0x3ff00000
 8003f98:	40240000 	.word	0x40240000
 8003f9c:	401c0000 	.word	0x401c0000
 8003fa0:	40140000 	.word	0x40140000
 8003fa4:	3fe00000 	.word	0x3fe00000
 8003fa8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003fac:	9d00      	ldr	r5, [sp, #0]
 8003fae:	4642      	mov	r2, r8
 8003fb0:	464b      	mov	r3, r9
 8003fb2:	4630      	mov	r0, r6
 8003fb4:	4639      	mov	r1, r7
 8003fb6:	f7fc fc49 	bl	800084c <__aeabi_ddiv>
 8003fba:	f7fc fdcd 	bl	8000b58 <__aeabi_d2iz>
 8003fbe:	9001      	str	r0, [sp, #4]
 8003fc0:	f7fc fab0 	bl	8000524 <__aeabi_i2d>
 8003fc4:	4642      	mov	r2, r8
 8003fc6:	464b      	mov	r3, r9
 8003fc8:	f7fc fb16 	bl	80005f8 <__aeabi_dmul>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4630      	mov	r0, r6
 8003fd2:	4639      	mov	r1, r7
 8003fd4:	f7fc f958 	bl	8000288 <__aeabi_dsub>
 8003fd8:	9e01      	ldr	r6, [sp, #4]
 8003fda:	9f04      	ldr	r7, [sp, #16]
 8003fdc:	3630      	adds	r6, #48	; 0x30
 8003fde:	f805 6b01 	strb.w	r6, [r5], #1
 8003fe2:	9e00      	ldr	r6, [sp, #0]
 8003fe4:	1bae      	subs	r6, r5, r6
 8003fe6:	42b7      	cmp	r7, r6
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	d134      	bne.n	8004058 <_dtoa_r+0x708>
 8003fee:	f7fc f94d 	bl	800028c <__adddf3>
 8003ff2:	4642      	mov	r2, r8
 8003ff4:	464b      	mov	r3, r9
 8003ff6:	4606      	mov	r6, r0
 8003ff8:	460f      	mov	r7, r1
 8003ffa:	f7fc fd8d 	bl	8000b18 <__aeabi_dcmpgt>
 8003ffe:	b9c8      	cbnz	r0, 8004034 <_dtoa_r+0x6e4>
 8004000:	4642      	mov	r2, r8
 8004002:	464b      	mov	r3, r9
 8004004:	4630      	mov	r0, r6
 8004006:	4639      	mov	r1, r7
 8004008:	f7fc fd5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800400c:	b110      	cbz	r0, 8004014 <_dtoa_r+0x6c4>
 800400e:	9b01      	ldr	r3, [sp, #4]
 8004010:	07db      	lsls	r3, r3, #31
 8004012:	d40f      	bmi.n	8004034 <_dtoa_r+0x6e4>
 8004014:	4651      	mov	r1, sl
 8004016:	4620      	mov	r0, r4
 8004018:	f000 fbcc 	bl	80047b4 <_Bfree>
 800401c:	2300      	movs	r3, #0
 800401e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004020:	702b      	strb	r3, [r5, #0]
 8004022:	f10b 0301 	add.w	r3, fp, #1
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800402a:	2b00      	cmp	r3, #0
 800402c:	f43f ace2 	beq.w	80039f4 <_dtoa_r+0xa4>
 8004030:	601d      	str	r5, [r3, #0]
 8004032:	e4df      	b.n	80039f4 <_dtoa_r+0xa4>
 8004034:	465f      	mov	r7, fp
 8004036:	462b      	mov	r3, r5
 8004038:	461d      	mov	r5, r3
 800403a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800403e:	2a39      	cmp	r2, #57	; 0x39
 8004040:	d106      	bne.n	8004050 <_dtoa_r+0x700>
 8004042:	9a00      	ldr	r2, [sp, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d1f7      	bne.n	8004038 <_dtoa_r+0x6e8>
 8004048:	9900      	ldr	r1, [sp, #0]
 800404a:	2230      	movs	r2, #48	; 0x30
 800404c:	3701      	adds	r7, #1
 800404e:	700a      	strb	r2, [r1, #0]
 8004050:	781a      	ldrb	r2, [r3, #0]
 8004052:	3201      	adds	r2, #1
 8004054:	701a      	strb	r2, [r3, #0]
 8004056:	e790      	b.n	8003f7a <_dtoa_r+0x62a>
 8004058:	4ba3      	ldr	r3, [pc, #652]	; (80042e8 <_dtoa_r+0x998>)
 800405a:	2200      	movs	r2, #0
 800405c:	f7fc facc 	bl	80005f8 <__aeabi_dmul>
 8004060:	2200      	movs	r2, #0
 8004062:	2300      	movs	r3, #0
 8004064:	4606      	mov	r6, r0
 8004066:	460f      	mov	r7, r1
 8004068:	f7fc fd2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800406c:	2800      	cmp	r0, #0
 800406e:	d09e      	beq.n	8003fae <_dtoa_r+0x65e>
 8004070:	e7d0      	b.n	8004014 <_dtoa_r+0x6c4>
 8004072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004074:	2a00      	cmp	r2, #0
 8004076:	f000 80ca 	beq.w	800420e <_dtoa_r+0x8be>
 800407a:	9a07      	ldr	r2, [sp, #28]
 800407c:	2a01      	cmp	r2, #1
 800407e:	f300 80ad 	bgt.w	80041dc <_dtoa_r+0x88c>
 8004082:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004084:	2a00      	cmp	r2, #0
 8004086:	f000 80a5 	beq.w	80041d4 <_dtoa_r+0x884>
 800408a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800408e:	9e08      	ldr	r6, [sp, #32]
 8004090:	9d05      	ldr	r5, [sp, #20]
 8004092:	9a05      	ldr	r2, [sp, #20]
 8004094:	441a      	add	r2, r3
 8004096:	9205      	str	r2, [sp, #20]
 8004098:	9a06      	ldr	r2, [sp, #24]
 800409a:	2101      	movs	r1, #1
 800409c:	441a      	add	r2, r3
 800409e:	4620      	mov	r0, r4
 80040a0:	9206      	str	r2, [sp, #24]
 80040a2:	f000 fc3d 	bl	8004920 <__i2b>
 80040a6:	4607      	mov	r7, r0
 80040a8:	b165      	cbz	r5, 80040c4 <_dtoa_r+0x774>
 80040aa:	9b06      	ldr	r3, [sp, #24]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	dd09      	ble.n	80040c4 <_dtoa_r+0x774>
 80040b0:	42ab      	cmp	r3, r5
 80040b2:	9a05      	ldr	r2, [sp, #20]
 80040b4:	bfa8      	it	ge
 80040b6:	462b      	movge	r3, r5
 80040b8:	1ad2      	subs	r2, r2, r3
 80040ba:	9205      	str	r2, [sp, #20]
 80040bc:	9a06      	ldr	r2, [sp, #24]
 80040be:	1aed      	subs	r5, r5, r3
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	9306      	str	r3, [sp, #24]
 80040c4:	9b08      	ldr	r3, [sp, #32]
 80040c6:	b1f3      	cbz	r3, 8004106 <_dtoa_r+0x7b6>
 80040c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 80a3 	beq.w	8004216 <_dtoa_r+0x8c6>
 80040d0:	2e00      	cmp	r6, #0
 80040d2:	dd10      	ble.n	80040f6 <_dtoa_r+0x7a6>
 80040d4:	4639      	mov	r1, r7
 80040d6:	4632      	mov	r2, r6
 80040d8:	4620      	mov	r0, r4
 80040da:	f000 fce1 	bl	8004aa0 <__pow5mult>
 80040de:	4652      	mov	r2, sl
 80040e0:	4601      	mov	r1, r0
 80040e2:	4607      	mov	r7, r0
 80040e4:	4620      	mov	r0, r4
 80040e6:	f000 fc31 	bl	800494c <__multiply>
 80040ea:	4651      	mov	r1, sl
 80040ec:	4680      	mov	r8, r0
 80040ee:	4620      	mov	r0, r4
 80040f0:	f000 fb60 	bl	80047b4 <_Bfree>
 80040f4:	46c2      	mov	sl, r8
 80040f6:	9b08      	ldr	r3, [sp, #32]
 80040f8:	1b9a      	subs	r2, r3, r6
 80040fa:	d004      	beq.n	8004106 <_dtoa_r+0x7b6>
 80040fc:	4651      	mov	r1, sl
 80040fe:	4620      	mov	r0, r4
 8004100:	f000 fcce 	bl	8004aa0 <__pow5mult>
 8004104:	4682      	mov	sl, r0
 8004106:	2101      	movs	r1, #1
 8004108:	4620      	mov	r0, r4
 800410a:	f000 fc09 	bl	8004920 <__i2b>
 800410e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004110:	2b00      	cmp	r3, #0
 8004112:	4606      	mov	r6, r0
 8004114:	f340 8081 	ble.w	800421a <_dtoa_r+0x8ca>
 8004118:	461a      	mov	r2, r3
 800411a:	4601      	mov	r1, r0
 800411c:	4620      	mov	r0, r4
 800411e:	f000 fcbf 	bl	8004aa0 <__pow5mult>
 8004122:	9b07      	ldr	r3, [sp, #28]
 8004124:	2b01      	cmp	r3, #1
 8004126:	4606      	mov	r6, r0
 8004128:	dd7a      	ble.n	8004220 <_dtoa_r+0x8d0>
 800412a:	f04f 0800 	mov.w	r8, #0
 800412e:	6933      	ldr	r3, [r6, #16]
 8004130:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004134:	6918      	ldr	r0, [r3, #16]
 8004136:	f000 fba5 	bl	8004884 <__hi0bits>
 800413a:	f1c0 0020 	rsb	r0, r0, #32
 800413e:	9b06      	ldr	r3, [sp, #24]
 8004140:	4418      	add	r0, r3
 8004142:	f010 001f 	ands.w	r0, r0, #31
 8004146:	f000 8094 	beq.w	8004272 <_dtoa_r+0x922>
 800414a:	f1c0 0320 	rsb	r3, r0, #32
 800414e:	2b04      	cmp	r3, #4
 8004150:	f340 8085 	ble.w	800425e <_dtoa_r+0x90e>
 8004154:	9b05      	ldr	r3, [sp, #20]
 8004156:	f1c0 001c 	rsb	r0, r0, #28
 800415a:	4403      	add	r3, r0
 800415c:	9305      	str	r3, [sp, #20]
 800415e:	9b06      	ldr	r3, [sp, #24]
 8004160:	4403      	add	r3, r0
 8004162:	4405      	add	r5, r0
 8004164:	9306      	str	r3, [sp, #24]
 8004166:	9b05      	ldr	r3, [sp, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	dd05      	ble.n	8004178 <_dtoa_r+0x828>
 800416c:	4651      	mov	r1, sl
 800416e:	461a      	mov	r2, r3
 8004170:	4620      	mov	r0, r4
 8004172:	f000 fcef 	bl	8004b54 <__lshift>
 8004176:	4682      	mov	sl, r0
 8004178:	9b06      	ldr	r3, [sp, #24]
 800417a:	2b00      	cmp	r3, #0
 800417c:	dd05      	ble.n	800418a <_dtoa_r+0x83a>
 800417e:	4631      	mov	r1, r6
 8004180:	461a      	mov	r2, r3
 8004182:	4620      	mov	r0, r4
 8004184:	f000 fce6 	bl	8004b54 <__lshift>
 8004188:	4606      	mov	r6, r0
 800418a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800418c:	2b00      	cmp	r3, #0
 800418e:	d072      	beq.n	8004276 <_dtoa_r+0x926>
 8004190:	4631      	mov	r1, r6
 8004192:	4650      	mov	r0, sl
 8004194:	f000 fd4a 	bl	8004c2c <__mcmp>
 8004198:	2800      	cmp	r0, #0
 800419a:	da6c      	bge.n	8004276 <_dtoa_r+0x926>
 800419c:	2300      	movs	r3, #0
 800419e:	4651      	mov	r1, sl
 80041a0:	220a      	movs	r2, #10
 80041a2:	4620      	mov	r0, r4
 80041a4:	f000 fb28 	bl	80047f8 <__multadd>
 80041a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80041ae:	4682      	mov	sl, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 81b0 	beq.w	8004516 <_dtoa_r+0xbc6>
 80041b6:	2300      	movs	r3, #0
 80041b8:	4639      	mov	r1, r7
 80041ba:	220a      	movs	r2, #10
 80041bc:	4620      	mov	r0, r4
 80041be:	f000 fb1b 	bl	80047f8 <__multadd>
 80041c2:	9b01      	ldr	r3, [sp, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	4607      	mov	r7, r0
 80041c8:	f300 8096 	bgt.w	80042f8 <_dtoa_r+0x9a8>
 80041cc:	9b07      	ldr	r3, [sp, #28]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	dc59      	bgt.n	8004286 <_dtoa_r+0x936>
 80041d2:	e091      	b.n	80042f8 <_dtoa_r+0x9a8>
 80041d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80041d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80041da:	e758      	b.n	800408e <_dtoa_r+0x73e>
 80041dc:	9b04      	ldr	r3, [sp, #16]
 80041de:	1e5e      	subs	r6, r3, #1
 80041e0:	9b08      	ldr	r3, [sp, #32]
 80041e2:	42b3      	cmp	r3, r6
 80041e4:	bfbf      	itttt	lt
 80041e6:	9b08      	ldrlt	r3, [sp, #32]
 80041e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80041ea:	9608      	strlt	r6, [sp, #32]
 80041ec:	1af3      	sublt	r3, r6, r3
 80041ee:	bfb4      	ite	lt
 80041f0:	18d2      	addlt	r2, r2, r3
 80041f2:	1b9e      	subge	r6, r3, r6
 80041f4:	9b04      	ldr	r3, [sp, #16]
 80041f6:	bfbc      	itt	lt
 80041f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80041fa:	2600      	movlt	r6, #0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bfb7      	itett	lt
 8004200:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8004204:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004208:	1a9d      	sublt	r5, r3, r2
 800420a:	2300      	movlt	r3, #0
 800420c:	e741      	b.n	8004092 <_dtoa_r+0x742>
 800420e:	9e08      	ldr	r6, [sp, #32]
 8004210:	9d05      	ldr	r5, [sp, #20]
 8004212:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004214:	e748      	b.n	80040a8 <_dtoa_r+0x758>
 8004216:	9a08      	ldr	r2, [sp, #32]
 8004218:	e770      	b.n	80040fc <_dtoa_r+0x7ac>
 800421a:	9b07      	ldr	r3, [sp, #28]
 800421c:	2b01      	cmp	r3, #1
 800421e:	dc19      	bgt.n	8004254 <_dtoa_r+0x904>
 8004220:	9b02      	ldr	r3, [sp, #8]
 8004222:	b9bb      	cbnz	r3, 8004254 <_dtoa_r+0x904>
 8004224:	9b03      	ldr	r3, [sp, #12]
 8004226:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800422a:	b99b      	cbnz	r3, 8004254 <_dtoa_r+0x904>
 800422c:	9b03      	ldr	r3, [sp, #12]
 800422e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004232:	0d1b      	lsrs	r3, r3, #20
 8004234:	051b      	lsls	r3, r3, #20
 8004236:	b183      	cbz	r3, 800425a <_dtoa_r+0x90a>
 8004238:	9b05      	ldr	r3, [sp, #20]
 800423a:	3301      	adds	r3, #1
 800423c:	9305      	str	r3, [sp, #20]
 800423e:	9b06      	ldr	r3, [sp, #24]
 8004240:	3301      	adds	r3, #1
 8004242:	9306      	str	r3, [sp, #24]
 8004244:	f04f 0801 	mov.w	r8, #1
 8004248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800424a:	2b00      	cmp	r3, #0
 800424c:	f47f af6f 	bne.w	800412e <_dtoa_r+0x7de>
 8004250:	2001      	movs	r0, #1
 8004252:	e774      	b.n	800413e <_dtoa_r+0x7ee>
 8004254:	f04f 0800 	mov.w	r8, #0
 8004258:	e7f6      	b.n	8004248 <_dtoa_r+0x8f8>
 800425a:	4698      	mov	r8, r3
 800425c:	e7f4      	b.n	8004248 <_dtoa_r+0x8f8>
 800425e:	d082      	beq.n	8004166 <_dtoa_r+0x816>
 8004260:	9a05      	ldr	r2, [sp, #20]
 8004262:	331c      	adds	r3, #28
 8004264:	441a      	add	r2, r3
 8004266:	9205      	str	r2, [sp, #20]
 8004268:	9a06      	ldr	r2, [sp, #24]
 800426a:	441a      	add	r2, r3
 800426c:	441d      	add	r5, r3
 800426e:	9206      	str	r2, [sp, #24]
 8004270:	e779      	b.n	8004166 <_dtoa_r+0x816>
 8004272:	4603      	mov	r3, r0
 8004274:	e7f4      	b.n	8004260 <_dtoa_r+0x910>
 8004276:	9b04      	ldr	r3, [sp, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	dc37      	bgt.n	80042ec <_dtoa_r+0x99c>
 800427c:	9b07      	ldr	r3, [sp, #28]
 800427e:	2b02      	cmp	r3, #2
 8004280:	dd34      	ble.n	80042ec <_dtoa_r+0x99c>
 8004282:	9b04      	ldr	r3, [sp, #16]
 8004284:	9301      	str	r3, [sp, #4]
 8004286:	9b01      	ldr	r3, [sp, #4]
 8004288:	b963      	cbnz	r3, 80042a4 <_dtoa_r+0x954>
 800428a:	4631      	mov	r1, r6
 800428c:	2205      	movs	r2, #5
 800428e:	4620      	mov	r0, r4
 8004290:	f000 fab2 	bl	80047f8 <__multadd>
 8004294:	4601      	mov	r1, r0
 8004296:	4606      	mov	r6, r0
 8004298:	4650      	mov	r0, sl
 800429a:	f000 fcc7 	bl	8004c2c <__mcmp>
 800429e:	2800      	cmp	r0, #0
 80042a0:	f73f adbb 	bgt.w	8003e1a <_dtoa_r+0x4ca>
 80042a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042a6:	9d00      	ldr	r5, [sp, #0]
 80042a8:	ea6f 0b03 	mvn.w	fp, r3
 80042ac:	f04f 0800 	mov.w	r8, #0
 80042b0:	4631      	mov	r1, r6
 80042b2:	4620      	mov	r0, r4
 80042b4:	f000 fa7e 	bl	80047b4 <_Bfree>
 80042b8:	2f00      	cmp	r7, #0
 80042ba:	f43f aeab 	beq.w	8004014 <_dtoa_r+0x6c4>
 80042be:	f1b8 0f00 	cmp.w	r8, #0
 80042c2:	d005      	beq.n	80042d0 <_dtoa_r+0x980>
 80042c4:	45b8      	cmp	r8, r7
 80042c6:	d003      	beq.n	80042d0 <_dtoa_r+0x980>
 80042c8:	4641      	mov	r1, r8
 80042ca:	4620      	mov	r0, r4
 80042cc:	f000 fa72 	bl	80047b4 <_Bfree>
 80042d0:	4639      	mov	r1, r7
 80042d2:	4620      	mov	r0, r4
 80042d4:	f000 fa6e 	bl	80047b4 <_Bfree>
 80042d8:	e69c      	b.n	8004014 <_dtoa_r+0x6c4>
 80042da:	2600      	movs	r6, #0
 80042dc:	4637      	mov	r7, r6
 80042de:	e7e1      	b.n	80042a4 <_dtoa_r+0x954>
 80042e0:	46bb      	mov	fp, r7
 80042e2:	4637      	mov	r7, r6
 80042e4:	e599      	b.n	8003e1a <_dtoa_r+0x4ca>
 80042e6:	bf00      	nop
 80042e8:	40240000 	.word	0x40240000
 80042ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 80c8 	beq.w	8004484 <_dtoa_r+0xb34>
 80042f4:	9b04      	ldr	r3, [sp, #16]
 80042f6:	9301      	str	r3, [sp, #4]
 80042f8:	2d00      	cmp	r5, #0
 80042fa:	dd05      	ble.n	8004308 <_dtoa_r+0x9b8>
 80042fc:	4639      	mov	r1, r7
 80042fe:	462a      	mov	r2, r5
 8004300:	4620      	mov	r0, r4
 8004302:	f000 fc27 	bl	8004b54 <__lshift>
 8004306:	4607      	mov	r7, r0
 8004308:	f1b8 0f00 	cmp.w	r8, #0
 800430c:	d05b      	beq.n	80043c6 <_dtoa_r+0xa76>
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4620      	mov	r0, r4
 8004312:	f000 fa0f 	bl	8004734 <_Balloc>
 8004316:	4605      	mov	r5, r0
 8004318:	b928      	cbnz	r0, 8004326 <_dtoa_r+0x9d6>
 800431a:	4b83      	ldr	r3, [pc, #524]	; (8004528 <_dtoa_r+0xbd8>)
 800431c:	4602      	mov	r2, r0
 800431e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004322:	f7ff bb2e 	b.w	8003982 <_dtoa_r+0x32>
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	3202      	adds	r2, #2
 800432a:	0092      	lsls	r2, r2, #2
 800432c:	f107 010c 	add.w	r1, r7, #12
 8004330:	300c      	adds	r0, #12
 8004332:	f7ff fa75 	bl	8003820 <memcpy>
 8004336:	2201      	movs	r2, #1
 8004338:	4629      	mov	r1, r5
 800433a:	4620      	mov	r0, r4
 800433c:	f000 fc0a 	bl	8004b54 <__lshift>
 8004340:	9b00      	ldr	r3, [sp, #0]
 8004342:	3301      	adds	r3, #1
 8004344:	9304      	str	r3, [sp, #16]
 8004346:	e9dd 2300 	ldrd	r2, r3, [sp]
 800434a:	4413      	add	r3, r2
 800434c:	9308      	str	r3, [sp, #32]
 800434e:	9b02      	ldr	r3, [sp, #8]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	46b8      	mov	r8, r7
 8004356:	9306      	str	r3, [sp, #24]
 8004358:	4607      	mov	r7, r0
 800435a:	9b04      	ldr	r3, [sp, #16]
 800435c:	4631      	mov	r1, r6
 800435e:	3b01      	subs	r3, #1
 8004360:	4650      	mov	r0, sl
 8004362:	9301      	str	r3, [sp, #4]
 8004364:	f7ff fa6a 	bl	800383c <quorem>
 8004368:	4641      	mov	r1, r8
 800436a:	9002      	str	r0, [sp, #8]
 800436c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004370:	4650      	mov	r0, sl
 8004372:	f000 fc5b 	bl	8004c2c <__mcmp>
 8004376:	463a      	mov	r2, r7
 8004378:	9005      	str	r0, [sp, #20]
 800437a:	4631      	mov	r1, r6
 800437c:	4620      	mov	r0, r4
 800437e:	f000 fc71 	bl	8004c64 <__mdiff>
 8004382:	68c2      	ldr	r2, [r0, #12]
 8004384:	4605      	mov	r5, r0
 8004386:	bb02      	cbnz	r2, 80043ca <_dtoa_r+0xa7a>
 8004388:	4601      	mov	r1, r0
 800438a:	4650      	mov	r0, sl
 800438c:	f000 fc4e 	bl	8004c2c <__mcmp>
 8004390:	4602      	mov	r2, r0
 8004392:	4629      	mov	r1, r5
 8004394:	4620      	mov	r0, r4
 8004396:	9209      	str	r2, [sp, #36]	; 0x24
 8004398:	f000 fa0c 	bl	80047b4 <_Bfree>
 800439c:	9b07      	ldr	r3, [sp, #28]
 800439e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043a0:	9d04      	ldr	r5, [sp, #16]
 80043a2:	ea43 0102 	orr.w	r1, r3, r2
 80043a6:	9b06      	ldr	r3, [sp, #24]
 80043a8:	4319      	orrs	r1, r3
 80043aa:	d110      	bne.n	80043ce <_dtoa_r+0xa7e>
 80043ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80043b0:	d029      	beq.n	8004406 <_dtoa_r+0xab6>
 80043b2:	9b05      	ldr	r3, [sp, #20]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	dd02      	ble.n	80043be <_dtoa_r+0xa6e>
 80043b8:	9b02      	ldr	r3, [sp, #8]
 80043ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80043be:	9b01      	ldr	r3, [sp, #4]
 80043c0:	f883 9000 	strb.w	r9, [r3]
 80043c4:	e774      	b.n	80042b0 <_dtoa_r+0x960>
 80043c6:	4638      	mov	r0, r7
 80043c8:	e7ba      	b.n	8004340 <_dtoa_r+0x9f0>
 80043ca:	2201      	movs	r2, #1
 80043cc:	e7e1      	b.n	8004392 <_dtoa_r+0xa42>
 80043ce:	9b05      	ldr	r3, [sp, #20]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	db04      	blt.n	80043de <_dtoa_r+0xa8e>
 80043d4:	9907      	ldr	r1, [sp, #28]
 80043d6:	430b      	orrs	r3, r1
 80043d8:	9906      	ldr	r1, [sp, #24]
 80043da:	430b      	orrs	r3, r1
 80043dc:	d120      	bne.n	8004420 <_dtoa_r+0xad0>
 80043de:	2a00      	cmp	r2, #0
 80043e0:	dded      	ble.n	80043be <_dtoa_r+0xa6e>
 80043e2:	4651      	mov	r1, sl
 80043e4:	2201      	movs	r2, #1
 80043e6:	4620      	mov	r0, r4
 80043e8:	f000 fbb4 	bl	8004b54 <__lshift>
 80043ec:	4631      	mov	r1, r6
 80043ee:	4682      	mov	sl, r0
 80043f0:	f000 fc1c 	bl	8004c2c <__mcmp>
 80043f4:	2800      	cmp	r0, #0
 80043f6:	dc03      	bgt.n	8004400 <_dtoa_r+0xab0>
 80043f8:	d1e1      	bne.n	80043be <_dtoa_r+0xa6e>
 80043fa:	f019 0f01 	tst.w	r9, #1
 80043fe:	d0de      	beq.n	80043be <_dtoa_r+0xa6e>
 8004400:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004404:	d1d8      	bne.n	80043b8 <_dtoa_r+0xa68>
 8004406:	9a01      	ldr	r2, [sp, #4]
 8004408:	2339      	movs	r3, #57	; 0x39
 800440a:	7013      	strb	r3, [r2, #0]
 800440c:	462b      	mov	r3, r5
 800440e:	461d      	mov	r5, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004416:	2a39      	cmp	r2, #57	; 0x39
 8004418:	d06c      	beq.n	80044f4 <_dtoa_r+0xba4>
 800441a:	3201      	adds	r2, #1
 800441c:	701a      	strb	r2, [r3, #0]
 800441e:	e747      	b.n	80042b0 <_dtoa_r+0x960>
 8004420:	2a00      	cmp	r2, #0
 8004422:	dd07      	ble.n	8004434 <_dtoa_r+0xae4>
 8004424:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004428:	d0ed      	beq.n	8004406 <_dtoa_r+0xab6>
 800442a:	9a01      	ldr	r2, [sp, #4]
 800442c:	f109 0301 	add.w	r3, r9, #1
 8004430:	7013      	strb	r3, [r2, #0]
 8004432:	e73d      	b.n	80042b0 <_dtoa_r+0x960>
 8004434:	9b04      	ldr	r3, [sp, #16]
 8004436:	9a08      	ldr	r2, [sp, #32]
 8004438:	f803 9c01 	strb.w	r9, [r3, #-1]
 800443c:	4293      	cmp	r3, r2
 800443e:	d043      	beq.n	80044c8 <_dtoa_r+0xb78>
 8004440:	4651      	mov	r1, sl
 8004442:	2300      	movs	r3, #0
 8004444:	220a      	movs	r2, #10
 8004446:	4620      	mov	r0, r4
 8004448:	f000 f9d6 	bl	80047f8 <__multadd>
 800444c:	45b8      	cmp	r8, r7
 800444e:	4682      	mov	sl, r0
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	f04f 020a 	mov.w	r2, #10
 8004458:	4641      	mov	r1, r8
 800445a:	4620      	mov	r0, r4
 800445c:	d107      	bne.n	800446e <_dtoa_r+0xb1e>
 800445e:	f000 f9cb 	bl	80047f8 <__multadd>
 8004462:	4680      	mov	r8, r0
 8004464:	4607      	mov	r7, r0
 8004466:	9b04      	ldr	r3, [sp, #16]
 8004468:	3301      	adds	r3, #1
 800446a:	9304      	str	r3, [sp, #16]
 800446c:	e775      	b.n	800435a <_dtoa_r+0xa0a>
 800446e:	f000 f9c3 	bl	80047f8 <__multadd>
 8004472:	4639      	mov	r1, r7
 8004474:	4680      	mov	r8, r0
 8004476:	2300      	movs	r3, #0
 8004478:	220a      	movs	r2, #10
 800447a:	4620      	mov	r0, r4
 800447c:	f000 f9bc 	bl	80047f8 <__multadd>
 8004480:	4607      	mov	r7, r0
 8004482:	e7f0      	b.n	8004466 <_dtoa_r+0xb16>
 8004484:	9b04      	ldr	r3, [sp, #16]
 8004486:	9301      	str	r3, [sp, #4]
 8004488:	9d00      	ldr	r5, [sp, #0]
 800448a:	4631      	mov	r1, r6
 800448c:	4650      	mov	r0, sl
 800448e:	f7ff f9d5 	bl	800383c <quorem>
 8004492:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004496:	9b00      	ldr	r3, [sp, #0]
 8004498:	f805 9b01 	strb.w	r9, [r5], #1
 800449c:	1aea      	subs	r2, r5, r3
 800449e:	9b01      	ldr	r3, [sp, #4]
 80044a0:	4293      	cmp	r3, r2
 80044a2:	dd07      	ble.n	80044b4 <_dtoa_r+0xb64>
 80044a4:	4651      	mov	r1, sl
 80044a6:	2300      	movs	r3, #0
 80044a8:	220a      	movs	r2, #10
 80044aa:	4620      	mov	r0, r4
 80044ac:	f000 f9a4 	bl	80047f8 <__multadd>
 80044b0:	4682      	mov	sl, r0
 80044b2:	e7ea      	b.n	800448a <_dtoa_r+0xb3a>
 80044b4:	9b01      	ldr	r3, [sp, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	bfc8      	it	gt
 80044ba:	461d      	movgt	r5, r3
 80044bc:	9b00      	ldr	r3, [sp, #0]
 80044be:	bfd8      	it	le
 80044c0:	2501      	movle	r5, #1
 80044c2:	441d      	add	r5, r3
 80044c4:	f04f 0800 	mov.w	r8, #0
 80044c8:	4651      	mov	r1, sl
 80044ca:	2201      	movs	r2, #1
 80044cc:	4620      	mov	r0, r4
 80044ce:	f000 fb41 	bl	8004b54 <__lshift>
 80044d2:	4631      	mov	r1, r6
 80044d4:	4682      	mov	sl, r0
 80044d6:	f000 fba9 	bl	8004c2c <__mcmp>
 80044da:	2800      	cmp	r0, #0
 80044dc:	dc96      	bgt.n	800440c <_dtoa_r+0xabc>
 80044de:	d102      	bne.n	80044e6 <_dtoa_r+0xb96>
 80044e0:	f019 0f01 	tst.w	r9, #1
 80044e4:	d192      	bne.n	800440c <_dtoa_r+0xabc>
 80044e6:	462b      	mov	r3, r5
 80044e8:	461d      	mov	r5, r3
 80044ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80044ee:	2a30      	cmp	r2, #48	; 0x30
 80044f0:	d0fa      	beq.n	80044e8 <_dtoa_r+0xb98>
 80044f2:	e6dd      	b.n	80042b0 <_dtoa_r+0x960>
 80044f4:	9a00      	ldr	r2, [sp, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d189      	bne.n	800440e <_dtoa_r+0xabe>
 80044fa:	f10b 0b01 	add.w	fp, fp, #1
 80044fe:	2331      	movs	r3, #49	; 0x31
 8004500:	e796      	b.n	8004430 <_dtoa_r+0xae0>
 8004502:	4b0a      	ldr	r3, [pc, #40]	; (800452c <_dtoa_r+0xbdc>)
 8004504:	f7ff ba99 	b.w	8003a3a <_dtoa_r+0xea>
 8004508:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800450a:	2b00      	cmp	r3, #0
 800450c:	f47f aa6d 	bne.w	80039ea <_dtoa_r+0x9a>
 8004510:	4b07      	ldr	r3, [pc, #28]	; (8004530 <_dtoa_r+0xbe0>)
 8004512:	f7ff ba92 	b.w	8003a3a <_dtoa_r+0xea>
 8004516:	9b01      	ldr	r3, [sp, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	dcb5      	bgt.n	8004488 <_dtoa_r+0xb38>
 800451c:	9b07      	ldr	r3, [sp, #28]
 800451e:	2b02      	cmp	r3, #2
 8004520:	f73f aeb1 	bgt.w	8004286 <_dtoa_r+0x936>
 8004524:	e7b0      	b.n	8004488 <_dtoa_r+0xb38>
 8004526:	bf00      	nop
 8004528:	08005bef 	.word	0x08005bef
 800452c:	08005b4f 	.word	0x08005b4f
 8004530:	08005b73 	.word	0x08005b73

08004534 <_free_r>:
 8004534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004536:	2900      	cmp	r1, #0
 8004538:	d044      	beq.n	80045c4 <_free_r+0x90>
 800453a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800453e:	9001      	str	r0, [sp, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	f1a1 0404 	sub.w	r4, r1, #4
 8004546:	bfb8      	it	lt
 8004548:	18e4      	addlt	r4, r4, r3
 800454a:	f000 f8e7 	bl	800471c <__malloc_lock>
 800454e:	4a1e      	ldr	r2, [pc, #120]	; (80045c8 <_free_r+0x94>)
 8004550:	9801      	ldr	r0, [sp, #4]
 8004552:	6813      	ldr	r3, [r2, #0]
 8004554:	b933      	cbnz	r3, 8004564 <_free_r+0x30>
 8004556:	6063      	str	r3, [r4, #4]
 8004558:	6014      	str	r4, [r2, #0]
 800455a:	b003      	add	sp, #12
 800455c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004560:	f000 b8e2 	b.w	8004728 <__malloc_unlock>
 8004564:	42a3      	cmp	r3, r4
 8004566:	d908      	bls.n	800457a <_free_r+0x46>
 8004568:	6825      	ldr	r5, [r4, #0]
 800456a:	1961      	adds	r1, r4, r5
 800456c:	428b      	cmp	r3, r1
 800456e:	bf01      	itttt	eq
 8004570:	6819      	ldreq	r1, [r3, #0]
 8004572:	685b      	ldreq	r3, [r3, #4]
 8004574:	1949      	addeq	r1, r1, r5
 8004576:	6021      	streq	r1, [r4, #0]
 8004578:	e7ed      	b.n	8004556 <_free_r+0x22>
 800457a:	461a      	mov	r2, r3
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	b10b      	cbz	r3, 8004584 <_free_r+0x50>
 8004580:	42a3      	cmp	r3, r4
 8004582:	d9fa      	bls.n	800457a <_free_r+0x46>
 8004584:	6811      	ldr	r1, [r2, #0]
 8004586:	1855      	adds	r5, r2, r1
 8004588:	42a5      	cmp	r5, r4
 800458a:	d10b      	bne.n	80045a4 <_free_r+0x70>
 800458c:	6824      	ldr	r4, [r4, #0]
 800458e:	4421      	add	r1, r4
 8004590:	1854      	adds	r4, r2, r1
 8004592:	42a3      	cmp	r3, r4
 8004594:	6011      	str	r1, [r2, #0]
 8004596:	d1e0      	bne.n	800455a <_free_r+0x26>
 8004598:	681c      	ldr	r4, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	6053      	str	r3, [r2, #4]
 800459e:	440c      	add	r4, r1
 80045a0:	6014      	str	r4, [r2, #0]
 80045a2:	e7da      	b.n	800455a <_free_r+0x26>
 80045a4:	d902      	bls.n	80045ac <_free_r+0x78>
 80045a6:	230c      	movs	r3, #12
 80045a8:	6003      	str	r3, [r0, #0]
 80045aa:	e7d6      	b.n	800455a <_free_r+0x26>
 80045ac:	6825      	ldr	r5, [r4, #0]
 80045ae:	1961      	adds	r1, r4, r5
 80045b0:	428b      	cmp	r3, r1
 80045b2:	bf04      	itt	eq
 80045b4:	6819      	ldreq	r1, [r3, #0]
 80045b6:	685b      	ldreq	r3, [r3, #4]
 80045b8:	6063      	str	r3, [r4, #4]
 80045ba:	bf04      	itt	eq
 80045bc:	1949      	addeq	r1, r1, r5
 80045be:	6021      	streq	r1, [r4, #0]
 80045c0:	6054      	str	r4, [r2, #4]
 80045c2:	e7ca      	b.n	800455a <_free_r+0x26>
 80045c4:	b003      	add	sp, #12
 80045c6:	bd30      	pop	{r4, r5, pc}
 80045c8:	2000046c 	.word	0x2000046c

080045cc <malloc>:
 80045cc:	4b02      	ldr	r3, [pc, #8]	; (80045d8 <malloc+0xc>)
 80045ce:	4601      	mov	r1, r0
 80045d0:	6818      	ldr	r0, [r3, #0]
 80045d2:	f000 b823 	b.w	800461c <_malloc_r>
 80045d6:	bf00      	nop
 80045d8:	20000084 	.word	0x20000084

080045dc <sbrk_aligned>:
 80045dc:	b570      	push	{r4, r5, r6, lr}
 80045de:	4e0e      	ldr	r6, [pc, #56]	; (8004618 <sbrk_aligned+0x3c>)
 80045e0:	460c      	mov	r4, r1
 80045e2:	6831      	ldr	r1, [r6, #0]
 80045e4:	4605      	mov	r5, r0
 80045e6:	b911      	cbnz	r1, 80045ee <sbrk_aligned+0x12>
 80045e8:	f001 f89e 	bl	8005728 <_sbrk_r>
 80045ec:	6030      	str	r0, [r6, #0]
 80045ee:	4621      	mov	r1, r4
 80045f0:	4628      	mov	r0, r5
 80045f2:	f001 f899 	bl	8005728 <_sbrk_r>
 80045f6:	1c43      	adds	r3, r0, #1
 80045f8:	d00a      	beq.n	8004610 <sbrk_aligned+0x34>
 80045fa:	1cc4      	adds	r4, r0, #3
 80045fc:	f024 0403 	bic.w	r4, r4, #3
 8004600:	42a0      	cmp	r0, r4
 8004602:	d007      	beq.n	8004614 <sbrk_aligned+0x38>
 8004604:	1a21      	subs	r1, r4, r0
 8004606:	4628      	mov	r0, r5
 8004608:	f001 f88e 	bl	8005728 <_sbrk_r>
 800460c:	3001      	adds	r0, #1
 800460e:	d101      	bne.n	8004614 <sbrk_aligned+0x38>
 8004610:	f04f 34ff 	mov.w	r4, #4294967295
 8004614:	4620      	mov	r0, r4
 8004616:	bd70      	pop	{r4, r5, r6, pc}
 8004618:	20000470 	.word	0x20000470

0800461c <_malloc_r>:
 800461c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004620:	1ccd      	adds	r5, r1, #3
 8004622:	f025 0503 	bic.w	r5, r5, #3
 8004626:	3508      	adds	r5, #8
 8004628:	2d0c      	cmp	r5, #12
 800462a:	bf38      	it	cc
 800462c:	250c      	movcc	r5, #12
 800462e:	2d00      	cmp	r5, #0
 8004630:	4607      	mov	r7, r0
 8004632:	db01      	blt.n	8004638 <_malloc_r+0x1c>
 8004634:	42a9      	cmp	r1, r5
 8004636:	d905      	bls.n	8004644 <_malloc_r+0x28>
 8004638:	230c      	movs	r3, #12
 800463a:	603b      	str	r3, [r7, #0]
 800463c:	2600      	movs	r6, #0
 800463e:	4630      	mov	r0, r6
 8004640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004644:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004718 <_malloc_r+0xfc>
 8004648:	f000 f868 	bl	800471c <__malloc_lock>
 800464c:	f8d8 3000 	ldr.w	r3, [r8]
 8004650:	461c      	mov	r4, r3
 8004652:	bb5c      	cbnz	r4, 80046ac <_malloc_r+0x90>
 8004654:	4629      	mov	r1, r5
 8004656:	4638      	mov	r0, r7
 8004658:	f7ff ffc0 	bl	80045dc <sbrk_aligned>
 800465c:	1c43      	adds	r3, r0, #1
 800465e:	4604      	mov	r4, r0
 8004660:	d155      	bne.n	800470e <_malloc_r+0xf2>
 8004662:	f8d8 4000 	ldr.w	r4, [r8]
 8004666:	4626      	mov	r6, r4
 8004668:	2e00      	cmp	r6, #0
 800466a:	d145      	bne.n	80046f8 <_malloc_r+0xdc>
 800466c:	2c00      	cmp	r4, #0
 800466e:	d048      	beq.n	8004702 <_malloc_r+0xe6>
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	4631      	mov	r1, r6
 8004674:	4638      	mov	r0, r7
 8004676:	eb04 0903 	add.w	r9, r4, r3
 800467a:	f001 f855 	bl	8005728 <_sbrk_r>
 800467e:	4581      	cmp	r9, r0
 8004680:	d13f      	bne.n	8004702 <_malloc_r+0xe6>
 8004682:	6821      	ldr	r1, [r4, #0]
 8004684:	1a6d      	subs	r5, r5, r1
 8004686:	4629      	mov	r1, r5
 8004688:	4638      	mov	r0, r7
 800468a:	f7ff ffa7 	bl	80045dc <sbrk_aligned>
 800468e:	3001      	adds	r0, #1
 8004690:	d037      	beq.n	8004702 <_malloc_r+0xe6>
 8004692:	6823      	ldr	r3, [r4, #0]
 8004694:	442b      	add	r3, r5
 8004696:	6023      	str	r3, [r4, #0]
 8004698:	f8d8 3000 	ldr.w	r3, [r8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d038      	beq.n	8004712 <_malloc_r+0xf6>
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	42a2      	cmp	r2, r4
 80046a4:	d12b      	bne.n	80046fe <_malloc_r+0xe2>
 80046a6:	2200      	movs	r2, #0
 80046a8:	605a      	str	r2, [r3, #4]
 80046aa:	e00f      	b.n	80046cc <_malloc_r+0xb0>
 80046ac:	6822      	ldr	r2, [r4, #0]
 80046ae:	1b52      	subs	r2, r2, r5
 80046b0:	d41f      	bmi.n	80046f2 <_malloc_r+0xd6>
 80046b2:	2a0b      	cmp	r2, #11
 80046b4:	d917      	bls.n	80046e6 <_malloc_r+0xca>
 80046b6:	1961      	adds	r1, r4, r5
 80046b8:	42a3      	cmp	r3, r4
 80046ba:	6025      	str	r5, [r4, #0]
 80046bc:	bf18      	it	ne
 80046be:	6059      	strne	r1, [r3, #4]
 80046c0:	6863      	ldr	r3, [r4, #4]
 80046c2:	bf08      	it	eq
 80046c4:	f8c8 1000 	streq.w	r1, [r8]
 80046c8:	5162      	str	r2, [r4, r5]
 80046ca:	604b      	str	r3, [r1, #4]
 80046cc:	4638      	mov	r0, r7
 80046ce:	f104 060b 	add.w	r6, r4, #11
 80046d2:	f000 f829 	bl	8004728 <__malloc_unlock>
 80046d6:	f026 0607 	bic.w	r6, r6, #7
 80046da:	1d23      	adds	r3, r4, #4
 80046dc:	1af2      	subs	r2, r6, r3
 80046de:	d0ae      	beq.n	800463e <_malloc_r+0x22>
 80046e0:	1b9b      	subs	r3, r3, r6
 80046e2:	50a3      	str	r3, [r4, r2]
 80046e4:	e7ab      	b.n	800463e <_malloc_r+0x22>
 80046e6:	42a3      	cmp	r3, r4
 80046e8:	6862      	ldr	r2, [r4, #4]
 80046ea:	d1dd      	bne.n	80046a8 <_malloc_r+0x8c>
 80046ec:	f8c8 2000 	str.w	r2, [r8]
 80046f0:	e7ec      	b.n	80046cc <_malloc_r+0xb0>
 80046f2:	4623      	mov	r3, r4
 80046f4:	6864      	ldr	r4, [r4, #4]
 80046f6:	e7ac      	b.n	8004652 <_malloc_r+0x36>
 80046f8:	4634      	mov	r4, r6
 80046fa:	6876      	ldr	r6, [r6, #4]
 80046fc:	e7b4      	b.n	8004668 <_malloc_r+0x4c>
 80046fe:	4613      	mov	r3, r2
 8004700:	e7cc      	b.n	800469c <_malloc_r+0x80>
 8004702:	230c      	movs	r3, #12
 8004704:	603b      	str	r3, [r7, #0]
 8004706:	4638      	mov	r0, r7
 8004708:	f000 f80e 	bl	8004728 <__malloc_unlock>
 800470c:	e797      	b.n	800463e <_malloc_r+0x22>
 800470e:	6025      	str	r5, [r4, #0]
 8004710:	e7dc      	b.n	80046cc <_malloc_r+0xb0>
 8004712:	605b      	str	r3, [r3, #4]
 8004714:	deff      	udf	#255	; 0xff
 8004716:	bf00      	nop
 8004718:	2000046c 	.word	0x2000046c

0800471c <__malloc_lock>:
 800471c:	4801      	ldr	r0, [pc, #4]	; (8004724 <__malloc_lock+0x8>)
 800471e:	f7ff b87d 	b.w	800381c <__retarget_lock_acquire_recursive>
 8004722:	bf00      	nop
 8004724:	20000468 	.word	0x20000468

08004728 <__malloc_unlock>:
 8004728:	4801      	ldr	r0, [pc, #4]	; (8004730 <__malloc_unlock+0x8>)
 800472a:	f7ff b878 	b.w	800381e <__retarget_lock_release_recursive>
 800472e:	bf00      	nop
 8004730:	20000468 	.word	0x20000468

08004734 <_Balloc>:
 8004734:	b570      	push	{r4, r5, r6, lr}
 8004736:	69c6      	ldr	r6, [r0, #28]
 8004738:	4604      	mov	r4, r0
 800473a:	460d      	mov	r5, r1
 800473c:	b976      	cbnz	r6, 800475c <_Balloc+0x28>
 800473e:	2010      	movs	r0, #16
 8004740:	f7ff ff44 	bl	80045cc <malloc>
 8004744:	4602      	mov	r2, r0
 8004746:	61e0      	str	r0, [r4, #28]
 8004748:	b920      	cbnz	r0, 8004754 <_Balloc+0x20>
 800474a:	4b18      	ldr	r3, [pc, #96]	; (80047ac <_Balloc+0x78>)
 800474c:	4818      	ldr	r0, [pc, #96]	; (80047b0 <_Balloc+0x7c>)
 800474e:	216b      	movs	r1, #107	; 0x6b
 8004750:	f000 fffa 	bl	8005748 <__assert_func>
 8004754:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004758:	6006      	str	r6, [r0, #0]
 800475a:	60c6      	str	r6, [r0, #12]
 800475c:	69e6      	ldr	r6, [r4, #28]
 800475e:	68f3      	ldr	r3, [r6, #12]
 8004760:	b183      	cbz	r3, 8004784 <_Balloc+0x50>
 8004762:	69e3      	ldr	r3, [r4, #28]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800476a:	b9b8      	cbnz	r0, 800479c <_Balloc+0x68>
 800476c:	2101      	movs	r1, #1
 800476e:	fa01 f605 	lsl.w	r6, r1, r5
 8004772:	1d72      	adds	r2, r6, #5
 8004774:	0092      	lsls	r2, r2, #2
 8004776:	4620      	mov	r0, r4
 8004778:	f001 f804 	bl	8005784 <_calloc_r>
 800477c:	b160      	cbz	r0, 8004798 <_Balloc+0x64>
 800477e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004782:	e00e      	b.n	80047a2 <_Balloc+0x6e>
 8004784:	2221      	movs	r2, #33	; 0x21
 8004786:	2104      	movs	r1, #4
 8004788:	4620      	mov	r0, r4
 800478a:	f000 fffb 	bl	8005784 <_calloc_r>
 800478e:	69e3      	ldr	r3, [r4, #28]
 8004790:	60f0      	str	r0, [r6, #12]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e4      	bne.n	8004762 <_Balloc+0x2e>
 8004798:	2000      	movs	r0, #0
 800479a:	bd70      	pop	{r4, r5, r6, pc}
 800479c:	6802      	ldr	r2, [r0, #0]
 800479e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80047a2:	2300      	movs	r3, #0
 80047a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80047a8:	e7f7      	b.n	800479a <_Balloc+0x66>
 80047aa:	bf00      	nop
 80047ac:	08005b80 	.word	0x08005b80
 80047b0:	08005c00 	.word	0x08005c00

080047b4 <_Bfree>:
 80047b4:	b570      	push	{r4, r5, r6, lr}
 80047b6:	69c6      	ldr	r6, [r0, #28]
 80047b8:	4605      	mov	r5, r0
 80047ba:	460c      	mov	r4, r1
 80047bc:	b976      	cbnz	r6, 80047dc <_Bfree+0x28>
 80047be:	2010      	movs	r0, #16
 80047c0:	f7ff ff04 	bl	80045cc <malloc>
 80047c4:	4602      	mov	r2, r0
 80047c6:	61e8      	str	r0, [r5, #28]
 80047c8:	b920      	cbnz	r0, 80047d4 <_Bfree+0x20>
 80047ca:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <_Bfree+0x3c>)
 80047cc:	4809      	ldr	r0, [pc, #36]	; (80047f4 <_Bfree+0x40>)
 80047ce:	218f      	movs	r1, #143	; 0x8f
 80047d0:	f000 ffba 	bl	8005748 <__assert_func>
 80047d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80047d8:	6006      	str	r6, [r0, #0]
 80047da:	60c6      	str	r6, [r0, #12]
 80047dc:	b13c      	cbz	r4, 80047ee <_Bfree+0x3a>
 80047de:	69eb      	ldr	r3, [r5, #28]
 80047e0:	6862      	ldr	r2, [r4, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80047e8:	6021      	str	r1, [r4, #0]
 80047ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80047ee:	bd70      	pop	{r4, r5, r6, pc}
 80047f0:	08005b80 	.word	0x08005b80
 80047f4:	08005c00 	.word	0x08005c00

080047f8 <__multadd>:
 80047f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047fc:	690d      	ldr	r5, [r1, #16]
 80047fe:	4607      	mov	r7, r0
 8004800:	460c      	mov	r4, r1
 8004802:	461e      	mov	r6, r3
 8004804:	f101 0c14 	add.w	ip, r1, #20
 8004808:	2000      	movs	r0, #0
 800480a:	f8dc 3000 	ldr.w	r3, [ip]
 800480e:	b299      	uxth	r1, r3
 8004810:	fb02 6101 	mla	r1, r2, r1, r6
 8004814:	0c1e      	lsrs	r6, r3, #16
 8004816:	0c0b      	lsrs	r3, r1, #16
 8004818:	fb02 3306 	mla	r3, r2, r6, r3
 800481c:	b289      	uxth	r1, r1
 800481e:	3001      	adds	r0, #1
 8004820:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004824:	4285      	cmp	r5, r0
 8004826:	f84c 1b04 	str.w	r1, [ip], #4
 800482a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800482e:	dcec      	bgt.n	800480a <__multadd+0x12>
 8004830:	b30e      	cbz	r6, 8004876 <__multadd+0x7e>
 8004832:	68a3      	ldr	r3, [r4, #8]
 8004834:	42ab      	cmp	r3, r5
 8004836:	dc19      	bgt.n	800486c <__multadd+0x74>
 8004838:	6861      	ldr	r1, [r4, #4]
 800483a:	4638      	mov	r0, r7
 800483c:	3101      	adds	r1, #1
 800483e:	f7ff ff79 	bl	8004734 <_Balloc>
 8004842:	4680      	mov	r8, r0
 8004844:	b928      	cbnz	r0, 8004852 <__multadd+0x5a>
 8004846:	4602      	mov	r2, r0
 8004848:	4b0c      	ldr	r3, [pc, #48]	; (800487c <__multadd+0x84>)
 800484a:	480d      	ldr	r0, [pc, #52]	; (8004880 <__multadd+0x88>)
 800484c:	21ba      	movs	r1, #186	; 0xba
 800484e:	f000 ff7b 	bl	8005748 <__assert_func>
 8004852:	6922      	ldr	r2, [r4, #16]
 8004854:	3202      	adds	r2, #2
 8004856:	f104 010c 	add.w	r1, r4, #12
 800485a:	0092      	lsls	r2, r2, #2
 800485c:	300c      	adds	r0, #12
 800485e:	f7fe ffdf 	bl	8003820 <memcpy>
 8004862:	4621      	mov	r1, r4
 8004864:	4638      	mov	r0, r7
 8004866:	f7ff ffa5 	bl	80047b4 <_Bfree>
 800486a:	4644      	mov	r4, r8
 800486c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004870:	3501      	adds	r5, #1
 8004872:	615e      	str	r6, [r3, #20]
 8004874:	6125      	str	r5, [r4, #16]
 8004876:	4620      	mov	r0, r4
 8004878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800487c:	08005bef 	.word	0x08005bef
 8004880:	08005c00 	.word	0x08005c00

08004884 <__hi0bits>:
 8004884:	0c03      	lsrs	r3, r0, #16
 8004886:	041b      	lsls	r3, r3, #16
 8004888:	b9d3      	cbnz	r3, 80048c0 <__hi0bits+0x3c>
 800488a:	0400      	lsls	r0, r0, #16
 800488c:	2310      	movs	r3, #16
 800488e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004892:	bf04      	itt	eq
 8004894:	0200      	lsleq	r0, r0, #8
 8004896:	3308      	addeq	r3, #8
 8004898:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800489c:	bf04      	itt	eq
 800489e:	0100      	lsleq	r0, r0, #4
 80048a0:	3304      	addeq	r3, #4
 80048a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80048a6:	bf04      	itt	eq
 80048a8:	0080      	lsleq	r0, r0, #2
 80048aa:	3302      	addeq	r3, #2
 80048ac:	2800      	cmp	r0, #0
 80048ae:	db05      	blt.n	80048bc <__hi0bits+0x38>
 80048b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80048b4:	f103 0301 	add.w	r3, r3, #1
 80048b8:	bf08      	it	eq
 80048ba:	2320      	moveq	r3, #32
 80048bc:	4618      	mov	r0, r3
 80048be:	4770      	bx	lr
 80048c0:	2300      	movs	r3, #0
 80048c2:	e7e4      	b.n	800488e <__hi0bits+0xa>

080048c4 <__lo0bits>:
 80048c4:	6803      	ldr	r3, [r0, #0]
 80048c6:	f013 0207 	ands.w	r2, r3, #7
 80048ca:	d00c      	beq.n	80048e6 <__lo0bits+0x22>
 80048cc:	07d9      	lsls	r1, r3, #31
 80048ce:	d422      	bmi.n	8004916 <__lo0bits+0x52>
 80048d0:	079a      	lsls	r2, r3, #30
 80048d2:	bf49      	itett	mi
 80048d4:	085b      	lsrmi	r3, r3, #1
 80048d6:	089b      	lsrpl	r3, r3, #2
 80048d8:	6003      	strmi	r3, [r0, #0]
 80048da:	2201      	movmi	r2, #1
 80048dc:	bf5c      	itt	pl
 80048de:	6003      	strpl	r3, [r0, #0]
 80048e0:	2202      	movpl	r2, #2
 80048e2:	4610      	mov	r0, r2
 80048e4:	4770      	bx	lr
 80048e6:	b299      	uxth	r1, r3
 80048e8:	b909      	cbnz	r1, 80048ee <__lo0bits+0x2a>
 80048ea:	0c1b      	lsrs	r3, r3, #16
 80048ec:	2210      	movs	r2, #16
 80048ee:	b2d9      	uxtb	r1, r3
 80048f0:	b909      	cbnz	r1, 80048f6 <__lo0bits+0x32>
 80048f2:	3208      	adds	r2, #8
 80048f4:	0a1b      	lsrs	r3, r3, #8
 80048f6:	0719      	lsls	r1, r3, #28
 80048f8:	bf04      	itt	eq
 80048fa:	091b      	lsreq	r3, r3, #4
 80048fc:	3204      	addeq	r2, #4
 80048fe:	0799      	lsls	r1, r3, #30
 8004900:	bf04      	itt	eq
 8004902:	089b      	lsreq	r3, r3, #2
 8004904:	3202      	addeq	r2, #2
 8004906:	07d9      	lsls	r1, r3, #31
 8004908:	d403      	bmi.n	8004912 <__lo0bits+0x4e>
 800490a:	085b      	lsrs	r3, r3, #1
 800490c:	f102 0201 	add.w	r2, r2, #1
 8004910:	d003      	beq.n	800491a <__lo0bits+0x56>
 8004912:	6003      	str	r3, [r0, #0]
 8004914:	e7e5      	b.n	80048e2 <__lo0bits+0x1e>
 8004916:	2200      	movs	r2, #0
 8004918:	e7e3      	b.n	80048e2 <__lo0bits+0x1e>
 800491a:	2220      	movs	r2, #32
 800491c:	e7e1      	b.n	80048e2 <__lo0bits+0x1e>
	...

08004920 <__i2b>:
 8004920:	b510      	push	{r4, lr}
 8004922:	460c      	mov	r4, r1
 8004924:	2101      	movs	r1, #1
 8004926:	f7ff ff05 	bl	8004734 <_Balloc>
 800492a:	4602      	mov	r2, r0
 800492c:	b928      	cbnz	r0, 800493a <__i2b+0x1a>
 800492e:	4b05      	ldr	r3, [pc, #20]	; (8004944 <__i2b+0x24>)
 8004930:	4805      	ldr	r0, [pc, #20]	; (8004948 <__i2b+0x28>)
 8004932:	f240 1145 	movw	r1, #325	; 0x145
 8004936:	f000 ff07 	bl	8005748 <__assert_func>
 800493a:	2301      	movs	r3, #1
 800493c:	6144      	str	r4, [r0, #20]
 800493e:	6103      	str	r3, [r0, #16]
 8004940:	bd10      	pop	{r4, pc}
 8004942:	bf00      	nop
 8004944:	08005bef 	.word	0x08005bef
 8004948:	08005c00 	.word	0x08005c00

0800494c <__multiply>:
 800494c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004950:	4691      	mov	r9, r2
 8004952:	690a      	ldr	r2, [r1, #16]
 8004954:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004958:	429a      	cmp	r2, r3
 800495a:	bfb8      	it	lt
 800495c:	460b      	movlt	r3, r1
 800495e:	460c      	mov	r4, r1
 8004960:	bfbc      	itt	lt
 8004962:	464c      	movlt	r4, r9
 8004964:	4699      	movlt	r9, r3
 8004966:	6927      	ldr	r7, [r4, #16]
 8004968:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800496c:	68a3      	ldr	r3, [r4, #8]
 800496e:	6861      	ldr	r1, [r4, #4]
 8004970:	eb07 060a 	add.w	r6, r7, sl
 8004974:	42b3      	cmp	r3, r6
 8004976:	b085      	sub	sp, #20
 8004978:	bfb8      	it	lt
 800497a:	3101      	addlt	r1, #1
 800497c:	f7ff feda 	bl	8004734 <_Balloc>
 8004980:	b930      	cbnz	r0, 8004990 <__multiply+0x44>
 8004982:	4602      	mov	r2, r0
 8004984:	4b44      	ldr	r3, [pc, #272]	; (8004a98 <__multiply+0x14c>)
 8004986:	4845      	ldr	r0, [pc, #276]	; (8004a9c <__multiply+0x150>)
 8004988:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800498c:	f000 fedc 	bl	8005748 <__assert_func>
 8004990:	f100 0514 	add.w	r5, r0, #20
 8004994:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004998:	462b      	mov	r3, r5
 800499a:	2200      	movs	r2, #0
 800499c:	4543      	cmp	r3, r8
 800499e:	d321      	bcc.n	80049e4 <__multiply+0x98>
 80049a0:	f104 0314 	add.w	r3, r4, #20
 80049a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80049a8:	f109 0314 	add.w	r3, r9, #20
 80049ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80049b0:	9202      	str	r2, [sp, #8]
 80049b2:	1b3a      	subs	r2, r7, r4
 80049b4:	3a15      	subs	r2, #21
 80049b6:	f022 0203 	bic.w	r2, r2, #3
 80049ba:	3204      	adds	r2, #4
 80049bc:	f104 0115 	add.w	r1, r4, #21
 80049c0:	428f      	cmp	r7, r1
 80049c2:	bf38      	it	cc
 80049c4:	2204      	movcc	r2, #4
 80049c6:	9201      	str	r2, [sp, #4]
 80049c8:	9a02      	ldr	r2, [sp, #8]
 80049ca:	9303      	str	r3, [sp, #12]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d80c      	bhi.n	80049ea <__multiply+0x9e>
 80049d0:	2e00      	cmp	r6, #0
 80049d2:	dd03      	ble.n	80049dc <__multiply+0x90>
 80049d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d05b      	beq.n	8004a94 <__multiply+0x148>
 80049dc:	6106      	str	r6, [r0, #16]
 80049de:	b005      	add	sp, #20
 80049e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e4:	f843 2b04 	str.w	r2, [r3], #4
 80049e8:	e7d8      	b.n	800499c <__multiply+0x50>
 80049ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80049ee:	f1ba 0f00 	cmp.w	sl, #0
 80049f2:	d024      	beq.n	8004a3e <__multiply+0xf2>
 80049f4:	f104 0e14 	add.w	lr, r4, #20
 80049f8:	46a9      	mov	r9, r5
 80049fa:	f04f 0c00 	mov.w	ip, #0
 80049fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004a02:	f8d9 1000 	ldr.w	r1, [r9]
 8004a06:	fa1f fb82 	uxth.w	fp, r2
 8004a0a:	b289      	uxth	r1, r1
 8004a0c:	fb0a 110b 	mla	r1, sl, fp, r1
 8004a10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004a14:	f8d9 2000 	ldr.w	r2, [r9]
 8004a18:	4461      	add	r1, ip
 8004a1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004a1e:	fb0a c20b 	mla	r2, sl, fp, ip
 8004a22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004a26:	b289      	uxth	r1, r1
 8004a28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004a2c:	4577      	cmp	r7, lr
 8004a2e:	f849 1b04 	str.w	r1, [r9], #4
 8004a32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004a36:	d8e2      	bhi.n	80049fe <__multiply+0xb2>
 8004a38:	9a01      	ldr	r2, [sp, #4]
 8004a3a:	f845 c002 	str.w	ip, [r5, r2]
 8004a3e:	9a03      	ldr	r2, [sp, #12]
 8004a40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004a44:	3304      	adds	r3, #4
 8004a46:	f1b9 0f00 	cmp.w	r9, #0
 8004a4a:	d021      	beq.n	8004a90 <__multiply+0x144>
 8004a4c:	6829      	ldr	r1, [r5, #0]
 8004a4e:	f104 0c14 	add.w	ip, r4, #20
 8004a52:	46ae      	mov	lr, r5
 8004a54:	f04f 0a00 	mov.w	sl, #0
 8004a58:	f8bc b000 	ldrh.w	fp, [ip]
 8004a5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004a60:	fb09 220b 	mla	r2, r9, fp, r2
 8004a64:	4452      	add	r2, sl
 8004a66:	b289      	uxth	r1, r1
 8004a68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004a6c:	f84e 1b04 	str.w	r1, [lr], #4
 8004a70:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004a74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004a78:	f8be 1000 	ldrh.w	r1, [lr]
 8004a7c:	fb09 110a 	mla	r1, r9, sl, r1
 8004a80:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004a84:	4567      	cmp	r7, ip
 8004a86:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004a8a:	d8e5      	bhi.n	8004a58 <__multiply+0x10c>
 8004a8c:	9a01      	ldr	r2, [sp, #4]
 8004a8e:	50a9      	str	r1, [r5, r2]
 8004a90:	3504      	adds	r5, #4
 8004a92:	e799      	b.n	80049c8 <__multiply+0x7c>
 8004a94:	3e01      	subs	r6, #1
 8004a96:	e79b      	b.n	80049d0 <__multiply+0x84>
 8004a98:	08005bef 	.word	0x08005bef
 8004a9c:	08005c00 	.word	0x08005c00

08004aa0 <__pow5mult>:
 8004aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004aa4:	4615      	mov	r5, r2
 8004aa6:	f012 0203 	ands.w	r2, r2, #3
 8004aaa:	4606      	mov	r6, r0
 8004aac:	460f      	mov	r7, r1
 8004aae:	d007      	beq.n	8004ac0 <__pow5mult+0x20>
 8004ab0:	4c25      	ldr	r4, [pc, #148]	; (8004b48 <__pow5mult+0xa8>)
 8004ab2:	3a01      	subs	r2, #1
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004aba:	f7ff fe9d 	bl	80047f8 <__multadd>
 8004abe:	4607      	mov	r7, r0
 8004ac0:	10ad      	asrs	r5, r5, #2
 8004ac2:	d03d      	beq.n	8004b40 <__pow5mult+0xa0>
 8004ac4:	69f4      	ldr	r4, [r6, #28]
 8004ac6:	b97c      	cbnz	r4, 8004ae8 <__pow5mult+0x48>
 8004ac8:	2010      	movs	r0, #16
 8004aca:	f7ff fd7f 	bl	80045cc <malloc>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	61f0      	str	r0, [r6, #28]
 8004ad2:	b928      	cbnz	r0, 8004ae0 <__pow5mult+0x40>
 8004ad4:	4b1d      	ldr	r3, [pc, #116]	; (8004b4c <__pow5mult+0xac>)
 8004ad6:	481e      	ldr	r0, [pc, #120]	; (8004b50 <__pow5mult+0xb0>)
 8004ad8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004adc:	f000 fe34 	bl	8005748 <__assert_func>
 8004ae0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ae4:	6004      	str	r4, [r0, #0]
 8004ae6:	60c4      	str	r4, [r0, #12]
 8004ae8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004aec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004af0:	b94c      	cbnz	r4, 8004b06 <__pow5mult+0x66>
 8004af2:	f240 2171 	movw	r1, #625	; 0x271
 8004af6:	4630      	mov	r0, r6
 8004af8:	f7ff ff12 	bl	8004920 <__i2b>
 8004afc:	2300      	movs	r3, #0
 8004afe:	f8c8 0008 	str.w	r0, [r8, #8]
 8004b02:	4604      	mov	r4, r0
 8004b04:	6003      	str	r3, [r0, #0]
 8004b06:	f04f 0900 	mov.w	r9, #0
 8004b0a:	07eb      	lsls	r3, r5, #31
 8004b0c:	d50a      	bpl.n	8004b24 <__pow5mult+0x84>
 8004b0e:	4639      	mov	r1, r7
 8004b10:	4622      	mov	r2, r4
 8004b12:	4630      	mov	r0, r6
 8004b14:	f7ff ff1a 	bl	800494c <__multiply>
 8004b18:	4639      	mov	r1, r7
 8004b1a:	4680      	mov	r8, r0
 8004b1c:	4630      	mov	r0, r6
 8004b1e:	f7ff fe49 	bl	80047b4 <_Bfree>
 8004b22:	4647      	mov	r7, r8
 8004b24:	106d      	asrs	r5, r5, #1
 8004b26:	d00b      	beq.n	8004b40 <__pow5mult+0xa0>
 8004b28:	6820      	ldr	r0, [r4, #0]
 8004b2a:	b938      	cbnz	r0, 8004b3c <__pow5mult+0x9c>
 8004b2c:	4622      	mov	r2, r4
 8004b2e:	4621      	mov	r1, r4
 8004b30:	4630      	mov	r0, r6
 8004b32:	f7ff ff0b 	bl	800494c <__multiply>
 8004b36:	6020      	str	r0, [r4, #0]
 8004b38:	f8c0 9000 	str.w	r9, [r0]
 8004b3c:	4604      	mov	r4, r0
 8004b3e:	e7e4      	b.n	8004b0a <__pow5mult+0x6a>
 8004b40:	4638      	mov	r0, r7
 8004b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b46:	bf00      	nop
 8004b48:	08005d50 	.word	0x08005d50
 8004b4c:	08005b80 	.word	0x08005b80
 8004b50:	08005c00 	.word	0x08005c00

08004b54 <__lshift>:
 8004b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b58:	460c      	mov	r4, r1
 8004b5a:	6849      	ldr	r1, [r1, #4]
 8004b5c:	6923      	ldr	r3, [r4, #16]
 8004b5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004b62:	68a3      	ldr	r3, [r4, #8]
 8004b64:	4607      	mov	r7, r0
 8004b66:	4691      	mov	r9, r2
 8004b68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004b6c:	f108 0601 	add.w	r6, r8, #1
 8004b70:	42b3      	cmp	r3, r6
 8004b72:	db0b      	blt.n	8004b8c <__lshift+0x38>
 8004b74:	4638      	mov	r0, r7
 8004b76:	f7ff fddd 	bl	8004734 <_Balloc>
 8004b7a:	4605      	mov	r5, r0
 8004b7c:	b948      	cbnz	r0, 8004b92 <__lshift+0x3e>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	4b28      	ldr	r3, [pc, #160]	; (8004c24 <__lshift+0xd0>)
 8004b82:	4829      	ldr	r0, [pc, #164]	; (8004c28 <__lshift+0xd4>)
 8004b84:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004b88:	f000 fdde 	bl	8005748 <__assert_func>
 8004b8c:	3101      	adds	r1, #1
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	e7ee      	b.n	8004b70 <__lshift+0x1c>
 8004b92:	2300      	movs	r3, #0
 8004b94:	f100 0114 	add.w	r1, r0, #20
 8004b98:	f100 0210 	add.w	r2, r0, #16
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	4553      	cmp	r3, sl
 8004ba0:	db33      	blt.n	8004c0a <__lshift+0xb6>
 8004ba2:	6920      	ldr	r0, [r4, #16]
 8004ba4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ba8:	f104 0314 	add.w	r3, r4, #20
 8004bac:	f019 091f 	ands.w	r9, r9, #31
 8004bb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004bb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004bb8:	d02b      	beq.n	8004c12 <__lshift+0xbe>
 8004bba:	f1c9 0e20 	rsb	lr, r9, #32
 8004bbe:	468a      	mov	sl, r1
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	6818      	ldr	r0, [r3, #0]
 8004bc4:	fa00 f009 	lsl.w	r0, r0, r9
 8004bc8:	4310      	orrs	r0, r2
 8004bca:	f84a 0b04 	str.w	r0, [sl], #4
 8004bce:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bd2:	459c      	cmp	ip, r3
 8004bd4:	fa22 f20e 	lsr.w	r2, r2, lr
 8004bd8:	d8f3      	bhi.n	8004bc2 <__lshift+0x6e>
 8004bda:	ebac 0304 	sub.w	r3, ip, r4
 8004bde:	3b15      	subs	r3, #21
 8004be0:	f023 0303 	bic.w	r3, r3, #3
 8004be4:	3304      	adds	r3, #4
 8004be6:	f104 0015 	add.w	r0, r4, #21
 8004bea:	4584      	cmp	ip, r0
 8004bec:	bf38      	it	cc
 8004bee:	2304      	movcc	r3, #4
 8004bf0:	50ca      	str	r2, [r1, r3]
 8004bf2:	b10a      	cbz	r2, 8004bf8 <__lshift+0xa4>
 8004bf4:	f108 0602 	add.w	r6, r8, #2
 8004bf8:	3e01      	subs	r6, #1
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	612e      	str	r6, [r5, #16]
 8004bfe:	4621      	mov	r1, r4
 8004c00:	f7ff fdd8 	bl	80047b4 <_Bfree>
 8004c04:	4628      	mov	r0, r5
 8004c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004c0e:	3301      	adds	r3, #1
 8004c10:	e7c5      	b.n	8004b9e <__lshift+0x4a>
 8004c12:	3904      	subs	r1, #4
 8004c14:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c18:	f841 2f04 	str.w	r2, [r1, #4]!
 8004c1c:	459c      	cmp	ip, r3
 8004c1e:	d8f9      	bhi.n	8004c14 <__lshift+0xc0>
 8004c20:	e7ea      	b.n	8004bf8 <__lshift+0xa4>
 8004c22:	bf00      	nop
 8004c24:	08005bef 	.word	0x08005bef
 8004c28:	08005c00 	.word	0x08005c00

08004c2c <__mcmp>:
 8004c2c:	b530      	push	{r4, r5, lr}
 8004c2e:	6902      	ldr	r2, [r0, #16]
 8004c30:	690c      	ldr	r4, [r1, #16]
 8004c32:	1b12      	subs	r2, r2, r4
 8004c34:	d10e      	bne.n	8004c54 <__mcmp+0x28>
 8004c36:	f100 0314 	add.w	r3, r0, #20
 8004c3a:	3114      	adds	r1, #20
 8004c3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004c40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004c44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004c48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004c4c:	42a5      	cmp	r5, r4
 8004c4e:	d003      	beq.n	8004c58 <__mcmp+0x2c>
 8004c50:	d305      	bcc.n	8004c5e <__mcmp+0x32>
 8004c52:	2201      	movs	r2, #1
 8004c54:	4610      	mov	r0, r2
 8004c56:	bd30      	pop	{r4, r5, pc}
 8004c58:	4283      	cmp	r3, r0
 8004c5a:	d3f3      	bcc.n	8004c44 <__mcmp+0x18>
 8004c5c:	e7fa      	b.n	8004c54 <__mcmp+0x28>
 8004c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c62:	e7f7      	b.n	8004c54 <__mcmp+0x28>

08004c64 <__mdiff>:
 8004c64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c68:	460c      	mov	r4, r1
 8004c6a:	4606      	mov	r6, r0
 8004c6c:	4611      	mov	r1, r2
 8004c6e:	4620      	mov	r0, r4
 8004c70:	4690      	mov	r8, r2
 8004c72:	f7ff ffdb 	bl	8004c2c <__mcmp>
 8004c76:	1e05      	subs	r5, r0, #0
 8004c78:	d110      	bne.n	8004c9c <__mdiff+0x38>
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	4630      	mov	r0, r6
 8004c7e:	f7ff fd59 	bl	8004734 <_Balloc>
 8004c82:	b930      	cbnz	r0, 8004c92 <__mdiff+0x2e>
 8004c84:	4b3a      	ldr	r3, [pc, #232]	; (8004d70 <__mdiff+0x10c>)
 8004c86:	4602      	mov	r2, r0
 8004c88:	f240 2137 	movw	r1, #567	; 0x237
 8004c8c:	4839      	ldr	r0, [pc, #228]	; (8004d74 <__mdiff+0x110>)
 8004c8e:	f000 fd5b 	bl	8005748 <__assert_func>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004c98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c9c:	bfa4      	itt	ge
 8004c9e:	4643      	movge	r3, r8
 8004ca0:	46a0      	movge	r8, r4
 8004ca2:	4630      	mov	r0, r6
 8004ca4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004ca8:	bfa6      	itte	ge
 8004caa:	461c      	movge	r4, r3
 8004cac:	2500      	movge	r5, #0
 8004cae:	2501      	movlt	r5, #1
 8004cb0:	f7ff fd40 	bl	8004734 <_Balloc>
 8004cb4:	b920      	cbnz	r0, 8004cc0 <__mdiff+0x5c>
 8004cb6:	4b2e      	ldr	r3, [pc, #184]	; (8004d70 <__mdiff+0x10c>)
 8004cb8:	4602      	mov	r2, r0
 8004cba:	f240 2145 	movw	r1, #581	; 0x245
 8004cbe:	e7e5      	b.n	8004c8c <__mdiff+0x28>
 8004cc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004cc4:	6926      	ldr	r6, [r4, #16]
 8004cc6:	60c5      	str	r5, [r0, #12]
 8004cc8:	f104 0914 	add.w	r9, r4, #20
 8004ccc:	f108 0514 	add.w	r5, r8, #20
 8004cd0:	f100 0e14 	add.w	lr, r0, #20
 8004cd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004cd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004cdc:	f108 0210 	add.w	r2, r8, #16
 8004ce0:	46f2      	mov	sl, lr
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	f859 3b04 	ldr.w	r3, [r9], #4
 8004ce8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004cec:	fa11 f88b 	uxtah	r8, r1, fp
 8004cf0:	b299      	uxth	r1, r3
 8004cf2:	0c1b      	lsrs	r3, r3, #16
 8004cf4:	eba8 0801 	sub.w	r8, r8, r1
 8004cf8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004cfc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004d00:	fa1f f888 	uxth.w	r8, r8
 8004d04:	1419      	asrs	r1, r3, #16
 8004d06:	454e      	cmp	r6, r9
 8004d08:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004d0c:	f84a 3b04 	str.w	r3, [sl], #4
 8004d10:	d8e8      	bhi.n	8004ce4 <__mdiff+0x80>
 8004d12:	1b33      	subs	r3, r6, r4
 8004d14:	3b15      	subs	r3, #21
 8004d16:	f023 0303 	bic.w	r3, r3, #3
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	3415      	adds	r4, #21
 8004d1e:	42a6      	cmp	r6, r4
 8004d20:	bf38      	it	cc
 8004d22:	2304      	movcc	r3, #4
 8004d24:	441d      	add	r5, r3
 8004d26:	4473      	add	r3, lr
 8004d28:	469e      	mov	lr, r3
 8004d2a:	462e      	mov	r6, r5
 8004d2c:	4566      	cmp	r6, ip
 8004d2e:	d30e      	bcc.n	8004d4e <__mdiff+0xea>
 8004d30:	f10c 0203 	add.w	r2, ip, #3
 8004d34:	1b52      	subs	r2, r2, r5
 8004d36:	f022 0203 	bic.w	r2, r2, #3
 8004d3a:	3d03      	subs	r5, #3
 8004d3c:	45ac      	cmp	ip, r5
 8004d3e:	bf38      	it	cc
 8004d40:	2200      	movcc	r2, #0
 8004d42:	4413      	add	r3, r2
 8004d44:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004d48:	b17a      	cbz	r2, 8004d6a <__mdiff+0x106>
 8004d4a:	6107      	str	r7, [r0, #16]
 8004d4c:	e7a4      	b.n	8004c98 <__mdiff+0x34>
 8004d4e:	f856 8b04 	ldr.w	r8, [r6], #4
 8004d52:	fa11 f288 	uxtah	r2, r1, r8
 8004d56:	1414      	asrs	r4, r2, #16
 8004d58:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004d5c:	b292      	uxth	r2, r2
 8004d5e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004d62:	f84e 2b04 	str.w	r2, [lr], #4
 8004d66:	1421      	asrs	r1, r4, #16
 8004d68:	e7e0      	b.n	8004d2c <__mdiff+0xc8>
 8004d6a:	3f01      	subs	r7, #1
 8004d6c:	e7ea      	b.n	8004d44 <__mdiff+0xe0>
 8004d6e:	bf00      	nop
 8004d70:	08005bef 	.word	0x08005bef
 8004d74:	08005c00 	.word	0x08005c00

08004d78 <__d2b>:
 8004d78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004d7c:	460f      	mov	r7, r1
 8004d7e:	2101      	movs	r1, #1
 8004d80:	ec59 8b10 	vmov	r8, r9, d0
 8004d84:	4616      	mov	r6, r2
 8004d86:	f7ff fcd5 	bl	8004734 <_Balloc>
 8004d8a:	4604      	mov	r4, r0
 8004d8c:	b930      	cbnz	r0, 8004d9c <__d2b+0x24>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	4b24      	ldr	r3, [pc, #144]	; (8004e24 <__d2b+0xac>)
 8004d92:	4825      	ldr	r0, [pc, #148]	; (8004e28 <__d2b+0xb0>)
 8004d94:	f240 310f 	movw	r1, #783	; 0x30f
 8004d98:	f000 fcd6 	bl	8005748 <__assert_func>
 8004d9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004da0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004da4:	bb2d      	cbnz	r5, 8004df2 <__d2b+0x7a>
 8004da6:	9301      	str	r3, [sp, #4]
 8004da8:	f1b8 0300 	subs.w	r3, r8, #0
 8004dac:	d026      	beq.n	8004dfc <__d2b+0x84>
 8004dae:	4668      	mov	r0, sp
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	f7ff fd87 	bl	80048c4 <__lo0bits>
 8004db6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004dba:	b1e8      	cbz	r0, 8004df8 <__d2b+0x80>
 8004dbc:	f1c0 0320 	rsb	r3, r0, #32
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	430b      	orrs	r3, r1
 8004dc6:	40c2      	lsrs	r2, r0
 8004dc8:	6163      	str	r3, [r4, #20]
 8004dca:	9201      	str	r2, [sp, #4]
 8004dcc:	9b01      	ldr	r3, [sp, #4]
 8004dce:	61a3      	str	r3, [r4, #24]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	bf14      	ite	ne
 8004dd4:	2202      	movne	r2, #2
 8004dd6:	2201      	moveq	r2, #1
 8004dd8:	6122      	str	r2, [r4, #16]
 8004dda:	b1bd      	cbz	r5, 8004e0c <__d2b+0x94>
 8004ddc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004de0:	4405      	add	r5, r0
 8004de2:	603d      	str	r5, [r7, #0]
 8004de4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004de8:	6030      	str	r0, [r6, #0]
 8004dea:	4620      	mov	r0, r4
 8004dec:	b003      	add	sp, #12
 8004dee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004df2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004df6:	e7d6      	b.n	8004da6 <__d2b+0x2e>
 8004df8:	6161      	str	r1, [r4, #20]
 8004dfa:	e7e7      	b.n	8004dcc <__d2b+0x54>
 8004dfc:	a801      	add	r0, sp, #4
 8004dfe:	f7ff fd61 	bl	80048c4 <__lo0bits>
 8004e02:	9b01      	ldr	r3, [sp, #4]
 8004e04:	6163      	str	r3, [r4, #20]
 8004e06:	3020      	adds	r0, #32
 8004e08:	2201      	movs	r2, #1
 8004e0a:	e7e5      	b.n	8004dd8 <__d2b+0x60>
 8004e0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004e10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004e14:	6038      	str	r0, [r7, #0]
 8004e16:	6918      	ldr	r0, [r3, #16]
 8004e18:	f7ff fd34 	bl	8004884 <__hi0bits>
 8004e1c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004e20:	e7e2      	b.n	8004de8 <__d2b+0x70>
 8004e22:	bf00      	nop
 8004e24:	08005bef 	.word	0x08005bef
 8004e28:	08005c00 	.word	0x08005c00

08004e2c <__ssputs_r>:
 8004e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e30:	688e      	ldr	r6, [r1, #8]
 8004e32:	461f      	mov	r7, r3
 8004e34:	42be      	cmp	r6, r7
 8004e36:	680b      	ldr	r3, [r1, #0]
 8004e38:	4682      	mov	sl, r0
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	4690      	mov	r8, r2
 8004e3e:	d82c      	bhi.n	8004e9a <__ssputs_r+0x6e>
 8004e40:	898a      	ldrh	r2, [r1, #12]
 8004e42:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e46:	d026      	beq.n	8004e96 <__ssputs_r+0x6a>
 8004e48:	6965      	ldr	r5, [r4, #20]
 8004e4a:	6909      	ldr	r1, [r1, #16]
 8004e4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e50:	eba3 0901 	sub.w	r9, r3, r1
 8004e54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e58:	1c7b      	adds	r3, r7, #1
 8004e5a:	444b      	add	r3, r9
 8004e5c:	106d      	asrs	r5, r5, #1
 8004e5e:	429d      	cmp	r5, r3
 8004e60:	bf38      	it	cc
 8004e62:	461d      	movcc	r5, r3
 8004e64:	0553      	lsls	r3, r2, #21
 8004e66:	d527      	bpl.n	8004eb8 <__ssputs_r+0x8c>
 8004e68:	4629      	mov	r1, r5
 8004e6a:	f7ff fbd7 	bl	800461c <_malloc_r>
 8004e6e:	4606      	mov	r6, r0
 8004e70:	b360      	cbz	r0, 8004ecc <__ssputs_r+0xa0>
 8004e72:	6921      	ldr	r1, [r4, #16]
 8004e74:	464a      	mov	r2, r9
 8004e76:	f7fe fcd3 	bl	8003820 <memcpy>
 8004e7a:	89a3      	ldrh	r3, [r4, #12]
 8004e7c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e84:	81a3      	strh	r3, [r4, #12]
 8004e86:	6126      	str	r6, [r4, #16]
 8004e88:	6165      	str	r5, [r4, #20]
 8004e8a:	444e      	add	r6, r9
 8004e8c:	eba5 0509 	sub.w	r5, r5, r9
 8004e90:	6026      	str	r6, [r4, #0]
 8004e92:	60a5      	str	r5, [r4, #8]
 8004e94:	463e      	mov	r6, r7
 8004e96:	42be      	cmp	r6, r7
 8004e98:	d900      	bls.n	8004e9c <__ssputs_r+0x70>
 8004e9a:	463e      	mov	r6, r7
 8004e9c:	6820      	ldr	r0, [r4, #0]
 8004e9e:	4632      	mov	r2, r6
 8004ea0:	4641      	mov	r1, r8
 8004ea2:	f000 fc05 	bl	80056b0 <memmove>
 8004ea6:	68a3      	ldr	r3, [r4, #8]
 8004ea8:	1b9b      	subs	r3, r3, r6
 8004eaa:	60a3      	str	r3, [r4, #8]
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	4433      	add	r3, r6
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eb8:	462a      	mov	r2, r5
 8004eba:	f000 fc8b 	bl	80057d4 <_realloc_r>
 8004ebe:	4606      	mov	r6, r0
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	d1e0      	bne.n	8004e86 <__ssputs_r+0x5a>
 8004ec4:	6921      	ldr	r1, [r4, #16]
 8004ec6:	4650      	mov	r0, sl
 8004ec8:	f7ff fb34 	bl	8004534 <_free_r>
 8004ecc:	230c      	movs	r3, #12
 8004ece:	f8ca 3000 	str.w	r3, [sl]
 8004ed2:	89a3      	ldrh	r3, [r4, #12]
 8004ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ed8:	81a3      	strh	r3, [r4, #12]
 8004eda:	f04f 30ff 	mov.w	r0, #4294967295
 8004ede:	e7e9      	b.n	8004eb4 <__ssputs_r+0x88>

08004ee0 <_svfiprintf_r>:
 8004ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee4:	4698      	mov	r8, r3
 8004ee6:	898b      	ldrh	r3, [r1, #12]
 8004ee8:	061b      	lsls	r3, r3, #24
 8004eea:	b09d      	sub	sp, #116	; 0x74
 8004eec:	4607      	mov	r7, r0
 8004eee:	460d      	mov	r5, r1
 8004ef0:	4614      	mov	r4, r2
 8004ef2:	d50e      	bpl.n	8004f12 <_svfiprintf_r+0x32>
 8004ef4:	690b      	ldr	r3, [r1, #16]
 8004ef6:	b963      	cbnz	r3, 8004f12 <_svfiprintf_r+0x32>
 8004ef8:	2140      	movs	r1, #64	; 0x40
 8004efa:	f7ff fb8f 	bl	800461c <_malloc_r>
 8004efe:	6028      	str	r0, [r5, #0]
 8004f00:	6128      	str	r0, [r5, #16]
 8004f02:	b920      	cbnz	r0, 8004f0e <_svfiprintf_r+0x2e>
 8004f04:	230c      	movs	r3, #12
 8004f06:	603b      	str	r3, [r7, #0]
 8004f08:	f04f 30ff 	mov.w	r0, #4294967295
 8004f0c:	e0d0      	b.n	80050b0 <_svfiprintf_r+0x1d0>
 8004f0e:	2340      	movs	r3, #64	; 0x40
 8004f10:	616b      	str	r3, [r5, #20]
 8004f12:	2300      	movs	r3, #0
 8004f14:	9309      	str	r3, [sp, #36]	; 0x24
 8004f16:	2320      	movs	r3, #32
 8004f18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f20:	2330      	movs	r3, #48	; 0x30
 8004f22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80050c8 <_svfiprintf_r+0x1e8>
 8004f26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f2a:	f04f 0901 	mov.w	r9, #1
 8004f2e:	4623      	mov	r3, r4
 8004f30:	469a      	mov	sl, r3
 8004f32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f36:	b10a      	cbz	r2, 8004f3c <_svfiprintf_r+0x5c>
 8004f38:	2a25      	cmp	r2, #37	; 0x25
 8004f3a:	d1f9      	bne.n	8004f30 <_svfiprintf_r+0x50>
 8004f3c:	ebba 0b04 	subs.w	fp, sl, r4
 8004f40:	d00b      	beq.n	8004f5a <_svfiprintf_r+0x7a>
 8004f42:	465b      	mov	r3, fp
 8004f44:	4622      	mov	r2, r4
 8004f46:	4629      	mov	r1, r5
 8004f48:	4638      	mov	r0, r7
 8004f4a:	f7ff ff6f 	bl	8004e2c <__ssputs_r>
 8004f4e:	3001      	adds	r0, #1
 8004f50:	f000 80a9 	beq.w	80050a6 <_svfiprintf_r+0x1c6>
 8004f54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f56:	445a      	add	r2, fp
 8004f58:	9209      	str	r2, [sp, #36]	; 0x24
 8004f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 80a1 	beq.w	80050a6 <_svfiprintf_r+0x1c6>
 8004f64:	2300      	movs	r3, #0
 8004f66:	f04f 32ff 	mov.w	r2, #4294967295
 8004f6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f6e:	f10a 0a01 	add.w	sl, sl, #1
 8004f72:	9304      	str	r3, [sp, #16]
 8004f74:	9307      	str	r3, [sp, #28]
 8004f76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f7a:	931a      	str	r3, [sp, #104]	; 0x68
 8004f7c:	4654      	mov	r4, sl
 8004f7e:	2205      	movs	r2, #5
 8004f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f84:	4850      	ldr	r0, [pc, #320]	; (80050c8 <_svfiprintf_r+0x1e8>)
 8004f86:	f7fb f923 	bl	80001d0 <memchr>
 8004f8a:	9a04      	ldr	r2, [sp, #16]
 8004f8c:	b9d8      	cbnz	r0, 8004fc6 <_svfiprintf_r+0xe6>
 8004f8e:	06d0      	lsls	r0, r2, #27
 8004f90:	bf44      	itt	mi
 8004f92:	2320      	movmi	r3, #32
 8004f94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f98:	0711      	lsls	r1, r2, #28
 8004f9a:	bf44      	itt	mi
 8004f9c:	232b      	movmi	r3, #43	; 0x2b
 8004f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fa2:	f89a 3000 	ldrb.w	r3, [sl]
 8004fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8004fa8:	d015      	beq.n	8004fd6 <_svfiprintf_r+0xf6>
 8004faa:	9a07      	ldr	r2, [sp, #28]
 8004fac:	4654      	mov	r4, sl
 8004fae:	2000      	movs	r0, #0
 8004fb0:	f04f 0c0a 	mov.w	ip, #10
 8004fb4:	4621      	mov	r1, r4
 8004fb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fba:	3b30      	subs	r3, #48	; 0x30
 8004fbc:	2b09      	cmp	r3, #9
 8004fbe:	d94d      	bls.n	800505c <_svfiprintf_r+0x17c>
 8004fc0:	b1b0      	cbz	r0, 8004ff0 <_svfiprintf_r+0x110>
 8004fc2:	9207      	str	r2, [sp, #28]
 8004fc4:	e014      	b.n	8004ff0 <_svfiprintf_r+0x110>
 8004fc6:	eba0 0308 	sub.w	r3, r0, r8
 8004fca:	fa09 f303 	lsl.w	r3, r9, r3
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	9304      	str	r3, [sp, #16]
 8004fd2:	46a2      	mov	sl, r4
 8004fd4:	e7d2      	b.n	8004f7c <_svfiprintf_r+0x9c>
 8004fd6:	9b03      	ldr	r3, [sp, #12]
 8004fd8:	1d19      	adds	r1, r3, #4
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	9103      	str	r1, [sp, #12]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	bfbb      	ittet	lt
 8004fe2:	425b      	neglt	r3, r3
 8004fe4:	f042 0202 	orrlt.w	r2, r2, #2
 8004fe8:	9307      	strge	r3, [sp, #28]
 8004fea:	9307      	strlt	r3, [sp, #28]
 8004fec:	bfb8      	it	lt
 8004fee:	9204      	strlt	r2, [sp, #16]
 8004ff0:	7823      	ldrb	r3, [r4, #0]
 8004ff2:	2b2e      	cmp	r3, #46	; 0x2e
 8004ff4:	d10c      	bne.n	8005010 <_svfiprintf_r+0x130>
 8004ff6:	7863      	ldrb	r3, [r4, #1]
 8004ff8:	2b2a      	cmp	r3, #42	; 0x2a
 8004ffa:	d134      	bne.n	8005066 <_svfiprintf_r+0x186>
 8004ffc:	9b03      	ldr	r3, [sp, #12]
 8004ffe:	1d1a      	adds	r2, r3, #4
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	9203      	str	r2, [sp, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	bfb8      	it	lt
 8005008:	f04f 33ff 	movlt.w	r3, #4294967295
 800500c:	3402      	adds	r4, #2
 800500e:	9305      	str	r3, [sp, #20]
 8005010:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80050d8 <_svfiprintf_r+0x1f8>
 8005014:	7821      	ldrb	r1, [r4, #0]
 8005016:	2203      	movs	r2, #3
 8005018:	4650      	mov	r0, sl
 800501a:	f7fb f8d9 	bl	80001d0 <memchr>
 800501e:	b138      	cbz	r0, 8005030 <_svfiprintf_r+0x150>
 8005020:	9b04      	ldr	r3, [sp, #16]
 8005022:	eba0 000a 	sub.w	r0, r0, sl
 8005026:	2240      	movs	r2, #64	; 0x40
 8005028:	4082      	lsls	r2, r0
 800502a:	4313      	orrs	r3, r2
 800502c:	3401      	adds	r4, #1
 800502e:	9304      	str	r3, [sp, #16]
 8005030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005034:	4825      	ldr	r0, [pc, #148]	; (80050cc <_svfiprintf_r+0x1ec>)
 8005036:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800503a:	2206      	movs	r2, #6
 800503c:	f7fb f8c8 	bl	80001d0 <memchr>
 8005040:	2800      	cmp	r0, #0
 8005042:	d038      	beq.n	80050b6 <_svfiprintf_r+0x1d6>
 8005044:	4b22      	ldr	r3, [pc, #136]	; (80050d0 <_svfiprintf_r+0x1f0>)
 8005046:	bb1b      	cbnz	r3, 8005090 <_svfiprintf_r+0x1b0>
 8005048:	9b03      	ldr	r3, [sp, #12]
 800504a:	3307      	adds	r3, #7
 800504c:	f023 0307 	bic.w	r3, r3, #7
 8005050:	3308      	adds	r3, #8
 8005052:	9303      	str	r3, [sp, #12]
 8005054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005056:	4433      	add	r3, r6
 8005058:	9309      	str	r3, [sp, #36]	; 0x24
 800505a:	e768      	b.n	8004f2e <_svfiprintf_r+0x4e>
 800505c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005060:	460c      	mov	r4, r1
 8005062:	2001      	movs	r0, #1
 8005064:	e7a6      	b.n	8004fb4 <_svfiprintf_r+0xd4>
 8005066:	2300      	movs	r3, #0
 8005068:	3401      	adds	r4, #1
 800506a:	9305      	str	r3, [sp, #20]
 800506c:	4619      	mov	r1, r3
 800506e:	f04f 0c0a 	mov.w	ip, #10
 8005072:	4620      	mov	r0, r4
 8005074:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005078:	3a30      	subs	r2, #48	; 0x30
 800507a:	2a09      	cmp	r2, #9
 800507c:	d903      	bls.n	8005086 <_svfiprintf_r+0x1a6>
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0c6      	beq.n	8005010 <_svfiprintf_r+0x130>
 8005082:	9105      	str	r1, [sp, #20]
 8005084:	e7c4      	b.n	8005010 <_svfiprintf_r+0x130>
 8005086:	fb0c 2101 	mla	r1, ip, r1, r2
 800508a:	4604      	mov	r4, r0
 800508c:	2301      	movs	r3, #1
 800508e:	e7f0      	b.n	8005072 <_svfiprintf_r+0x192>
 8005090:	ab03      	add	r3, sp, #12
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	462a      	mov	r2, r5
 8005096:	4b0f      	ldr	r3, [pc, #60]	; (80050d4 <_svfiprintf_r+0x1f4>)
 8005098:	a904      	add	r1, sp, #16
 800509a:	4638      	mov	r0, r7
 800509c:	f7fd fdc4 	bl	8002c28 <_printf_float>
 80050a0:	1c42      	adds	r2, r0, #1
 80050a2:	4606      	mov	r6, r0
 80050a4:	d1d6      	bne.n	8005054 <_svfiprintf_r+0x174>
 80050a6:	89ab      	ldrh	r3, [r5, #12]
 80050a8:	065b      	lsls	r3, r3, #25
 80050aa:	f53f af2d 	bmi.w	8004f08 <_svfiprintf_r+0x28>
 80050ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050b0:	b01d      	add	sp, #116	; 0x74
 80050b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b6:	ab03      	add	r3, sp, #12
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	462a      	mov	r2, r5
 80050bc:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <_svfiprintf_r+0x1f4>)
 80050be:	a904      	add	r1, sp, #16
 80050c0:	4638      	mov	r0, r7
 80050c2:	f7fe f855 	bl	8003170 <_printf_i>
 80050c6:	e7eb      	b.n	80050a0 <_svfiprintf_r+0x1c0>
 80050c8:	08005d5c 	.word	0x08005d5c
 80050cc:	08005d66 	.word	0x08005d66
 80050d0:	08002c29 	.word	0x08002c29
 80050d4:	08004e2d 	.word	0x08004e2d
 80050d8:	08005d62 	.word	0x08005d62

080050dc <__sfputc_r>:
 80050dc:	6893      	ldr	r3, [r2, #8]
 80050de:	3b01      	subs	r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	b410      	push	{r4}
 80050e4:	6093      	str	r3, [r2, #8]
 80050e6:	da08      	bge.n	80050fa <__sfputc_r+0x1e>
 80050e8:	6994      	ldr	r4, [r2, #24]
 80050ea:	42a3      	cmp	r3, r4
 80050ec:	db01      	blt.n	80050f2 <__sfputc_r+0x16>
 80050ee:	290a      	cmp	r1, #10
 80050f0:	d103      	bne.n	80050fa <__sfputc_r+0x1e>
 80050f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050f6:	f000 ba45 	b.w	8005584 <__swbuf_r>
 80050fa:	6813      	ldr	r3, [r2, #0]
 80050fc:	1c58      	adds	r0, r3, #1
 80050fe:	6010      	str	r0, [r2, #0]
 8005100:	7019      	strb	r1, [r3, #0]
 8005102:	4608      	mov	r0, r1
 8005104:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005108:	4770      	bx	lr

0800510a <__sfputs_r>:
 800510a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510c:	4606      	mov	r6, r0
 800510e:	460f      	mov	r7, r1
 8005110:	4614      	mov	r4, r2
 8005112:	18d5      	adds	r5, r2, r3
 8005114:	42ac      	cmp	r4, r5
 8005116:	d101      	bne.n	800511c <__sfputs_r+0x12>
 8005118:	2000      	movs	r0, #0
 800511a:	e007      	b.n	800512c <__sfputs_r+0x22>
 800511c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005120:	463a      	mov	r2, r7
 8005122:	4630      	mov	r0, r6
 8005124:	f7ff ffda 	bl	80050dc <__sfputc_r>
 8005128:	1c43      	adds	r3, r0, #1
 800512a:	d1f3      	bne.n	8005114 <__sfputs_r+0xa>
 800512c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005130 <_vfiprintf_r>:
 8005130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005134:	460d      	mov	r5, r1
 8005136:	b09d      	sub	sp, #116	; 0x74
 8005138:	4614      	mov	r4, r2
 800513a:	4698      	mov	r8, r3
 800513c:	4606      	mov	r6, r0
 800513e:	b118      	cbz	r0, 8005148 <_vfiprintf_r+0x18>
 8005140:	6a03      	ldr	r3, [r0, #32]
 8005142:	b90b      	cbnz	r3, 8005148 <_vfiprintf_r+0x18>
 8005144:	f7fe f9b0 	bl	80034a8 <__sinit>
 8005148:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800514a:	07d9      	lsls	r1, r3, #31
 800514c:	d405      	bmi.n	800515a <_vfiprintf_r+0x2a>
 800514e:	89ab      	ldrh	r3, [r5, #12]
 8005150:	059a      	lsls	r2, r3, #22
 8005152:	d402      	bmi.n	800515a <_vfiprintf_r+0x2a>
 8005154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005156:	f7fe fb61 	bl	800381c <__retarget_lock_acquire_recursive>
 800515a:	89ab      	ldrh	r3, [r5, #12]
 800515c:	071b      	lsls	r3, r3, #28
 800515e:	d501      	bpl.n	8005164 <_vfiprintf_r+0x34>
 8005160:	692b      	ldr	r3, [r5, #16]
 8005162:	b99b      	cbnz	r3, 800518c <_vfiprintf_r+0x5c>
 8005164:	4629      	mov	r1, r5
 8005166:	4630      	mov	r0, r6
 8005168:	f000 fa4a 	bl	8005600 <__swsetup_r>
 800516c:	b170      	cbz	r0, 800518c <_vfiprintf_r+0x5c>
 800516e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005170:	07dc      	lsls	r4, r3, #31
 8005172:	d504      	bpl.n	800517e <_vfiprintf_r+0x4e>
 8005174:	f04f 30ff 	mov.w	r0, #4294967295
 8005178:	b01d      	add	sp, #116	; 0x74
 800517a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800517e:	89ab      	ldrh	r3, [r5, #12]
 8005180:	0598      	lsls	r0, r3, #22
 8005182:	d4f7      	bmi.n	8005174 <_vfiprintf_r+0x44>
 8005184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005186:	f7fe fb4a 	bl	800381e <__retarget_lock_release_recursive>
 800518a:	e7f3      	b.n	8005174 <_vfiprintf_r+0x44>
 800518c:	2300      	movs	r3, #0
 800518e:	9309      	str	r3, [sp, #36]	; 0x24
 8005190:	2320      	movs	r3, #32
 8005192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005196:	f8cd 800c 	str.w	r8, [sp, #12]
 800519a:	2330      	movs	r3, #48	; 0x30
 800519c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005350 <_vfiprintf_r+0x220>
 80051a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051a4:	f04f 0901 	mov.w	r9, #1
 80051a8:	4623      	mov	r3, r4
 80051aa:	469a      	mov	sl, r3
 80051ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051b0:	b10a      	cbz	r2, 80051b6 <_vfiprintf_r+0x86>
 80051b2:	2a25      	cmp	r2, #37	; 0x25
 80051b4:	d1f9      	bne.n	80051aa <_vfiprintf_r+0x7a>
 80051b6:	ebba 0b04 	subs.w	fp, sl, r4
 80051ba:	d00b      	beq.n	80051d4 <_vfiprintf_r+0xa4>
 80051bc:	465b      	mov	r3, fp
 80051be:	4622      	mov	r2, r4
 80051c0:	4629      	mov	r1, r5
 80051c2:	4630      	mov	r0, r6
 80051c4:	f7ff ffa1 	bl	800510a <__sfputs_r>
 80051c8:	3001      	adds	r0, #1
 80051ca:	f000 80a9 	beq.w	8005320 <_vfiprintf_r+0x1f0>
 80051ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051d0:	445a      	add	r2, fp
 80051d2:	9209      	str	r2, [sp, #36]	; 0x24
 80051d4:	f89a 3000 	ldrb.w	r3, [sl]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 80a1 	beq.w	8005320 <_vfiprintf_r+0x1f0>
 80051de:	2300      	movs	r3, #0
 80051e0:	f04f 32ff 	mov.w	r2, #4294967295
 80051e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051e8:	f10a 0a01 	add.w	sl, sl, #1
 80051ec:	9304      	str	r3, [sp, #16]
 80051ee:	9307      	str	r3, [sp, #28]
 80051f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051f4:	931a      	str	r3, [sp, #104]	; 0x68
 80051f6:	4654      	mov	r4, sl
 80051f8:	2205      	movs	r2, #5
 80051fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051fe:	4854      	ldr	r0, [pc, #336]	; (8005350 <_vfiprintf_r+0x220>)
 8005200:	f7fa ffe6 	bl	80001d0 <memchr>
 8005204:	9a04      	ldr	r2, [sp, #16]
 8005206:	b9d8      	cbnz	r0, 8005240 <_vfiprintf_r+0x110>
 8005208:	06d1      	lsls	r1, r2, #27
 800520a:	bf44      	itt	mi
 800520c:	2320      	movmi	r3, #32
 800520e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005212:	0713      	lsls	r3, r2, #28
 8005214:	bf44      	itt	mi
 8005216:	232b      	movmi	r3, #43	; 0x2b
 8005218:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800521c:	f89a 3000 	ldrb.w	r3, [sl]
 8005220:	2b2a      	cmp	r3, #42	; 0x2a
 8005222:	d015      	beq.n	8005250 <_vfiprintf_r+0x120>
 8005224:	9a07      	ldr	r2, [sp, #28]
 8005226:	4654      	mov	r4, sl
 8005228:	2000      	movs	r0, #0
 800522a:	f04f 0c0a 	mov.w	ip, #10
 800522e:	4621      	mov	r1, r4
 8005230:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005234:	3b30      	subs	r3, #48	; 0x30
 8005236:	2b09      	cmp	r3, #9
 8005238:	d94d      	bls.n	80052d6 <_vfiprintf_r+0x1a6>
 800523a:	b1b0      	cbz	r0, 800526a <_vfiprintf_r+0x13a>
 800523c:	9207      	str	r2, [sp, #28]
 800523e:	e014      	b.n	800526a <_vfiprintf_r+0x13a>
 8005240:	eba0 0308 	sub.w	r3, r0, r8
 8005244:	fa09 f303 	lsl.w	r3, r9, r3
 8005248:	4313      	orrs	r3, r2
 800524a:	9304      	str	r3, [sp, #16]
 800524c:	46a2      	mov	sl, r4
 800524e:	e7d2      	b.n	80051f6 <_vfiprintf_r+0xc6>
 8005250:	9b03      	ldr	r3, [sp, #12]
 8005252:	1d19      	adds	r1, r3, #4
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	9103      	str	r1, [sp, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	bfbb      	ittet	lt
 800525c:	425b      	neglt	r3, r3
 800525e:	f042 0202 	orrlt.w	r2, r2, #2
 8005262:	9307      	strge	r3, [sp, #28]
 8005264:	9307      	strlt	r3, [sp, #28]
 8005266:	bfb8      	it	lt
 8005268:	9204      	strlt	r2, [sp, #16]
 800526a:	7823      	ldrb	r3, [r4, #0]
 800526c:	2b2e      	cmp	r3, #46	; 0x2e
 800526e:	d10c      	bne.n	800528a <_vfiprintf_r+0x15a>
 8005270:	7863      	ldrb	r3, [r4, #1]
 8005272:	2b2a      	cmp	r3, #42	; 0x2a
 8005274:	d134      	bne.n	80052e0 <_vfiprintf_r+0x1b0>
 8005276:	9b03      	ldr	r3, [sp, #12]
 8005278:	1d1a      	adds	r2, r3, #4
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	9203      	str	r2, [sp, #12]
 800527e:	2b00      	cmp	r3, #0
 8005280:	bfb8      	it	lt
 8005282:	f04f 33ff 	movlt.w	r3, #4294967295
 8005286:	3402      	adds	r4, #2
 8005288:	9305      	str	r3, [sp, #20]
 800528a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005360 <_vfiprintf_r+0x230>
 800528e:	7821      	ldrb	r1, [r4, #0]
 8005290:	2203      	movs	r2, #3
 8005292:	4650      	mov	r0, sl
 8005294:	f7fa ff9c 	bl	80001d0 <memchr>
 8005298:	b138      	cbz	r0, 80052aa <_vfiprintf_r+0x17a>
 800529a:	9b04      	ldr	r3, [sp, #16]
 800529c:	eba0 000a 	sub.w	r0, r0, sl
 80052a0:	2240      	movs	r2, #64	; 0x40
 80052a2:	4082      	lsls	r2, r0
 80052a4:	4313      	orrs	r3, r2
 80052a6:	3401      	adds	r4, #1
 80052a8:	9304      	str	r3, [sp, #16]
 80052aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ae:	4829      	ldr	r0, [pc, #164]	; (8005354 <_vfiprintf_r+0x224>)
 80052b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052b4:	2206      	movs	r2, #6
 80052b6:	f7fa ff8b 	bl	80001d0 <memchr>
 80052ba:	2800      	cmp	r0, #0
 80052bc:	d03f      	beq.n	800533e <_vfiprintf_r+0x20e>
 80052be:	4b26      	ldr	r3, [pc, #152]	; (8005358 <_vfiprintf_r+0x228>)
 80052c0:	bb1b      	cbnz	r3, 800530a <_vfiprintf_r+0x1da>
 80052c2:	9b03      	ldr	r3, [sp, #12]
 80052c4:	3307      	adds	r3, #7
 80052c6:	f023 0307 	bic.w	r3, r3, #7
 80052ca:	3308      	adds	r3, #8
 80052cc:	9303      	str	r3, [sp, #12]
 80052ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052d0:	443b      	add	r3, r7
 80052d2:	9309      	str	r3, [sp, #36]	; 0x24
 80052d4:	e768      	b.n	80051a8 <_vfiprintf_r+0x78>
 80052d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80052da:	460c      	mov	r4, r1
 80052dc:	2001      	movs	r0, #1
 80052de:	e7a6      	b.n	800522e <_vfiprintf_r+0xfe>
 80052e0:	2300      	movs	r3, #0
 80052e2:	3401      	adds	r4, #1
 80052e4:	9305      	str	r3, [sp, #20]
 80052e6:	4619      	mov	r1, r3
 80052e8:	f04f 0c0a 	mov.w	ip, #10
 80052ec:	4620      	mov	r0, r4
 80052ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052f2:	3a30      	subs	r2, #48	; 0x30
 80052f4:	2a09      	cmp	r2, #9
 80052f6:	d903      	bls.n	8005300 <_vfiprintf_r+0x1d0>
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0c6      	beq.n	800528a <_vfiprintf_r+0x15a>
 80052fc:	9105      	str	r1, [sp, #20]
 80052fe:	e7c4      	b.n	800528a <_vfiprintf_r+0x15a>
 8005300:	fb0c 2101 	mla	r1, ip, r1, r2
 8005304:	4604      	mov	r4, r0
 8005306:	2301      	movs	r3, #1
 8005308:	e7f0      	b.n	80052ec <_vfiprintf_r+0x1bc>
 800530a:	ab03      	add	r3, sp, #12
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	462a      	mov	r2, r5
 8005310:	4b12      	ldr	r3, [pc, #72]	; (800535c <_vfiprintf_r+0x22c>)
 8005312:	a904      	add	r1, sp, #16
 8005314:	4630      	mov	r0, r6
 8005316:	f7fd fc87 	bl	8002c28 <_printf_float>
 800531a:	4607      	mov	r7, r0
 800531c:	1c78      	adds	r0, r7, #1
 800531e:	d1d6      	bne.n	80052ce <_vfiprintf_r+0x19e>
 8005320:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005322:	07d9      	lsls	r1, r3, #31
 8005324:	d405      	bmi.n	8005332 <_vfiprintf_r+0x202>
 8005326:	89ab      	ldrh	r3, [r5, #12]
 8005328:	059a      	lsls	r2, r3, #22
 800532a:	d402      	bmi.n	8005332 <_vfiprintf_r+0x202>
 800532c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800532e:	f7fe fa76 	bl	800381e <__retarget_lock_release_recursive>
 8005332:	89ab      	ldrh	r3, [r5, #12]
 8005334:	065b      	lsls	r3, r3, #25
 8005336:	f53f af1d 	bmi.w	8005174 <_vfiprintf_r+0x44>
 800533a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800533c:	e71c      	b.n	8005178 <_vfiprintf_r+0x48>
 800533e:	ab03      	add	r3, sp, #12
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	462a      	mov	r2, r5
 8005344:	4b05      	ldr	r3, [pc, #20]	; (800535c <_vfiprintf_r+0x22c>)
 8005346:	a904      	add	r1, sp, #16
 8005348:	4630      	mov	r0, r6
 800534a:	f7fd ff11 	bl	8003170 <_printf_i>
 800534e:	e7e4      	b.n	800531a <_vfiprintf_r+0x1ea>
 8005350:	08005d5c 	.word	0x08005d5c
 8005354:	08005d66 	.word	0x08005d66
 8005358:	08002c29 	.word	0x08002c29
 800535c:	0800510b 	.word	0x0800510b
 8005360:	08005d62 	.word	0x08005d62

08005364 <__sflush_r>:
 8005364:	898a      	ldrh	r2, [r1, #12]
 8005366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800536a:	4605      	mov	r5, r0
 800536c:	0710      	lsls	r0, r2, #28
 800536e:	460c      	mov	r4, r1
 8005370:	d458      	bmi.n	8005424 <__sflush_r+0xc0>
 8005372:	684b      	ldr	r3, [r1, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	dc05      	bgt.n	8005384 <__sflush_r+0x20>
 8005378:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800537a:	2b00      	cmp	r3, #0
 800537c:	dc02      	bgt.n	8005384 <__sflush_r+0x20>
 800537e:	2000      	movs	r0, #0
 8005380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005384:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005386:	2e00      	cmp	r6, #0
 8005388:	d0f9      	beq.n	800537e <__sflush_r+0x1a>
 800538a:	2300      	movs	r3, #0
 800538c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005390:	682f      	ldr	r7, [r5, #0]
 8005392:	6a21      	ldr	r1, [r4, #32]
 8005394:	602b      	str	r3, [r5, #0]
 8005396:	d032      	beq.n	80053fe <__sflush_r+0x9a>
 8005398:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800539a:	89a3      	ldrh	r3, [r4, #12]
 800539c:	075a      	lsls	r2, r3, #29
 800539e:	d505      	bpl.n	80053ac <__sflush_r+0x48>
 80053a0:	6863      	ldr	r3, [r4, #4]
 80053a2:	1ac0      	subs	r0, r0, r3
 80053a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053a6:	b10b      	cbz	r3, 80053ac <__sflush_r+0x48>
 80053a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053aa:	1ac0      	subs	r0, r0, r3
 80053ac:	2300      	movs	r3, #0
 80053ae:	4602      	mov	r2, r0
 80053b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053b2:	6a21      	ldr	r1, [r4, #32]
 80053b4:	4628      	mov	r0, r5
 80053b6:	47b0      	blx	r6
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	89a3      	ldrh	r3, [r4, #12]
 80053bc:	d106      	bne.n	80053cc <__sflush_r+0x68>
 80053be:	6829      	ldr	r1, [r5, #0]
 80053c0:	291d      	cmp	r1, #29
 80053c2:	d82b      	bhi.n	800541c <__sflush_r+0xb8>
 80053c4:	4a29      	ldr	r2, [pc, #164]	; (800546c <__sflush_r+0x108>)
 80053c6:	410a      	asrs	r2, r1
 80053c8:	07d6      	lsls	r6, r2, #31
 80053ca:	d427      	bmi.n	800541c <__sflush_r+0xb8>
 80053cc:	2200      	movs	r2, #0
 80053ce:	6062      	str	r2, [r4, #4]
 80053d0:	04d9      	lsls	r1, r3, #19
 80053d2:	6922      	ldr	r2, [r4, #16]
 80053d4:	6022      	str	r2, [r4, #0]
 80053d6:	d504      	bpl.n	80053e2 <__sflush_r+0x7e>
 80053d8:	1c42      	adds	r2, r0, #1
 80053da:	d101      	bne.n	80053e0 <__sflush_r+0x7c>
 80053dc:	682b      	ldr	r3, [r5, #0]
 80053de:	b903      	cbnz	r3, 80053e2 <__sflush_r+0x7e>
 80053e0:	6560      	str	r0, [r4, #84]	; 0x54
 80053e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053e4:	602f      	str	r7, [r5, #0]
 80053e6:	2900      	cmp	r1, #0
 80053e8:	d0c9      	beq.n	800537e <__sflush_r+0x1a>
 80053ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053ee:	4299      	cmp	r1, r3
 80053f0:	d002      	beq.n	80053f8 <__sflush_r+0x94>
 80053f2:	4628      	mov	r0, r5
 80053f4:	f7ff f89e 	bl	8004534 <_free_r>
 80053f8:	2000      	movs	r0, #0
 80053fa:	6360      	str	r0, [r4, #52]	; 0x34
 80053fc:	e7c0      	b.n	8005380 <__sflush_r+0x1c>
 80053fe:	2301      	movs	r3, #1
 8005400:	4628      	mov	r0, r5
 8005402:	47b0      	blx	r6
 8005404:	1c41      	adds	r1, r0, #1
 8005406:	d1c8      	bne.n	800539a <__sflush_r+0x36>
 8005408:	682b      	ldr	r3, [r5, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0c5      	beq.n	800539a <__sflush_r+0x36>
 800540e:	2b1d      	cmp	r3, #29
 8005410:	d001      	beq.n	8005416 <__sflush_r+0xb2>
 8005412:	2b16      	cmp	r3, #22
 8005414:	d101      	bne.n	800541a <__sflush_r+0xb6>
 8005416:	602f      	str	r7, [r5, #0]
 8005418:	e7b1      	b.n	800537e <__sflush_r+0x1a>
 800541a:	89a3      	ldrh	r3, [r4, #12]
 800541c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005420:	81a3      	strh	r3, [r4, #12]
 8005422:	e7ad      	b.n	8005380 <__sflush_r+0x1c>
 8005424:	690f      	ldr	r7, [r1, #16]
 8005426:	2f00      	cmp	r7, #0
 8005428:	d0a9      	beq.n	800537e <__sflush_r+0x1a>
 800542a:	0793      	lsls	r3, r2, #30
 800542c:	680e      	ldr	r6, [r1, #0]
 800542e:	bf08      	it	eq
 8005430:	694b      	ldreq	r3, [r1, #20]
 8005432:	600f      	str	r7, [r1, #0]
 8005434:	bf18      	it	ne
 8005436:	2300      	movne	r3, #0
 8005438:	eba6 0807 	sub.w	r8, r6, r7
 800543c:	608b      	str	r3, [r1, #8]
 800543e:	f1b8 0f00 	cmp.w	r8, #0
 8005442:	dd9c      	ble.n	800537e <__sflush_r+0x1a>
 8005444:	6a21      	ldr	r1, [r4, #32]
 8005446:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005448:	4643      	mov	r3, r8
 800544a:	463a      	mov	r2, r7
 800544c:	4628      	mov	r0, r5
 800544e:	47b0      	blx	r6
 8005450:	2800      	cmp	r0, #0
 8005452:	dc06      	bgt.n	8005462 <__sflush_r+0xfe>
 8005454:	89a3      	ldrh	r3, [r4, #12]
 8005456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800545a:	81a3      	strh	r3, [r4, #12]
 800545c:	f04f 30ff 	mov.w	r0, #4294967295
 8005460:	e78e      	b.n	8005380 <__sflush_r+0x1c>
 8005462:	4407      	add	r7, r0
 8005464:	eba8 0800 	sub.w	r8, r8, r0
 8005468:	e7e9      	b.n	800543e <__sflush_r+0xda>
 800546a:	bf00      	nop
 800546c:	dfbffffe 	.word	0xdfbffffe

08005470 <_fflush_r>:
 8005470:	b538      	push	{r3, r4, r5, lr}
 8005472:	690b      	ldr	r3, [r1, #16]
 8005474:	4605      	mov	r5, r0
 8005476:	460c      	mov	r4, r1
 8005478:	b913      	cbnz	r3, 8005480 <_fflush_r+0x10>
 800547a:	2500      	movs	r5, #0
 800547c:	4628      	mov	r0, r5
 800547e:	bd38      	pop	{r3, r4, r5, pc}
 8005480:	b118      	cbz	r0, 800548a <_fflush_r+0x1a>
 8005482:	6a03      	ldr	r3, [r0, #32]
 8005484:	b90b      	cbnz	r3, 800548a <_fflush_r+0x1a>
 8005486:	f7fe f80f 	bl	80034a8 <__sinit>
 800548a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d0f3      	beq.n	800547a <_fflush_r+0xa>
 8005492:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005494:	07d0      	lsls	r0, r2, #31
 8005496:	d404      	bmi.n	80054a2 <_fflush_r+0x32>
 8005498:	0599      	lsls	r1, r3, #22
 800549a:	d402      	bmi.n	80054a2 <_fflush_r+0x32>
 800549c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800549e:	f7fe f9bd 	bl	800381c <__retarget_lock_acquire_recursive>
 80054a2:	4628      	mov	r0, r5
 80054a4:	4621      	mov	r1, r4
 80054a6:	f7ff ff5d 	bl	8005364 <__sflush_r>
 80054aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054ac:	07da      	lsls	r2, r3, #31
 80054ae:	4605      	mov	r5, r0
 80054b0:	d4e4      	bmi.n	800547c <_fflush_r+0xc>
 80054b2:	89a3      	ldrh	r3, [r4, #12]
 80054b4:	059b      	lsls	r3, r3, #22
 80054b6:	d4e1      	bmi.n	800547c <_fflush_r+0xc>
 80054b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054ba:	f7fe f9b0 	bl	800381e <__retarget_lock_release_recursive>
 80054be:	e7dd      	b.n	800547c <_fflush_r+0xc>

080054c0 <__swhatbuf_r>:
 80054c0:	b570      	push	{r4, r5, r6, lr}
 80054c2:	460c      	mov	r4, r1
 80054c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054c8:	2900      	cmp	r1, #0
 80054ca:	b096      	sub	sp, #88	; 0x58
 80054cc:	4615      	mov	r5, r2
 80054ce:	461e      	mov	r6, r3
 80054d0:	da0d      	bge.n	80054ee <__swhatbuf_r+0x2e>
 80054d2:	89a3      	ldrh	r3, [r4, #12]
 80054d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80054d8:	f04f 0100 	mov.w	r1, #0
 80054dc:	bf0c      	ite	eq
 80054de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80054e2:	2340      	movne	r3, #64	; 0x40
 80054e4:	2000      	movs	r0, #0
 80054e6:	6031      	str	r1, [r6, #0]
 80054e8:	602b      	str	r3, [r5, #0]
 80054ea:	b016      	add	sp, #88	; 0x58
 80054ec:	bd70      	pop	{r4, r5, r6, pc}
 80054ee:	466a      	mov	r2, sp
 80054f0:	f000 f8f8 	bl	80056e4 <_fstat_r>
 80054f4:	2800      	cmp	r0, #0
 80054f6:	dbec      	blt.n	80054d2 <__swhatbuf_r+0x12>
 80054f8:	9901      	ldr	r1, [sp, #4]
 80054fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80054fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005502:	4259      	negs	r1, r3
 8005504:	4159      	adcs	r1, r3
 8005506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800550a:	e7eb      	b.n	80054e4 <__swhatbuf_r+0x24>

0800550c <__smakebuf_r>:
 800550c:	898b      	ldrh	r3, [r1, #12]
 800550e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005510:	079d      	lsls	r5, r3, #30
 8005512:	4606      	mov	r6, r0
 8005514:	460c      	mov	r4, r1
 8005516:	d507      	bpl.n	8005528 <__smakebuf_r+0x1c>
 8005518:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	6123      	str	r3, [r4, #16]
 8005520:	2301      	movs	r3, #1
 8005522:	6163      	str	r3, [r4, #20]
 8005524:	b002      	add	sp, #8
 8005526:	bd70      	pop	{r4, r5, r6, pc}
 8005528:	ab01      	add	r3, sp, #4
 800552a:	466a      	mov	r2, sp
 800552c:	f7ff ffc8 	bl	80054c0 <__swhatbuf_r>
 8005530:	9900      	ldr	r1, [sp, #0]
 8005532:	4605      	mov	r5, r0
 8005534:	4630      	mov	r0, r6
 8005536:	f7ff f871 	bl	800461c <_malloc_r>
 800553a:	b948      	cbnz	r0, 8005550 <__smakebuf_r+0x44>
 800553c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005540:	059a      	lsls	r2, r3, #22
 8005542:	d4ef      	bmi.n	8005524 <__smakebuf_r+0x18>
 8005544:	f023 0303 	bic.w	r3, r3, #3
 8005548:	f043 0302 	orr.w	r3, r3, #2
 800554c:	81a3      	strh	r3, [r4, #12]
 800554e:	e7e3      	b.n	8005518 <__smakebuf_r+0xc>
 8005550:	89a3      	ldrh	r3, [r4, #12]
 8005552:	6020      	str	r0, [r4, #0]
 8005554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005558:	81a3      	strh	r3, [r4, #12]
 800555a:	9b00      	ldr	r3, [sp, #0]
 800555c:	6163      	str	r3, [r4, #20]
 800555e:	9b01      	ldr	r3, [sp, #4]
 8005560:	6120      	str	r0, [r4, #16]
 8005562:	b15b      	cbz	r3, 800557c <__smakebuf_r+0x70>
 8005564:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005568:	4630      	mov	r0, r6
 800556a:	f000 f8cd 	bl	8005708 <_isatty_r>
 800556e:	b128      	cbz	r0, 800557c <__smakebuf_r+0x70>
 8005570:	89a3      	ldrh	r3, [r4, #12]
 8005572:	f023 0303 	bic.w	r3, r3, #3
 8005576:	f043 0301 	orr.w	r3, r3, #1
 800557a:	81a3      	strh	r3, [r4, #12]
 800557c:	89a3      	ldrh	r3, [r4, #12]
 800557e:	431d      	orrs	r5, r3
 8005580:	81a5      	strh	r5, [r4, #12]
 8005582:	e7cf      	b.n	8005524 <__smakebuf_r+0x18>

08005584 <__swbuf_r>:
 8005584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005586:	460e      	mov	r6, r1
 8005588:	4614      	mov	r4, r2
 800558a:	4605      	mov	r5, r0
 800558c:	b118      	cbz	r0, 8005596 <__swbuf_r+0x12>
 800558e:	6a03      	ldr	r3, [r0, #32]
 8005590:	b90b      	cbnz	r3, 8005596 <__swbuf_r+0x12>
 8005592:	f7fd ff89 	bl	80034a8 <__sinit>
 8005596:	69a3      	ldr	r3, [r4, #24]
 8005598:	60a3      	str	r3, [r4, #8]
 800559a:	89a3      	ldrh	r3, [r4, #12]
 800559c:	071a      	lsls	r2, r3, #28
 800559e:	d525      	bpl.n	80055ec <__swbuf_r+0x68>
 80055a0:	6923      	ldr	r3, [r4, #16]
 80055a2:	b31b      	cbz	r3, 80055ec <__swbuf_r+0x68>
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	6922      	ldr	r2, [r4, #16]
 80055a8:	1a98      	subs	r0, r3, r2
 80055aa:	6963      	ldr	r3, [r4, #20]
 80055ac:	b2f6      	uxtb	r6, r6
 80055ae:	4283      	cmp	r3, r0
 80055b0:	4637      	mov	r7, r6
 80055b2:	dc04      	bgt.n	80055be <__swbuf_r+0x3a>
 80055b4:	4621      	mov	r1, r4
 80055b6:	4628      	mov	r0, r5
 80055b8:	f7ff ff5a 	bl	8005470 <_fflush_r>
 80055bc:	b9e0      	cbnz	r0, 80055f8 <__swbuf_r+0x74>
 80055be:	68a3      	ldr	r3, [r4, #8]
 80055c0:	3b01      	subs	r3, #1
 80055c2:	60a3      	str	r3, [r4, #8]
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	6022      	str	r2, [r4, #0]
 80055ca:	701e      	strb	r6, [r3, #0]
 80055cc:	6962      	ldr	r2, [r4, #20]
 80055ce:	1c43      	adds	r3, r0, #1
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d004      	beq.n	80055de <__swbuf_r+0x5a>
 80055d4:	89a3      	ldrh	r3, [r4, #12]
 80055d6:	07db      	lsls	r3, r3, #31
 80055d8:	d506      	bpl.n	80055e8 <__swbuf_r+0x64>
 80055da:	2e0a      	cmp	r6, #10
 80055dc:	d104      	bne.n	80055e8 <__swbuf_r+0x64>
 80055de:	4621      	mov	r1, r4
 80055e0:	4628      	mov	r0, r5
 80055e2:	f7ff ff45 	bl	8005470 <_fflush_r>
 80055e6:	b938      	cbnz	r0, 80055f8 <__swbuf_r+0x74>
 80055e8:	4638      	mov	r0, r7
 80055ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055ec:	4621      	mov	r1, r4
 80055ee:	4628      	mov	r0, r5
 80055f0:	f000 f806 	bl	8005600 <__swsetup_r>
 80055f4:	2800      	cmp	r0, #0
 80055f6:	d0d5      	beq.n	80055a4 <__swbuf_r+0x20>
 80055f8:	f04f 37ff 	mov.w	r7, #4294967295
 80055fc:	e7f4      	b.n	80055e8 <__swbuf_r+0x64>
	...

08005600 <__swsetup_r>:
 8005600:	b538      	push	{r3, r4, r5, lr}
 8005602:	4b2a      	ldr	r3, [pc, #168]	; (80056ac <__swsetup_r+0xac>)
 8005604:	4605      	mov	r5, r0
 8005606:	6818      	ldr	r0, [r3, #0]
 8005608:	460c      	mov	r4, r1
 800560a:	b118      	cbz	r0, 8005614 <__swsetup_r+0x14>
 800560c:	6a03      	ldr	r3, [r0, #32]
 800560e:	b90b      	cbnz	r3, 8005614 <__swsetup_r+0x14>
 8005610:	f7fd ff4a 	bl	80034a8 <__sinit>
 8005614:	89a3      	ldrh	r3, [r4, #12]
 8005616:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800561a:	0718      	lsls	r0, r3, #28
 800561c:	d422      	bmi.n	8005664 <__swsetup_r+0x64>
 800561e:	06d9      	lsls	r1, r3, #27
 8005620:	d407      	bmi.n	8005632 <__swsetup_r+0x32>
 8005622:	2309      	movs	r3, #9
 8005624:	602b      	str	r3, [r5, #0]
 8005626:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800562a:	81a3      	strh	r3, [r4, #12]
 800562c:	f04f 30ff 	mov.w	r0, #4294967295
 8005630:	e034      	b.n	800569c <__swsetup_r+0x9c>
 8005632:	0758      	lsls	r0, r3, #29
 8005634:	d512      	bpl.n	800565c <__swsetup_r+0x5c>
 8005636:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005638:	b141      	cbz	r1, 800564c <__swsetup_r+0x4c>
 800563a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800563e:	4299      	cmp	r1, r3
 8005640:	d002      	beq.n	8005648 <__swsetup_r+0x48>
 8005642:	4628      	mov	r0, r5
 8005644:	f7fe ff76 	bl	8004534 <_free_r>
 8005648:	2300      	movs	r3, #0
 800564a:	6363      	str	r3, [r4, #52]	; 0x34
 800564c:	89a3      	ldrh	r3, [r4, #12]
 800564e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005652:	81a3      	strh	r3, [r4, #12]
 8005654:	2300      	movs	r3, #0
 8005656:	6063      	str	r3, [r4, #4]
 8005658:	6923      	ldr	r3, [r4, #16]
 800565a:	6023      	str	r3, [r4, #0]
 800565c:	89a3      	ldrh	r3, [r4, #12]
 800565e:	f043 0308 	orr.w	r3, r3, #8
 8005662:	81a3      	strh	r3, [r4, #12]
 8005664:	6923      	ldr	r3, [r4, #16]
 8005666:	b94b      	cbnz	r3, 800567c <__swsetup_r+0x7c>
 8005668:	89a3      	ldrh	r3, [r4, #12]
 800566a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800566e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005672:	d003      	beq.n	800567c <__swsetup_r+0x7c>
 8005674:	4621      	mov	r1, r4
 8005676:	4628      	mov	r0, r5
 8005678:	f7ff ff48 	bl	800550c <__smakebuf_r>
 800567c:	89a0      	ldrh	r0, [r4, #12]
 800567e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005682:	f010 0301 	ands.w	r3, r0, #1
 8005686:	d00a      	beq.n	800569e <__swsetup_r+0x9e>
 8005688:	2300      	movs	r3, #0
 800568a:	60a3      	str	r3, [r4, #8]
 800568c:	6963      	ldr	r3, [r4, #20]
 800568e:	425b      	negs	r3, r3
 8005690:	61a3      	str	r3, [r4, #24]
 8005692:	6923      	ldr	r3, [r4, #16]
 8005694:	b943      	cbnz	r3, 80056a8 <__swsetup_r+0xa8>
 8005696:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800569a:	d1c4      	bne.n	8005626 <__swsetup_r+0x26>
 800569c:	bd38      	pop	{r3, r4, r5, pc}
 800569e:	0781      	lsls	r1, r0, #30
 80056a0:	bf58      	it	pl
 80056a2:	6963      	ldrpl	r3, [r4, #20]
 80056a4:	60a3      	str	r3, [r4, #8]
 80056a6:	e7f4      	b.n	8005692 <__swsetup_r+0x92>
 80056a8:	2000      	movs	r0, #0
 80056aa:	e7f7      	b.n	800569c <__swsetup_r+0x9c>
 80056ac:	20000084 	.word	0x20000084

080056b0 <memmove>:
 80056b0:	4288      	cmp	r0, r1
 80056b2:	b510      	push	{r4, lr}
 80056b4:	eb01 0402 	add.w	r4, r1, r2
 80056b8:	d902      	bls.n	80056c0 <memmove+0x10>
 80056ba:	4284      	cmp	r4, r0
 80056bc:	4623      	mov	r3, r4
 80056be:	d807      	bhi.n	80056d0 <memmove+0x20>
 80056c0:	1e43      	subs	r3, r0, #1
 80056c2:	42a1      	cmp	r1, r4
 80056c4:	d008      	beq.n	80056d8 <memmove+0x28>
 80056c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056ce:	e7f8      	b.n	80056c2 <memmove+0x12>
 80056d0:	4402      	add	r2, r0
 80056d2:	4601      	mov	r1, r0
 80056d4:	428a      	cmp	r2, r1
 80056d6:	d100      	bne.n	80056da <memmove+0x2a>
 80056d8:	bd10      	pop	{r4, pc}
 80056da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056e2:	e7f7      	b.n	80056d4 <memmove+0x24>

080056e4 <_fstat_r>:
 80056e4:	b538      	push	{r3, r4, r5, lr}
 80056e6:	4d07      	ldr	r5, [pc, #28]	; (8005704 <_fstat_r+0x20>)
 80056e8:	2300      	movs	r3, #0
 80056ea:	4604      	mov	r4, r0
 80056ec:	4608      	mov	r0, r1
 80056ee:	4611      	mov	r1, r2
 80056f0:	602b      	str	r3, [r5, #0]
 80056f2:	f7fd f8e7 	bl	80028c4 <_fstat>
 80056f6:	1c43      	adds	r3, r0, #1
 80056f8:	d102      	bne.n	8005700 <_fstat_r+0x1c>
 80056fa:	682b      	ldr	r3, [r5, #0]
 80056fc:	b103      	cbz	r3, 8005700 <_fstat_r+0x1c>
 80056fe:	6023      	str	r3, [r4, #0]
 8005700:	bd38      	pop	{r3, r4, r5, pc}
 8005702:	bf00      	nop
 8005704:	20000464 	.word	0x20000464

08005708 <_isatty_r>:
 8005708:	b538      	push	{r3, r4, r5, lr}
 800570a:	4d06      	ldr	r5, [pc, #24]	; (8005724 <_isatty_r+0x1c>)
 800570c:	2300      	movs	r3, #0
 800570e:	4604      	mov	r4, r0
 8005710:	4608      	mov	r0, r1
 8005712:	602b      	str	r3, [r5, #0]
 8005714:	f7fd f8e6 	bl	80028e4 <_isatty>
 8005718:	1c43      	adds	r3, r0, #1
 800571a:	d102      	bne.n	8005722 <_isatty_r+0x1a>
 800571c:	682b      	ldr	r3, [r5, #0]
 800571e:	b103      	cbz	r3, 8005722 <_isatty_r+0x1a>
 8005720:	6023      	str	r3, [r4, #0]
 8005722:	bd38      	pop	{r3, r4, r5, pc}
 8005724:	20000464 	.word	0x20000464

08005728 <_sbrk_r>:
 8005728:	b538      	push	{r3, r4, r5, lr}
 800572a:	4d06      	ldr	r5, [pc, #24]	; (8005744 <_sbrk_r+0x1c>)
 800572c:	2300      	movs	r3, #0
 800572e:	4604      	mov	r4, r0
 8005730:	4608      	mov	r0, r1
 8005732:	602b      	str	r3, [r5, #0]
 8005734:	f7fd f8ee 	bl	8002914 <_sbrk>
 8005738:	1c43      	adds	r3, r0, #1
 800573a:	d102      	bne.n	8005742 <_sbrk_r+0x1a>
 800573c:	682b      	ldr	r3, [r5, #0]
 800573e:	b103      	cbz	r3, 8005742 <_sbrk_r+0x1a>
 8005740:	6023      	str	r3, [r4, #0]
 8005742:	bd38      	pop	{r3, r4, r5, pc}
 8005744:	20000464 	.word	0x20000464

08005748 <__assert_func>:
 8005748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800574a:	4614      	mov	r4, r2
 800574c:	461a      	mov	r2, r3
 800574e:	4b09      	ldr	r3, [pc, #36]	; (8005774 <__assert_func+0x2c>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4605      	mov	r5, r0
 8005754:	68d8      	ldr	r0, [r3, #12]
 8005756:	b14c      	cbz	r4, 800576c <__assert_func+0x24>
 8005758:	4b07      	ldr	r3, [pc, #28]	; (8005778 <__assert_func+0x30>)
 800575a:	9100      	str	r1, [sp, #0]
 800575c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005760:	4906      	ldr	r1, [pc, #24]	; (800577c <__assert_func+0x34>)
 8005762:	462b      	mov	r3, r5
 8005764:	f000 f872 	bl	800584c <fiprintf>
 8005768:	f000 f882 	bl	8005870 <abort>
 800576c:	4b04      	ldr	r3, [pc, #16]	; (8005780 <__assert_func+0x38>)
 800576e:	461c      	mov	r4, r3
 8005770:	e7f3      	b.n	800575a <__assert_func+0x12>
 8005772:	bf00      	nop
 8005774:	20000084 	.word	0x20000084
 8005778:	08005d77 	.word	0x08005d77
 800577c:	08005d84 	.word	0x08005d84
 8005780:	08005db2 	.word	0x08005db2

08005784 <_calloc_r>:
 8005784:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005786:	fba1 2402 	umull	r2, r4, r1, r2
 800578a:	b94c      	cbnz	r4, 80057a0 <_calloc_r+0x1c>
 800578c:	4611      	mov	r1, r2
 800578e:	9201      	str	r2, [sp, #4]
 8005790:	f7fe ff44 	bl	800461c <_malloc_r>
 8005794:	9a01      	ldr	r2, [sp, #4]
 8005796:	4605      	mov	r5, r0
 8005798:	b930      	cbnz	r0, 80057a8 <_calloc_r+0x24>
 800579a:	4628      	mov	r0, r5
 800579c:	b003      	add	sp, #12
 800579e:	bd30      	pop	{r4, r5, pc}
 80057a0:	220c      	movs	r2, #12
 80057a2:	6002      	str	r2, [r0, #0]
 80057a4:	2500      	movs	r5, #0
 80057a6:	e7f8      	b.n	800579a <_calloc_r+0x16>
 80057a8:	4621      	mov	r1, r4
 80057aa:	f7fd ffcc 	bl	8003746 <memset>
 80057ae:	e7f4      	b.n	800579a <_calloc_r+0x16>

080057b0 <__ascii_mbtowc>:
 80057b0:	b082      	sub	sp, #8
 80057b2:	b901      	cbnz	r1, 80057b6 <__ascii_mbtowc+0x6>
 80057b4:	a901      	add	r1, sp, #4
 80057b6:	b142      	cbz	r2, 80057ca <__ascii_mbtowc+0x1a>
 80057b8:	b14b      	cbz	r3, 80057ce <__ascii_mbtowc+0x1e>
 80057ba:	7813      	ldrb	r3, [r2, #0]
 80057bc:	600b      	str	r3, [r1, #0]
 80057be:	7812      	ldrb	r2, [r2, #0]
 80057c0:	1e10      	subs	r0, r2, #0
 80057c2:	bf18      	it	ne
 80057c4:	2001      	movne	r0, #1
 80057c6:	b002      	add	sp, #8
 80057c8:	4770      	bx	lr
 80057ca:	4610      	mov	r0, r2
 80057cc:	e7fb      	b.n	80057c6 <__ascii_mbtowc+0x16>
 80057ce:	f06f 0001 	mvn.w	r0, #1
 80057d2:	e7f8      	b.n	80057c6 <__ascii_mbtowc+0x16>

080057d4 <_realloc_r>:
 80057d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d8:	4680      	mov	r8, r0
 80057da:	4614      	mov	r4, r2
 80057dc:	460e      	mov	r6, r1
 80057de:	b921      	cbnz	r1, 80057ea <_realloc_r+0x16>
 80057e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057e4:	4611      	mov	r1, r2
 80057e6:	f7fe bf19 	b.w	800461c <_malloc_r>
 80057ea:	b92a      	cbnz	r2, 80057f8 <_realloc_r+0x24>
 80057ec:	f7fe fea2 	bl	8004534 <_free_r>
 80057f0:	4625      	mov	r5, r4
 80057f2:	4628      	mov	r0, r5
 80057f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f8:	f000 f841 	bl	800587e <_malloc_usable_size_r>
 80057fc:	4284      	cmp	r4, r0
 80057fe:	4607      	mov	r7, r0
 8005800:	d802      	bhi.n	8005808 <_realloc_r+0x34>
 8005802:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005806:	d812      	bhi.n	800582e <_realloc_r+0x5a>
 8005808:	4621      	mov	r1, r4
 800580a:	4640      	mov	r0, r8
 800580c:	f7fe ff06 	bl	800461c <_malloc_r>
 8005810:	4605      	mov	r5, r0
 8005812:	2800      	cmp	r0, #0
 8005814:	d0ed      	beq.n	80057f2 <_realloc_r+0x1e>
 8005816:	42bc      	cmp	r4, r7
 8005818:	4622      	mov	r2, r4
 800581a:	4631      	mov	r1, r6
 800581c:	bf28      	it	cs
 800581e:	463a      	movcs	r2, r7
 8005820:	f7fd fffe 	bl	8003820 <memcpy>
 8005824:	4631      	mov	r1, r6
 8005826:	4640      	mov	r0, r8
 8005828:	f7fe fe84 	bl	8004534 <_free_r>
 800582c:	e7e1      	b.n	80057f2 <_realloc_r+0x1e>
 800582e:	4635      	mov	r5, r6
 8005830:	e7df      	b.n	80057f2 <_realloc_r+0x1e>

08005832 <__ascii_wctomb>:
 8005832:	b149      	cbz	r1, 8005848 <__ascii_wctomb+0x16>
 8005834:	2aff      	cmp	r2, #255	; 0xff
 8005836:	bf85      	ittet	hi
 8005838:	238a      	movhi	r3, #138	; 0x8a
 800583a:	6003      	strhi	r3, [r0, #0]
 800583c:	700a      	strbls	r2, [r1, #0]
 800583e:	f04f 30ff 	movhi.w	r0, #4294967295
 8005842:	bf98      	it	ls
 8005844:	2001      	movls	r0, #1
 8005846:	4770      	bx	lr
 8005848:	4608      	mov	r0, r1
 800584a:	4770      	bx	lr

0800584c <fiprintf>:
 800584c:	b40e      	push	{r1, r2, r3}
 800584e:	b503      	push	{r0, r1, lr}
 8005850:	4601      	mov	r1, r0
 8005852:	ab03      	add	r3, sp, #12
 8005854:	4805      	ldr	r0, [pc, #20]	; (800586c <fiprintf+0x20>)
 8005856:	f853 2b04 	ldr.w	r2, [r3], #4
 800585a:	6800      	ldr	r0, [r0, #0]
 800585c:	9301      	str	r3, [sp, #4]
 800585e:	f7ff fc67 	bl	8005130 <_vfiprintf_r>
 8005862:	b002      	add	sp, #8
 8005864:	f85d eb04 	ldr.w	lr, [sp], #4
 8005868:	b003      	add	sp, #12
 800586a:	4770      	bx	lr
 800586c:	20000084 	.word	0x20000084

08005870 <abort>:
 8005870:	b508      	push	{r3, lr}
 8005872:	2006      	movs	r0, #6
 8005874:	f000 f834 	bl	80058e0 <raise>
 8005878:	2001      	movs	r0, #1
 800587a:	f7fc fff0 	bl	800285e <_exit>

0800587e <_malloc_usable_size_r>:
 800587e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005882:	1f18      	subs	r0, r3, #4
 8005884:	2b00      	cmp	r3, #0
 8005886:	bfbc      	itt	lt
 8005888:	580b      	ldrlt	r3, [r1, r0]
 800588a:	18c0      	addlt	r0, r0, r3
 800588c:	4770      	bx	lr

0800588e <_raise_r>:
 800588e:	291f      	cmp	r1, #31
 8005890:	b538      	push	{r3, r4, r5, lr}
 8005892:	4604      	mov	r4, r0
 8005894:	460d      	mov	r5, r1
 8005896:	d904      	bls.n	80058a2 <_raise_r+0x14>
 8005898:	2316      	movs	r3, #22
 800589a:	6003      	str	r3, [r0, #0]
 800589c:	f04f 30ff 	mov.w	r0, #4294967295
 80058a0:	bd38      	pop	{r3, r4, r5, pc}
 80058a2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80058a4:	b112      	cbz	r2, 80058ac <_raise_r+0x1e>
 80058a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80058aa:	b94b      	cbnz	r3, 80058c0 <_raise_r+0x32>
 80058ac:	4620      	mov	r0, r4
 80058ae:	f000 f831 	bl	8005914 <_getpid_r>
 80058b2:	462a      	mov	r2, r5
 80058b4:	4601      	mov	r1, r0
 80058b6:	4620      	mov	r0, r4
 80058b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058bc:	f000 b818 	b.w	80058f0 <_kill_r>
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d00a      	beq.n	80058da <_raise_r+0x4c>
 80058c4:	1c59      	adds	r1, r3, #1
 80058c6:	d103      	bne.n	80058d0 <_raise_r+0x42>
 80058c8:	2316      	movs	r3, #22
 80058ca:	6003      	str	r3, [r0, #0]
 80058cc:	2001      	movs	r0, #1
 80058ce:	e7e7      	b.n	80058a0 <_raise_r+0x12>
 80058d0:	2400      	movs	r4, #0
 80058d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80058d6:	4628      	mov	r0, r5
 80058d8:	4798      	blx	r3
 80058da:	2000      	movs	r0, #0
 80058dc:	e7e0      	b.n	80058a0 <_raise_r+0x12>
	...

080058e0 <raise>:
 80058e0:	4b02      	ldr	r3, [pc, #8]	; (80058ec <raise+0xc>)
 80058e2:	4601      	mov	r1, r0
 80058e4:	6818      	ldr	r0, [r3, #0]
 80058e6:	f7ff bfd2 	b.w	800588e <_raise_r>
 80058ea:	bf00      	nop
 80058ec:	20000084 	.word	0x20000084

080058f0 <_kill_r>:
 80058f0:	b538      	push	{r3, r4, r5, lr}
 80058f2:	4d07      	ldr	r5, [pc, #28]	; (8005910 <_kill_r+0x20>)
 80058f4:	2300      	movs	r3, #0
 80058f6:	4604      	mov	r4, r0
 80058f8:	4608      	mov	r0, r1
 80058fa:	4611      	mov	r1, r2
 80058fc:	602b      	str	r3, [r5, #0]
 80058fe:	f7fc ff9e 	bl	800283e <_kill>
 8005902:	1c43      	adds	r3, r0, #1
 8005904:	d102      	bne.n	800590c <_kill_r+0x1c>
 8005906:	682b      	ldr	r3, [r5, #0]
 8005908:	b103      	cbz	r3, 800590c <_kill_r+0x1c>
 800590a:	6023      	str	r3, [r4, #0]
 800590c:	bd38      	pop	{r3, r4, r5, pc}
 800590e:	bf00      	nop
 8005910:	20000464 	.word	0x20000464

08005914 <_getpid_r>:
 8005914:	f7fc bf8b 	b.w	800282e <_getpid>

08005918 <_init>:
 8005918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800591a:	bf00      	nop
 800591c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800591e:	bc08      	pop	{r3}
 8005920:	469e      	mov	lr, r3
 8005922:	4770      	bx	lr

08005924 <_fini>:
 8005924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005926:	bf00      	nop
 8005928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800592a:	bc08      	pop	{r3}
 800592c:	469e      	mov	lr, r3
 800592e:	4770      	bx	lr
